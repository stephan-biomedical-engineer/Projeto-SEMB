
Blood_Pressure_Meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08005b60  08005b60  00006b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ee8  08005ee8  000071d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005ee8  08005ee8  00006ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ef0  08005ef0  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ef0  08005ef0  00006ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ef4  08005ef4  00006ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005ef8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200001d4  080060cc  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  080060cc  00007428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000deea  00000000  00000000  00007204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220f  00000000  00000000  000150ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00017300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b30  00000000  00000000  00018160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b64  00000000  00000000  00018c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001085a  00000000  00000000  000317f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bdaf  00000000  00000000  0004204e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dddfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c48  00000000  00000000  000dde40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000e2a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b48 	.word	0x08005b48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08005b48 	.word	0x08005b48

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eac:	f000 fbc2 	bl	8001634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb0:	f000 f80c 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb4:	f000 f916 	bl	80010e4 <MX_GPIO_Init>
  MX_TIM11_Init();
 8000eb8:	f000 f8f0 	bl	800109c <MX_TIM11_Init>
  MX_ADC1_Init();
 8000ebc:	f000 f86e 	bl	8000f9c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ec0:	f000 f8be 	bl	8001040 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 8000ec4:	f002 f998 	bl	80031f8 <app_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <main+0x20>

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b094      	sub	sp, #80	@ 0x50
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 0320 	add.w	r3, r7, #32
 8000ed6:	2230      	movs	r2, #48	@ 0x30
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f002 ff13 	bl	8003d06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	4b27      	ldr	r3, [pc, #156]	@ (8000f94 <SystemClock_Config+0xc8>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	4a26      	ldr	r2, [pc, #152]	@ (8000f94 <SystemClock_Config+0xc8>)
 8000efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000efe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f00:	4b24      	ldr	r3, [pc, #144]	@ (8000f94 <SystemClock_Config+0xc8>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	4b21      	ldr	r3, [pc, #132]	@ (8000f98 <SystemClock_Config+0xcc>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a20      	ldr	r2, [pc, #128]	@ (8000f98 <SystemClock_Config+0xcc>)
 8000f16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f98 <SystemClock_Config+0xcc>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f30:	2310      	movs	r3, #16
 8000f32:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f34:	2302      	movs	r3, #2
 8000f36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000f3c:	230c      	movs	r3, #12
 8000f3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000f40:	2360      	movs	r3, #96	@ 0x60
 8000f42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f44:	2302      	movs	r3, #2
 8000f46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f48:	2304      	movs	r3, #4
 8000f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4c:	f107 0320 	add.w	r3, r7, #32
 8000f50:	4618      	mov	r0, r3
 8000f52:	f001 fafb 	bl	800254c <HAL_RCC_OscConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f5c:	f000 f94c 	bl	80011f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f60:	230f      	movs	r3, #15
 8000f62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f64:	2302      	movs	r3, #2
 8000f66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 fd5d 	bl	8002a3c <HAL_RCC_ClockConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f88:	f000 f936 	bl	80011f8 <Error_Handler>
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	3750      	adds	r7, #80	@ 0x50
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40007000 	.word	0x40007000

08000f9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fae:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <MX_ADC1_Init+0x98>)
 8000fb0:	4a21      	ldr	r2, [pc, #132]	@ (8001038 <MX_ADC1_Init+0x9c>)
 8000fb2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <MX_ADC1_Init+0x98>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fba:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <MX_ADC1_Init+0x98>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <MX_ADC1_Init+0x98>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <MX_ADC1_Init+0x98>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fcc:	4b19      	ldr	r3, [pc, #100]	@ (8001034 <MX_ADC1_Init+0x98>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <MX_ADC1_Init+0x98>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fda:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <MX_ADC1_Init+0x98>)
 8000fdc:	4a17      	ldr	r2, [pc, #92]	@ (800103c <MX_ADC1_Init+0xa0>)
 8000fde:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_ADC1_Init+0x98>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <MX_ADC1_Init+0x98>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fec:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_ADC1_Init+0x98>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_ADC1_Init+0x98>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ffa:	480e      	ldr	r0, [pc, #56]	@ (8001034 <MX_ADC1_Init+0x98>)
 8000ffc:	f000 fb8c 	bl	8001718 <HAL_ADC_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001006:	f000 f8f7 	bl	80011f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800100a:	2303      	movs	r3, #3
 800100c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800100e:	2301      	movs	r3, #1
 8001010:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001016:	463b      	mov	r3, r7
 8001018:	4619      	mov	r1, r3
 800101a:	4806      	ldr	r0, [pc, #24]	@ (8001034 <MX_ADC1_Init+0x98>)
 800101c:	f000 fc74 	bl	8001908 <HAL_ADC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001026:	f000 f8e7 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200001f0 	.word	0x200001f0
 8001038:	40012000 	.word	0x40012000
 800103c:	0f000001 	.word	0x0f000001

08001040 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001044:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <MX_I2C1_Init+0x50>)
 8001046:	4a13      	ldr	r2, [pc, #76]	@ (8001094 <MX_I2C1_Init+0x54>)
 8001048:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800104a:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <MX_I2C1_Init+0x50>)
 800104c:	4a12      	ldr	r2, [pc, #72]	@ (8001098 <MX_I2C1_Init+0x58>)
 800104e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <MX_I2C1_Init+0x50>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001056:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <MX_I2C1_Init+0x50>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800105c:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <MX_I2C1_Init+0x50>)
 800105e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001062:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001064:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <MX_I2C1_Init+0x50>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800106a:	4b09      	ldr	r3, [pc, #36]	@ (8001090 <MX_I2C1_Init+0x50>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001070:	4b07      	ldr	r3, [pc, #28]	@ (8001090 <MX_I2C1_Init+0x50>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001076:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <MX_I2C1_Init+0x50>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800107c:	4804      	ldr	r0, [pc, #16]	@ (8001090 <MX_I2C1_Init+0x50>)
 800107e:	f001 f921 	bl	80022c4 <HAL_I2C_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001088:	f000 f8b6 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000238 	.word	0x20000238
 8001094:	40005400 	.word	0x40005400
 8001098:	000186a0 	.word	0x000186a0

0800109c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80010a0:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <MX_TIM11_Init+0x40>)
 80010a2:	4a0f      	ldr	r2, [pc, #60]	@ (80010e0 <MX_TIM11_Init+0x44>)
 80010a4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80010a6:	4b0d      	ldr	r3, [pc, #52]	@ (80010dc <MX_TIM11_Init+0x40>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ac:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <MX_TIM11_Init+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80010b2:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <MX_TIM11_Init+0x40>)
 80010b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010b8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ba:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <MX_TIM11_Init+0x40>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <MX_TIM11_Init+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80010c6:	4805      	ldr	r0, [pc, #20]	@ (80010dc <MX_TIM11_Init+0x40>)
 80010c8:	f001 fe84 	bl	8002dd4 <HAL_TIM_Base_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80010d2:	f000 f891 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000028c 	.word	0x2000028c
 80010e0:	40014800 	.word	0x40014800

080010e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	4b3b      	ldr	r3, [pc, #236]	@ (80011ec <MX_GPIO_Init+0x108>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	4a3a      	ldr	r2, [pc, #232]	@ (80011ec <MX_GPIO_Init+0x108>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6313      	str	r3, [r2, #48]	@ 0x30
 800110a:	4b38      	ldr	r3, [pc, #224]	@ (80011ec <MX_GPIO_Init+0x108>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4b34      	ldr	r3, [pc, #208]	@ (80011ec <MX_GPIO_Init+0x108>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a33      	ldr	r2, [pc, #204]	@ (80011ec <MX_GPIO_Init+0x108>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b31      	ldr	r3, [pc, #196]	@ (80011ec <MX_GPIO_Init+0x108>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	4b2d      	ldr	r3, [pc, #180]	@ (80011ec <MX_GPIO_Init+0x108>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a2c      	ldr	r2, [pc, #176]	@ (80011ec <MX_GPIO_Init+0x108>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b2a      	ldr	r3, [pc, #168]	@ (80011ec <MX_GPIO_Init+0x108>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Valve_OUT_GPIO_Port, Valve_OUT_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001154:	4826      	ldr	r0, [pc, #152]	@ (80011f0 <MX_GPIO_Init+0x10c>)
 8001156:	f001 f89b 	bl	8002290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_Motor_OUT_Pin|IN2_Motor_OUT_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001160:	4824      	ldr	r0, [pc, #144]	@ (80011f4 <MX_GPIO_Init+0x110>)
 8001162:	f001 f895 	bl	8002290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Enable_OUT_GPIO_Port, LCD_Enable_OUT_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2120      	movs	r1, #32
 800116a:	4821      	ldr	r0, [pc, #132]	@ (80011f0 <MX_GPIO_Init+0x10c>)
 800116c:	f001 f890 	bl	8002290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001170:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001174:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800117a:	2302      	movs	r3, #2
 800117c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	4619      	mov	r1, r3
 8001184:	481a      	ldr	r0, [pc, #104]	@ (80011f0 <MX_GPIO_Init+0x10c>)
 8001186:	f000 feff 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : Valve_OUT_Pin LCD_Enable_OUT_Pin */
  GPIO_InitStruct.Pin = Valve_OUT_Pin|LCD_Enable_OUT_Pin;
 800118a:	f248 0320 	movw	r3, #32800	@ 0x8020
 800118e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001194:	2302      	movs	r3, #2
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	4619      	mov	r1, r3
 80011a2:	4813      	ldr	r0, [pc, #76]	@ (80011f0 <MX_GPIO_Init+0x10c>)
 80011a4:	f000 fef0 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Motor_OUT_Pin IN2_Motor_OUT_Pin */
  GPIO_InitStruct.Pin = IN1_Motor_OUT_Pin|IN2_Motor_OUT_Pin;
 80011a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	4619      	mov	r1, r3
 80011c0:	480c      	ldr	r0, [pc, #48]	@ (80011f4 <MX_GPIO_Init+0x110>)
 80011c2:	f000 fee1 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80011c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011d0:	2302      	movs	r3, #2
 80011d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	4619      	mov	r1, r3
 80011de:	4805      	ldr	r0, [pc, #20]	@ (80011f4 <MX_GPIO_Init+0x110>)
 80011e0:	f000 fed2 	bl	8001f88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e4:	bf00      	nop
 80011e6:	3720      	adds	r7, #32
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020000 	.word	0x40020000

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <Error_Handler+0x8>

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	4a0f      	ldr	r2, [pc, #60]	@ (8001250 <HAL_MspInit+0x4c>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001218:	6453      	str	r3, [r2, #68]	@ 0x44
 800121a:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <HAL_MspInit+0x4c>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <HAL_MspInit+0x4c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122e:	4a08      	ldr	r2, [pc, #32]	@ (8001250 <HAL_MspInit+0x4c>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001234:	6413      	str	r3, [r2, #64]	@ 0x40
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_MspInit+0x4c>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800

08001254 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	@ 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a17      	ldr	r2, [pc, #92]	@ (80012d0 <HAL_ADC_MspInit+0x7c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d127      	bne.n	80012c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <HAL_ADC_MspInit+0x80>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	4a15      	ldr	r2, [pc, #84]	@ (80012d4 <HAL_ADC_MspInit+0x80>)
 8001280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001284:	6453      	str	r3, [r2, #68]	@ 0x44
 8001286:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <HAL_ADC_MspInit+0x80>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <HAL_ADC_MspInit+0x80>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a0e      	ldr	r2, [pc, #56]	@ (80012d4 <HAL_ADC_MspInit+0x80>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <HAL_ADC_MspInit+0x80>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012ae:	2308      	movs	r3, #8
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b2:	2303      	movs	r3, #3
 80012b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <HAL_ADC_MspInit+0x84>)
 80012c2:	f000 fe61 	bl	8001f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	@ 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40012000 	.word	0x40012000
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020000 	.word	0x40020000

080012dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	@ 0x28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a19      	ldr	r2, [pc, #100]	@ (8001360 <HAL_I2C_MspInit+0x84>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d12b      	bne.n	8001356 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <HAL_I2C_MspInit+0x88>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	4a17      	ldr	r2, [pc, #92]	@ (8001364 <HAL_I2C_MspInit+0x88>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	6313      	str	r3, [r2, #48]	@ 0x30
 800130e:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <HAL_I2C_MspInit+0x88>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800131a:	23c0      	movs	r3, #192	@ 0xc0
 800131c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800131e:	2312      	movs	r3, #18
 8001320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800132a:	2304      	movs	r3, #4
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	480c      	ldr	r0, [pc, #48]	@ (8001368 <HAL_I2C_MspInit+0x8c>)
 8001336:	f000 fe27 	bl	8001f88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <HAL_I2C_MspInit+0x88>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	4a08      	ldr	r2, [pc, #32]	@ (8001364 <HAL_I2C_MspInit+0x88>)
 8001344:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001348:	6413      	str	r3, [r2, #64]	@ 0x40
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_I2C_MspInit+0x88>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001356:	bf00      	nop
 8001358:	3728      	adds	r7, #40	@ 0x28
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40005400 	.word	0x40005400
 8001364:	40023800 	.word	0x40023800
 8001368:	40020400 	.word	0x40020400

0800136c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0e      	ldr	r2, [pc, #56]	@ (80013b4 <HAL_TIM_Base_MspInit+0x48>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d115      	bne.n	80013aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001386:	4a0c      	ldr	r2, [pc, #48]	@ (80013b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001388:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800138c:	6453      	str	r3, [r2, #68]	@ 0x44
 800138e:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001392:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	201a      	movs	r0, #26
 80013a0:	f000 fdbb 	bl	8001f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80013a4:	201a      	movs	r0, #26
 80013a6:	f000 fdd4 	bl	8001f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40014800 	.word	0x40014800
 80013b8:	40023800 	.word	0x40023800

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <NMI_Handler+0x4>

080013c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <MemManage_Handler+0x4>

080013d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <BusFault_Handler+0x4>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <UsageFault_Handler+0x4>

080013e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001412:	f000 f961 	bl	80016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001420:	4802      	ldr	r0, [pc, #8]	@ (800142c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001422:	f001 fd26 	bl	8002e72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000028c 	.word	0x2000028c

08001430 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return 1;
 8001434:	2301      	movs	r3, #1
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <_kill>:

int _kill(int pid, int sig)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800144a:	f002 fcaf 	bl	8003dac <__errno>
 800144e:	4603      	mov	r3, r0
 8001450:	2216      	movs	r2, #22
 8001452:	601a      	str	r2, [r3, #0]
  return -1;
 8001454:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <_exit>:

void _exit (int status)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001468:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ffe7 	bl	8001440 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001472:	bf00      	nop
 8001474:	e7fd      	b.n	8001472 <_exit+0x12>

08001476 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e00a      	b.n	800149e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001488:	f3af 8000 	nop.w
 800148c:	4601      	mov	r1, r0
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	60ba      	str	r2, [r7, #8]
 8001494:	b2ca      	uxtb	r2, r1
 8001496:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	3301      	adds	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	dbf0      	blt.n	8001488 <_read+0x12>
  }

  return len;
 80014a6:	687b      	ldr	r3, [r7, #4]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	e009      	b.n	80014d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	60ba      	str	r2, [r7, #8]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	3301      	adds	r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	429a      	cmp	r2, r3
 80014dc:	dbf1      	blt.n	80014c2 <_write+0x12>
  }
  return len;
 80014de:	687b      	ldr	r3, [r7, #4]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <_close>:

int _close(int file)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001510:	605a      	str	r2, [r3, #4]
  return 0;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_isatty>:

int _isatty(int file)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001528:	2301      	movs	r3, #1
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001536:	b480      	push	{r7}
 8001538:	b085      	sub	sp, #20
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001558:	4a14      	ldr	r2, [pc, #80]	@ (80015ac <_sbrk+0x5c>)
 800155a:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <_sbrk+0x60>)
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001564:	4b13      	ldr	r3, [pc, #76]	@ (80015b4 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800156c:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <_sbrk+0x64>)
 800156e:	4a12      	ldr	r2, [pc, #72]	@ (80015b8 <_sbrk+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	429a      	cmp	r2, r3
 800157e:	d207      	bcs.n	8001590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001580:	f002 fc14 	bl	8003dac <__errno>
 8001584:	4603      	mov	r3, r0
 8001586:	220c      	movs	r2, #12
 8001588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800158e:	e009      	b.n	80015a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001590:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001596:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	4a05      	ldr	r2, [pc, #20]	@ (80015b4 <_sbrk+0x64>)
 80015a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20020000 	.word	0x20020000
 80015b0:	00000400 	.word	0x00000400
 80015b4:	200002d4 	.word	0x200002d4
 80015b8:	20000428 	.word	0x20000428

080015bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <SystemInit+0x20>)
 80015c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015c6:	4a05      	ldr	r2, [pc, #20]	@ (80015dc <SystemInit+0x20>)
 80015c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001618 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015e4:	f7ff ffea 	bl	80015bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e8:	480c      	ldr	r0, [pc, #48]	@ (800161c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ea:	490d      	ldr	r1, [pc, #52]	@ (8001620 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001624 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001628 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001600:	4c0a      	ldr	r4, [pc, #40]	@ (800162c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800160e:	f002 fbd3 	bl	8003db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001612:	f7ff fc49 	bl	8000ea8 <main>
  bx  lr    
 8001616:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001618:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001620:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001624:	08005ef8 	.word	0x08005ef8
  ldr r2, =_sbss
 8001628:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800162c:	20000428 	.word	0x20000428

08001630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC_IRQHandler>
	...

08001634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001638:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <HAL_Init+0x40>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0d      	ldr	r2, [pc, #52]	@ (8001674 <HAL_Init+0x40>)
 800163e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001642:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001644:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <HAL_Init+0x40>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <HAL_Init+0x40>)
 800164a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800164e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001650:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <HAL_Init+0x40>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a07      	ldr	r2, [pc, #28]	@ (8001674 <HAL_Init+0x40>)
 8001656:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800165a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165c:	2003      	movs	r0, #3
 800165e:	f000 fc51 	bl	8001f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001662:	200f      	movs	r0, #15
 8001664:	f000 f808 	bl	8001678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001668:	f7ff fdcc 	bl	8001204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023c00 	.word	0x40023c00

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <HAL_InitTick+0x54>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <HAL_InitTick+0x58>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800168e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fc69 	bl	8001f6e <HAL_SYSTICK_Config>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00e      	b.n	80016c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b0f      	cmp	r3, #15
 80016aa:	d80a      	bhi.n	80016c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016b4:	f000 fc31 	bl	8001f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b8:	4a06      	ldr	r2, [pc, #24]	@ (80016d4 <HAL_InitTick+0x5c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e000      	b.n	80016c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000000 	.word	0x20000000
 80016d0:	20000008 	.word	0x20000008
 80016d4:	20000004 	.word	0x20000004

080016d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_IncTick+0x20>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_IncTick+0x24>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <HAL_IncTick+0x24>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000008 	.word	0x20000008
 80016fc:	200002d8 	.word	0x200002d8

08001700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <HAL_GetTick+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	200002d8 	.word	0x200002d8

08001718 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e033      	b.n	8001796 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	2b00      	cmp	r3, #0
 8001734:	d109      	bne.n	800174a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fd8c 	bl	8001254 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	2b00      	cmp	r3, #0
 8001754:	d118      	bne.n	8001788 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800175e:	f023 0302 	bic.w	r3, r3, #2
 8001762:	f043 0202 	orr.w	r2, r3, #2
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f9fe 	bl	8001b6c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	f023 0303 	bic.w	r3, r3, #3
 800177e:	f043 0201 	orr.w	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	641a      	str	r2, [r3, #64]	@ 0x40
 8001786:	e001      	b.n	800178c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <HAL_ADC_Start+0x1a>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e097      	b.n	80018ea <HAL_ADC_Start+0x14a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d018      	beq.n	8001802 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017e0:	4b45      	ldr	r3, [pc, #276]	@ (80018f8 <HAL_ADC_Start+0x158>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a45      	ldr	r2, [pc, #276]	@ (80018fc <HAL_ADC_Start+0x15c>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0c9a      	lsrs	r2, r3, #18
 80017ec:	4613      	mov	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80017f4:	e002      	b.n	80017fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f9      	bne.n	80017f6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b01      	cmp	r3, #1
 800180e:	d15f      	bne.n	80018d0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800182e:	2b00      	cmp	r3, #0
 8001830:	d007      	beq.n	8001842 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800183a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800184a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800184e:	d106      	bne.n	800185e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001854:	f023 0206 	bic.w	r2, r3, #6
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	645a      	str	r2, [r3, #68]	@ 0x44
 800185c:	e002      	b.n	8001864 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800186c:	4b24      	ldr	r3, [pc, #144]	@ (8001900 <HAL_ADC_Start+0x160>)
 800186e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001878:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 031f 	and.w	r3, r3, #31
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10f      	bne.n	80018a6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d129      	bne.n	80018e8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	e020      	b.n	80018e8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a16      	ldr	r2, [pc, #88]	@ (8001904 <HAL_ADC_Start+0x164>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d11b      	bne.n	80018e8 <HAL_ADC_Start+0x148>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d114      	bne.n	80018e8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	e00b      	b.n	80018e8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	f043 0210 	orr.w	r2, r3, #16
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e0:	f043 0201 	orr.w	r2, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000000 	.word	0x20000000
 80018fc:	431bde83 	.word	0x431bde83
 8001900:	40012300 	.word	0x40012300
 8001904:	40012000 	.word	0x40012000

08001908 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x1c>
 8001920:	2302      	movs	r3, #2
 8001922:	e113      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x244>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b09      	cmp	r3, #9
 8001932:	d925      	bls.n	8001980 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68d9      	ldr	r1, [r3, #12]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	461a      	mov	r2, r3
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	3b1e      	subs	r3, #30
 800194a:	2207      	movs	r2, #7
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43da      	mvns	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	400a      	ands	r2, r1
 8001958:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68d9      	ldr	r1, [r3, #12]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	b29b      	uxth	r3, r3
 800196a:	4618      	mov	r0, r3
 800196c:	4603      	mov	r3, r0
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4403      	add	r3, r0
 8001972:	3b1e      	subs	r3, #30
 8001974:	409a      	lsls	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	e022      	b.n	80019c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6919      	ldr	r1, [r3, #16]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	461a      	mov	r2, r3
 800198e:	4613      	mov	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	2207      	movs	r2, #7
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	400a      	ands	r2, r1
 80019a2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6919      	ldr	r1, [r3, #16]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	4618      	mov	r0, r3
 80019b6:	4603      	mov	r3, r0
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4403      	add	r3, r0
 80019bc:	409a      	lsls	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b06      	cmp	r3, #6
 80019cc:	d824      	bhi.n	8001a18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	3b05      	subs	r3, #5
 80019e0:	221f      	movs	r2, #31
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43da      	mvns	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	400a      	ands	r2, r1
 80019ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	4618      	mov	r0, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	3b05      	subs	r3, #5
 8001a0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a16:	e04c      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b0c      	cmp	r3, #12
 8001a1e:	d824      	bhi.n	8001a6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	3b23      	subs	r3, #35	@ 0x23
 8001a32:	221f      	movs	r2, #31
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43da      	mvns	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	400a      	ands	r2, r1
 8001a40:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	3b23      	subs	r3, #35	@ 0x23
 8001a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a68:	e023      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	3b41      	subs	r3, #65	@ 0x41
 8001a7c:	221f      	movs	r2, #31
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	400a      	ands	r2, r1
 8001a8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	4618      	mov	r0, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3b41      	subs	r3, #65	@ 0x41
 8001aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ab2:	4b29      	ldr	r3, [pc, #164]	@ (8001b58 <HAL_ADC_ConfigChannel+0x250>)
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a28      	ldr	r2, [pc, #160]	@ (8001b5c <HAL_ADC_ConfigChannel+0x254>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d10f      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x1d8>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b12      	cmp	r3, #18
 8001ac6:	d10b      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b5c <HAL_ADC_ConfigChannel+0x254>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d12b      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x23a>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a1c      	ldr	r2, [pc, #112]	@ (8001b60 <HAL_ADC_ConfigChannel+0x258>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d003      	beq.n	8001afc <HAL_ADC_ConfigChannel+0x1f4>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b11      	cmp	r3, #17
 8001afa:	d122      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a11      	ldr	r2, [pc, #68]	@ (8001b60 <HAL_ADC_ConfigChannel+0x258>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d111      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b1e:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <HAL_ADC_ConfigChannel+0x25c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a11      	ldr	r2, [pc, #68]	@ (8001b68 <HAL_ADC_ConfigChannel+0x260>)
 8001b24:	fba2 2303 	umull	r2, r3, r2, r3
 8001b28:	0c9a      	lsrs	r2, r3, #18
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b34:	e002      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f9      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	40012300 	.word	0x40012300
 8001b5c:	40012000 	.word	0x40012000
 8001b60:	10000012 	.word	0x10000012
 8001b64:	20000000 	.word	0x20000000
 8001b68:	431bde83 	.word	0x431bde83

08001b6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b74:	4b79      	ldr	r3, [pc, #484]	@ (8001d5c <ADC_Init+0x1f0>)
 8001b76:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ba0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6859      	ldr	r1, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	021a      	lsls	r2, r3, #8
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001bc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6859      	ldr	r1, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001be6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6899      	ldr	r1, [r3, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfe:	4a58      	ldr	r2, [pc, #352]	@ (8001d60 <ADC_Init+0x1f4>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d022      	beq.n	8001c4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6899      	ldr	r1, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6899      	ldr	r1, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	e00f      	b.n	8001c6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c68:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0202 	bic.w	r2, r2, #2
 8001c78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6899      	ldr	r1, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	7e1b      	ldrb	r3, [r3, #24]
 8001c84:	005a      	lsls	r2, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d01b      	beq.n	8001cd0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ca6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001cb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6859      	ldr	r1, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	035a      	lsls	r2, r3, #13
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	e007      	b.n	8001ce0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cde:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001cee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	051a      	lsls	r2, r3, #20
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6899      	ldr	r1, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d22:	025a      	lsls	r2, r3, #9
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6899      	ldr	r1, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	029a      	lsls	r2, r3, #10
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	609a      	str	r2, [r3, #8]
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	40012300 	.word	0x40012300
 8001d60:	0f000001 	.word	0x0f000001

08001d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d74:	4b0c      	ldr	r3, [pc, #48]	@ (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d80:	4013      	ands	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d96:	4a04      	ldr	r2, [pc, #16]	@ (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	60d3      	str	r3, [r2, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db0:	4b04      	ldr	r3, [pc, #16]	@ (8001dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	f003 0307 	and.w	r3, r3, #7
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db0b      	blt.n	8001df2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4907      	ldr	r1, [pc, #28]	@ (8001e00 <__NVIC_EnableIRQ+0x38>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2001      	movs	r0, #1
 8001dea:	fa00 f202 	lsl.w	r2, r0, r2
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000e100 	.word	0xe000e100

08001e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	490c      	ldr	r1, [pc, #48]	@ (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4908      	ldr	r1, [pc, #32]	@ (8001e54 <__NVIC_SetPriority+0x50>)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	@ 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	bf28      	it	cs
 8001e76:	2304      	movcs	r3, #4
 8001e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d902      	bls.n	8001e88 <NVIC_EncodePriority+0x30>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3b03      	subs	r3, #3
 8001e86:	e000      	b.n	8001e8a <NVIC_EncodePriority+0x32>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	4313      	orrs	r3, r2
         );
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	@ 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ed0:	d301      	bcc.n	8001ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00f      	b.n	8001ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f00 <SysTick_Config+0x40>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ede:	210f      	movs	r1, #15
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ee4:	f7ff ff8e 	bl	8001e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee8:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <SysTick_Config+0x40>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eee:	4b04      	ldr	r3, [pc, #16]	@ (8001f00 <SysTick_Config+0x40>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	e000e010 	.word	0xe000e010

08001f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff29 	bl	8001d64 <__NVIC_SetPriorityGrouping>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f2c:	f7ff ff3e 	bl	8001dac <__NVIC_GetPriorityGrouping>
 8001f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	6978      	ldr	r0, [r7, #20]
 8001f38:	f7ff ff8e 	bl	8001e58 <NVIC_EncodePriority>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff5d 	bl	8001e04 <__NVIC_SetPriority>
}
 8001f4a:	bf00      	nop
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff31 	bl	8001dc8 <__NVIC_EnableIRQ>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff ffa2 	bl	8001ec0 <SysTick_Config>
 8001f7c:	4603      	mov	r3, r0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	@ 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	e159      	b.n	8002258 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	f040 8148 	bne.w	8002252 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d005      	beq.n	8001fda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d130      	bne.n	800203c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002010:	2201      	movs	r2, #1
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 0201 	and.w	r2, r3, #1
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	2b03      	cmp	r3, #3
 8002046:	d017      	beq.n	8002078 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	2203      	movs	r2, #3
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d123      	bne.n	80020cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	08da      	lsrs	r2, r3, #3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3208      	adds	r2, #8
 800208c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	220f      	movs	r2, #15
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	08da      	lsrs	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3208      	adds	r2, #8
 80020c6:	69b9      	ldr	r1, [r7, #24]
 80020c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	2203      	movs	r2, #3
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0203 	and.w	r2, r3, #3
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80a2 	beq.w	8002252 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4b57      	ldr	r3, [pc, #348]	@ (8002270 <HAL_GPIO_Init+0x2e8>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002116:	4a56      	ldr	r2, [pc, #344]	@ (8002270 <HAL_GPIO_Init+0x2e8>)
 8002118:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800211c:	6453      	str	r3, [r2, #68]	@ 0x44
 800211e:	4b54      	ldr	r3, [pc, #336]	@ (8002270 <HAL_GPIO_Init+0x2e8>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800212a:	4a52      	ldr	r2, [pc, #328]	@ (8002274 <HAL_GPIO_Init+0x2ec>)
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	3302      	adds	r3, #2
 8002132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	220f      	movs	r2, #15
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a49      	ldr	r2, [pc, #292]	@ (8002278 <HAL_GPIO_Init+0x2f0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d019      	beq.n	800218a <HAL_GPIO_Init+0x202>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a48      	ldr	r2, [pc, #288]	@ (800227c <HAL_GPIO_Init+0x2f4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d013      	beq.n	8002186 <HAL_GPIO_Init+0x1fe>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a47      	ldr	r2, [pc, #284]	@ (8002280 <HAL_GPIO_Init+0x2f8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00d      	beq.n	8002182 <HAL_GPIO_Init+0x1fa>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a46      	ldr	r2, [pc, #280]	@ (8002284 <HAL_GPIO_Init+0x2fc>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d007      	beq.n	800217e <HAL_GPIO_Init+0x1f6>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a45      	ldr	r2, [pc, #276]	@ (8002288 <HAL_GPIO_Init+0x300>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <HAL_GPIO_Init+0x1f2>
 8002176:	2304      	movs	r3, #4
 8002178:	e008      	b.n	800218c <HAL_GPIO_Init+0x204>
 800217a:	2307      	movs	r3, #7
 800217c:	e006      	b.n	800218c <HAL_GPIO_Init+0x204>
 800217e:	2303      	movs	r3, #3
 8002180:	e004      	b.n	800218c <HAL_GPIO_Init+0x204>
 8002182:	2302      	movs	r3, #2
 8002184:	e002      	b.n	800218c <HAL_GPIO_Init+0x204>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <HAL_GPIO_Init+0x204>
 800218a:	2300      	movs	r3, #0
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	f002 0203 	and.w	r2, r2, #3
 8002192:	0092      	lsls	r2, r2, #2
 8002194:	4093      	lsls	r3, r2
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800219c:	4935      	ldr	r1, [pc, #212]	@ (8002274 <HAL_GPIO_Init+0x2ec>)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	089b      	lsrs	r3, r3, #2
 80021a2:	3302      	adds	r3, #2
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021aa:	4b38      	ldr	r3, [pc, #224]	@ (800228c <HAL_GPIO_Init+0x304>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ce:	4a2f      	ldr	r2, [pc, #188]	@ (800228c <HAL_GPIO_Init+0x304>)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021d4:	4b2d      	ldr	r3, [pc, #180]	@ (800228c <HAL_GPIO_Init+0x304>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021f8:	4a24      	ldr	r2, [pc, #144]	@ (800228c <HAL_GPIO_Init+0x304>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021fe:	4b23      	ldr	r3, [pc, #140]	@ (800228c <HAL_GPIO_Init+0x304>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002222:	4a1a      	ldr	r2, [pc, #104]	@ (800228c <HAL_GPIO_Init+0x304>)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002228:	4b18      	ldr	r3, [pc, #96]	@ (800228c <HAL_GPIO_Init+0x304>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800224c:	4a0f      	ldr	r2, [pc, #60]	@ (800228c <HAL_GPIO_Init+0x304>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3301      	adds	r3, #1
 8002256:	61fb      	str	r3, [r7, #28]
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	2b0f      	cmp	r3, #15
 800225c:	f67f aea2 	bls.w	8001fa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	3724      	adds	r7, #36	@ 0x24
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800
 8002274:	40013800 	.word	0x40013800
 8002278:	40020000 	.word	0x40020000
 800227c:	40020400 	.word	0x40020400
 8002280:	40020800 	.word	0x40020800
 8002284:	40020c00 	.word	0x40020c00
 8002288:	40021000 	.word	0x40021000
 800228c:	40013c00 	.word	0x40013c00

08002290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	807b      	strh	r3, [r7, #2]
 800229c:	4613      	mov	r3, r2
 800229e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a0:	787b      	ldrb	r3, [r7, #1]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022a6:	887a      	ldrh	r2, [r7, #2]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022ac:	e003      	b.n	80022b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ae:	887b      	ldrh	r3, [r7, #2]
 80022b0:	041a      	lsls	r2, r3, #16
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	619a      	str	r2, [r3, #24]
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e12b      	b.n	800252e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fff6 	bl	80012dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2224      	movs	r2, #36	@ 0x24
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002316:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002326:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002328:	f000 fd40 	bl	8002dac <HAL_RCC_GetPCLK1Freq>
 800232c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	4a81      	ldr	r2, [pc, #516]	@ (8002538 <HAL_I2C_Init+0x274>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d807      	bhi.n	8002348 <HAL_I2C_Init+0x84>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4a80      	ldr	r2, [pc, #512]	@ (800253c <HAL_I2C_Init+0x278>)
 800233c:	4293      	cmp	r3, r2
 800233e:	bf94      	ite	ls
 8002340:	2301      	movls	r3, #1
 8002342:	2300      	movhi	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	e006      	b.n	8002356 <HAL_I2C_Init+0x92>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4a7d      	ldr	r2, [pc, #500]	@ (8002540 <HAL_I2C_Init+0x27c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	bf94      	ite	ls
 8002350:	2301      	movls	r3, #1
 8002352:	2300      	movhi	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e0e7      	b.n	800252e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4a78      	ldr	r2, [pc, #480]	@ (8002544 <HAL_I2C_Init+0x280>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	0c9b      	lsrs	r3, r3, #18
 8002368:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	430a      	orrs	r2, r1
 800237c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4a6a      	ldr	r2, [pc, #424]	@ (8002538 <HAL_I2C_Init+0x274>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d802      	bhi.n	8002398 <HAL_I2C_Init+0xd4>
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	3301      	adds	r3, #1
 8002396:	e009      	b.n	80023ac <HAL_I2C_Init+0xe8>
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	4a69      	ldr	r2, [pc, #420]	@ (8002548 <HAL_I2C_Init+0x284>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	099b      	lsrs	r3, r3, #6
 80023aa:	3301      	adds	r3, #1
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	430b      	orrs	r3, r1
 80023b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80023be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	495c      	ldr	r1, [pc, #368]	@ (8002538 <HAL_I2C_Init+0x274>)
 80023c8:	428b      	cmp	r3, r1
 80023ca:	d819      	bhi.n	8002400 <HAL_I2C_Init+0x13c>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	1e59      	subs	r1, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80023da:	1c59      	adds	r1, r3, #1
 80023dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80023e0:	400b      	ands	r3, r1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_I2C_Init+0x138>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1e59      	subs	r1, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80023f4:	3301      	adds	r3, #1
 80023f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023fa:	e051      	b.n	80024a0 <HAL_I2C_Init+0x1dc>
 80023fc:	2304      	movs	r3, #4
 80023fe:	e04f      	b.n	80024a0 <HAL_I2C_Init+0x1dc>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d111      	bne.n	800242c <HAL_I2C_Init+0x168>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1e58      	subs	r0, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6859      	ldr	r1, [r3, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	440b      	add	r3, r1
 8002416:	fbb0 f3f3 	udiv	r3, r0, r3
 800241a:	3301      	adds	r3, #1
 800241c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002420:	2b00      	cmp	r3, #0
 8002422:	bf0c      	ite	eq
 8002424:	2301      	moveq	r3, #1
 8002426:	2300      	movne	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	e012      	b.n	8002452 <HAL_I2C_Init+0x18e>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1e58      	subs	r0, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6859      	ldr	r1, [r3, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	0099      	lsls	r1, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002442:	3301      	adds	r3, #1
 8002444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_I2C_Init+0x196>
 8002456:	2301      	movs	r3, #1
 8002458:	e022      	b.n	80024a0 <HAL_I2C_Init+0x1dc>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10e      	bne.n	8002480 <HAL_I2C_Init+0x1bc>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1e58      	subs	r0, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6859      	ldr	r1, [r3, #4]
 800246a:	460b      	mov	r3, r1
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	440b      	add	r3, r1
 8002470:	fbb0 f3f3 	udiv	r3, r0, r3
 8002474:	3301      	adds	r3, #1
 8002476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800247e:	e00f      	b.n	80024a0 <HAL_I2C_Init+0x1dc>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1e58      	subs	r0, r3, #1
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6859      	ldr	r1, [r3, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	0099      	lsls	r1, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	fbb0 f3f3 	udiv	r3, r0, r3
 8002496:	3301      	adds	r3, #1
 8002498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800249c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	6809      	ldr	r1, [r1, #0]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69da      	ldr	r2, [r3, #28]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80024ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6911      	ldr	r1, [r2, #16]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68d2      	ldr	r2, [r2, #12]
 80024da:	4311      	orrs	r1, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	000186a0 	.word	0x000186a0
 800253c:	001e847f 	.word	0x001e847f
 8002540:	003d08ff 	.word	0x003d08ff
 8002544:	431bde83 	.word	0x431bde83
 8002548:	10624dd3 	.word	0x10624dd3

0800254c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e267      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d075      	beq.n	8002656 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800256a:	4b88      	ldr	r3, [pc, #544]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b04      	cmp	r3, #4
 8002574:	d00c      	beq.n	8002590 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002576:	4b85      	ldr	r3, [pc, #532]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800257e:	2b08      	cmp	r3, #8
 8002580:	d112      	bne.n	80025a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002582:	4b82      	ldr	r3, [pc, #520]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800258e:	d10b      	bne.n	80025a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	4b7e      	ldr	r3, [pc, #504]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d05b      	beq.n	8002654 <HAL_RCC_OscConfig+0x108>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d157      	bne.n	8002654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e242      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025b0:	d106      	bne.n	80025c0 <HAL_RCC_OscConfig+0x74>
 80025b2:	4b76      	ldr	r3, [pc, #472]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a75      	ldr	r2, [pc, #468]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e01d      	b.n	80025fc <HAL_RCC_OscConfig+0xb0>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x98>
 80025ca:	4b70      	ldr	r3, [pc, #448]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a6f      	ldr	r2, [pc, #444]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b6d      	ldr	r3, [pc, #436]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a6c      	ldr	r2, [pc, #432]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e00b      	b.n	80025fc <HAL_RCC_OscConfig+0xb0>
 80025e4:	4b69      	ldr	r3, [pc, #420]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a68      	ldr	r2, [pc, #416]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	4b66      	ldr	r3, [pc, #408]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a65      	ldr	r2, [pc, #404]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d013      	beq.n	800262c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7ff f87c 	bl	8001700 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800260c:	f7ff f878 	bl	8001700 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	@ 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e207      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261e:	4b5b      	ldr	r3, [pc, #364]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0xc0>
 800262a:	e014      	b.n	8002656 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7ff f868 	bl	8001700 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002634:	f7ff f864 	bl	8001700 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b64      	cmp	r3, #100	@ 0x64
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e1f3      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002646:	4b51      	ldr	r3, [pc, #324]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0xe8>
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d063      	beq.n	800272a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002662:	4b4a      	ldr	r3, [pc, #296]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00b      	beq.n	8002686 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800266e:	4b47      	ldr	r3, [pc, #284]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002676:	2b08      	cmp	r3, #8
 8002678:	d11c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267a:	4b44      	ldr	r3, [pc, #272]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d116      	bne.n	80026b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002686:	4b41      	ldr	r3, [pc, #260]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d005      	beq.n	800269e <HAL_RCC_OscConfig+0x152>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d001      	beq.n	800269e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e1c7      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269e:	4b3b      	ldr	r3, [pc, #236]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4937      	ldr	r1, [pc, #220]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b2:	e03a      	b.n	800272a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d020      	beq.n	80026fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026bc:	4b34      	ldr	r3, [pc, #208]	@ (8002790 <HAL_RCC_OscConfig+0x244>)
 80026be:	2201      	movs	r2, #1
 80026c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7ff f81d 	bl	8001700 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ca:	f7ff f819 	bl	8001700 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e1a8      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026dc:	4b2b      	ldr	r3, [pc, #172]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e8:	4b28      	ldr	r3, [pc, #160]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4925      	ldr	r1, [pc, #148]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	600b      	str	r3, [r1, #0]
 80026fc:	e015      	b.n	800272a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fe:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <HAL_RCC_OscConfig+0x244>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe fffc 	bl	8001700 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270c:	f7fe fff8 	bl	8001700 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e187      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271e:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d036      	beq.n	80027a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d016      	beq.n	800276c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273e:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <HAL_RCC_OscConfig+0x248>)
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7fe ffdc 	bl	8001700 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274c:	f7fe ffd8 	bl	8001700 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e167      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275e:	4b0b      	ldr	r3, [pc, #44]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x200>
 800276a:	e01b      	b.n	80027a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800276c:	4b09      	ldr	r3, [pc, #36]	@ (8002794 <HAL_RCC_OscConfig+0x248>)
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002772:	f7fe ffc5 	bl	8001700 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002778:	e00e      	b.n	8002798 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277a:	f7fe ffc1 	bl	8001700 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d907      	bls.n	8002798 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e150      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
 800278c:	40023800 	.word	0x40023800
 8002790:	42470000 	.word	0x42470000
 8002794:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002798:	4b88      	ldr	r3, [pc, #544]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800279a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ea      	bne.n	800277a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8097 	beq.w	80028e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b6:	4b81      	ldr	r3, [pc, #516]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10f      	bne.n	80027e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	4b7d      	ldr	r3, [pc, #500]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	4a7c      	ldr	r2, [pc, #496]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027d2:	4b7a      	ldr	r3, [pc, #488]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027de:	2301      	movs	r3, #1
 80027e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e2:	4b77      	ldr	r3, [pc, #476]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d118      	bne.n	8002820 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ee:	4b74      	ldr	r3, [pc, #464]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a73      	ldr	r2, [pc, #460]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fa:	f7fe ff81 	bl	8001700 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002802:	f7fe ff7d 	bl	8001700 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e10c      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002814:	4b6a      	ldr	r3, [pc, #424]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x2ea>
 8002828:	4b64      	ldr	r3, [pc, #400]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282c:	4a63      	ldr	r2, [pc, #396]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6713      	str	r3, [r2, #112]	@ 0x70
 8002834:	e01c      	b.n	8002870 <HAL_RCC_OscConfig+0x324>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b05      	cmp	r3, #5
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x30c>
 800283e:	4b5f      	ldr	r3, [pc, #380]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002842:	4a5e      	ldr	r2, [pc, #376]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	6713      	str	r3, [r2, #112]	@ 0x70
 800284a:	4b5c      	ldr	r3, [pc, #368]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284e:	4a5b      	ldr	r2, [pc, #364]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6713      	str	r3, [r2, #112]	@ 0x70
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0x324>
 8002858:	4b58      	ldr	r3, [pc, #352]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285c:	4a57      	ldr	r2, [pc, #348]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	6713      	str	r3, [r2, #112]	@ 0x70
 8002864:	4b55      	ldr	r3, [pc, #340]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002868:	4a54      	ldr	r2, [pc, #336]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800286a:	f023 0304 	bic.w	r3, r3, #4
 800286e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d015      	beq.n	80028a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7fe ff42 	bl	8001700 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287e:	e00a      	b.n	8002896 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002880:	f7fe ff3e 	bl	8001700 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e0cb      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002896:	4b49      	ldr	r3, [pc, #292]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0ee      	beq.n	8002880 <HAL_RCC_OscConfig+0x334>
 80028a2:	e014      	b.n	80028ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a4:	f7fe ff2c 	bl	8001700 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f7fe ff28 	bl	8001700 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e0b5      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c2:	4b3e      	ldr	r3, [pc, #248]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ee      	bne.n	80028ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d105      	bne.n	80028e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d4:	4b39      	ldr	r3, [pc, #228]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	4a38      	ldr	r2, [pc, #224]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80a1 	beq.w	8002a2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ea:	4b34      	ldr	r3, [pc, #208]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d05c      	beq.n	80029b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d141      	bne.n	8002982 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fe:	4b31      	ldr	r3, [pc, #196]	@ (80029c4 <HAL_RCC_OscConfig+0x478>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe fefc 	bl	8001700 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe fef8 	bl	8001700 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e087      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	4b27      	ldr	r3, [pc, #156]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	019b      	lsls	r3, r3, #6
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002940:	085b      	lsrs	r3, r3, #1
 8002942:	3b01      	subs	r3, #1
 8002944:	041b      	lsls	r3, r3, #16
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294c:	061b      	lsls	r3, r3, #24
 800294e:	491b      	ldr	r1, [pc, #108]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002954:	4b1b      	ldr	r3, [pc, #108]	@ (80029c4 <HAL_RCC_OscConfig+0x478>)
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7fe fed1 	bl	8001700 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002962:	f7fe fecd 	bl	8001700 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e05c      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002974:	4b11      	ldr	r3, [pc, #68]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x416>
 8002980:	e054      	b.n	8002a2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002982:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <HAL_RCC_OscConfig+0x478>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe feba 	bl	8001700 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe feb6 	bl	8001700 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e045      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a2:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x444>
 80029ae:	e03d      	b.n	8002a2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d107      	bne.n	80029c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e038      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40007000 	.word	0x40007000
 80029c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a38 <HAL_RCC_OscConfig+0x4ec>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d028      	beq.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d121      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d11a      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029f8:	4013      	ands	r3, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d111      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	3b01      	subs	r3, #1
 8002a12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d107      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800

08002a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0cc      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a50:	4b68      	ldr	r3, [pc, #416]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d90c      	bls.n	8002a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b65      	ldr	r3, [pc, #404]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b63      	ldr	r3, [pc, #396]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0b8      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d020      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a90:	4b59      	ldr	r3, [pc, #356]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4a58      	ldr	r2, [pc, #352]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa8:	4b53      	ldr	r3, [pc, #332]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4a52      	ldr	r2, [pc, #328]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab4:	4b50      	ldr	r3, [pc, #320]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	494d      	ldr	r1, [pc, #308]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d044      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d107      	bne.n	8002aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ada:	4b47      	ldr	r3, [pc, #284]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d119      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e07f      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d003      	beq.n	8002afa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afa:	4b3f      	ldr	r3, [pc, #252]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e06f      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e067      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b1a:	4b37      	ldr	r3, [pc, #220]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f023 0203 	bic.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4934      	ldr	r1, [pc, #208]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b2c:	f7fe fde8 	bl	8001700 <HAL_GetTick>
 8002b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b34:	f7fe fde4 	bl	8001700 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e04f      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 020c 	and.w	r2, r3, #12
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1eb      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b25      	ldr	r3, [pc, #148]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d20c      	bcs.n	8002b84 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b22      	ldr	r3, [pc, #136]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b72:	4b20      	ldr	r3, [pc, #128]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e032      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b90:	4b19      	ldr	r3, [pc, #100]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4916      	ldr	r1, [pc, #88]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bae:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	490e      	ldr	r1, [pc, #56]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bc2:	f000 f821 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	490a      	ldr	r1, [pc, #40]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002bd4:	5ccb      	ldrb	r3, [r1, r3]
 8002bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bda:	4a09      	ldr	r2, [pc, #36]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bde:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <HAL_RCC_ClockConfig+0x1c8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fd48 	bl	8001678 <HAL_InitTick>

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40023c00 	.word	0x40023c00
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	08005b60 	.word	0x08005b60
 8002c00:	20000000 	.word	0x20000000
 8002c04:	20000004 	.word	0x20000004

08002c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c0c:	b090      	sub	sp, #64	@ 0x40
 8002c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c20:	4b59      	ldr	r3, [pc, #356]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d00d      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0x40>
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	f200 80a1 	bhi.w	8002d74 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x34>
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d003      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c3a:	e09b      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c3c:	4b53      	ldr	r3, [pc, #332]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x184>)
 8002c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c40:	e09b      	b.n	8002d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c42:	4b53      	ldr	r3, [pc, #332]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c46:	e098      	b.n	8002d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c48:	4b4f      	ldr	r3, [pc, #316]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c50:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c52:	4b4d      	ldr	r3, [pc, #308]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d028      	beq.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	2200      	movs	r2, #0
 8002c66:	623b      	str	r3, [r7, #32]
 8002c68:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c70:	2100      	movs	r1, #0
 8002c72:	4b47      	ldr	r3, [pc, #284]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c74:	fb03 f201 	mul.w	r2, r3, r1
 8002c78:	2300      	movs	r3, #0
 8002c7a:	fb00 f303 	mul.w	r3, r0, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	4a43      	ldr	r2, [pc, #268]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c82:	fba0 1202 	umull	r1, r2, r0, r2
 8002c86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c88:	460a      	mov	r2, r1
 8002c8a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c8e:	4413      	add	r3, r2
 8002c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c94:	2200      	movs	r2, #0
 8002c96:	61bb      	str	r3, [r7, #24]
 8002c98:	61fa      	str	r2, [r7, #28]
 8002c9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002ca2:	f7fd ff89 	bl	8000bb8 <__aeabi_uldivmod>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4613      	mov	r3, r2
 8002cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cae:	e053      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb0:	4b35      	ldr	r3, [pc, #212]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	099b      	lsrs	r3, r3, #6
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	617a      	str	r2, [r7, #20]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cc2:	f04f 0b00 	mov.w	fp, #0
 8002cc6:	4652      	mov	r2, sl
 8002cc8:	465b      	mov	r3, fp
 8002cca:	f04f 0000 	mov.w	r0, #0
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	0159      	lsls	r1, r3, #5
 8002cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd8:	0150      	lsls	r0, r2, #5
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	ebb2 080a 	subs.w	r8, r2, sl
 8002ce2:	eb63 090b 	sbc.w	r9, r3, fp
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cf2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cf6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002cfa:	ebb2 0408 	subs.w	r4, r2, r8
 8002cfe:	eb63 0509 	sbc.w	r5, r3, r9
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	00eb      	lsls	r3, r5, #3
 8002d0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d10:	00e2      	lsls	r2, r4, #3
 8002d12:	4614      	mov	r4, r2
 8002d14:	461d      	mov	r5, r3
 8002d16:	eb14 030a 	adds.w	r3, r4, sl
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	eb45 030b 	adc.w	r3, r5, fp
 8002d20:	607b      	str	r3, [r7, #4]
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d2e:	4629      	mov	r1, r5
 8002d30:	028b      	lsls	r3, r1, #10
 8002d32:	4621      	mov	r1, r4
 8002d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d38:	4621      	mov	r1, r4
 8002d3a:	028a      	lsls	r2, r1, #10
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d42:	2200      	movs	r2, #0
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	60fa      	str	r2, [r7, #12]
 8002d48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d4c:	f7fd ff34 	bl	8000bb8 <__aeabi_uldivmod>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4613      	mov	r3, r2
 8002d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d58:	4b0b      	ldr	r3, [pc, #44]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	0c1b      	lsrs	r3, r3, #16
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	3301      	adds	r3, #1
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002d68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d70:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d72:	e002      	b.n	8002d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d74:	4b05      	ldr	r3, [pc, #20]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x184>)
 8002d76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3740      	adds	r7, #64	@ 0x40
 8002d80:	46bd      	mov	sp, r7
 8002d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	00f42400 	.word	0x00f42400
 8002d90:	017d7840 	.word	0x017d7840

08002d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d98:	4b03      	ldr	r3, [pc, #12]	@ (8002da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	20000000 	.word	0x20000000

08002dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002db0:	f7ff fff0 	bl	8002d94 <HAL_RCC_GetHCLKFreq>
 8002db4:	4602      	mov	r2, r0
 8002db6:	4b05      	ldr	r3, [pc, #20]	@ (8002dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	0a9b      	lsrs	r3, r3, #10
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	4903      	ldr	r1, [pc, #12]	@ (8002dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dc2:	5ccb      	ldrb	r3, [r1, r3]
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	08005b70 	.word	0x08005b70

08002dd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e041      	b.n	8002e6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fe fab6 	bl	800136c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	4619      	mov	r1, r3
 8002e12:	4610      	mov	r0, r2
 8002e14:	f000 f950 	bl	80030b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d020      	beq.n	8002ed6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01b      	beq.n	8002ed6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f06f 0202 	mvn.w	r2, #2
 8002ea6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f8dc 	bl	800307a <HAL_TIM_IC_CaptureCallback>
 8002ec2:	e005      	b.n	8002ed0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f8ce 	bl	8003066 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f8df 	bl	800308e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d020      	beq.n	8002f22 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01b      	beq.n	8002f22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f06f 0204 	mvn.w	r2, #4
 8002ef2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f8b6 	bl	800307a <HAL_TIM_IC_CaptureCallback>
 8002f0e:	e005      	b.n	8002f1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f8a8 	bl	8003066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f8b9 	bl	800308e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d020      	beq.n	8002f6e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01b      	beq.n	8002f6e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f06f 0208 	mvn.w	r2, #8
 8002f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2204      	movs	r2, #4
 8002f44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f890 	bl	800307a <HAL_TIM_IC_CaptureCallback>
 8002f5a:	e005      	b.n	8002f68 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f882 	bl	8003066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f893 	bl	800308e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d020      	beq.n	8002fba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d01b      	beq.n	8002fba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f06f 0210 	mvn.w	r2, #16
 8002f8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2208      	movs	r2, #8
 8002f90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f86a 	bl	800307a <HAL_TIM_IC_CaptureCallback>
 8002fa6:	e005      	b.n	8002fb4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f85c 	bl	8003066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f86d 	bl	800308e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00c      	beq.n	8002fde <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d007      	beq.n	8002fde <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f06f 0201 	mvn.w	r2, #1
 8002fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f83a 	bl	8003052 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00c      	beq.n	8003002 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d007      	beq.n	8003002 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f8f1 	bl	80031e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00c      	beq.n	8003026 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003012:	2b00      	cmp	r3, #0
 8003014:	d007      	beq.n	8003026 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800301e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f83e 	bl	80030a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00c      	beq.n	800304a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	d007      	beq.n	800304a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f06f 0220 	mvn.w	r2, #32
 8003042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f8c3 	bl	80031d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a3a      	ldr	r2, [pc, #232]	@ (80031b4 <TIM_Base_SetConfig+0xfc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00f      	beq.n	80030f0 <TIM_Base_SetConfig+0x38>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d6:	d00b      	beq.n	80030f0 <TIM_Base_SetConfig+0x38>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a37      	ldr	r2, [pc, #220]	@ (80031b8 <TIM_Base_SetConfig+0x100>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d007      	beq.n	80030f0 <TIM_Base_SetConfig+0x38>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a36      	ldr	r2, [pc, #216]	@ (80031bc <TIM_Base_SetConfig+0x104>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d003      	beq.n	80030f0 <TIM_Base_SetConfig+0x38>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a35      	ldr	r2, [pc, #212]	@ (80031c0 <TIM_Base_SetConfig+0x108>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d108      	bne.n	8003102 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a2b      	ldr	r2, [pc, #172]	@ (80031b4 <TIM_Base_SetConfig+0xfc>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d01b      	beq.n	8003142 <TIM_Base_SetConfig+0x8a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003110:	d017      	beq.n	8003142 <TIM_Base_SetConfig+0x8a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a28      	ldr	r2, [pc, #160]	@ (80031b8 <TIM_Base_SetConfig+0x100>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d013      	beq.n	8003142 <TIM_Base_SetConfig+0x8a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a27      	ldr	r2, [pc, #156]	@ (80031bc <TIM_Base_SetConfig+0x104>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00f      	beq.n	8003142 <TIM_Base_SetConfig+0x8a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a26      	ldr	r2, [pc, #152]	@ (80031c0 <TIM_Base_SetConfig+0x108>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00b      	beq.n	8003142 <TIM_Base_SetConfig+0x8a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a25      	ldr	r2, [pc, #148]	@ (80031c4 <TIM_Base_SetConfig+0x10c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d007      	beq.n	8003142 <TIM_Base_SetConfig+0x8a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a24      	ldr	r2, [pc, #144]	@ (80031c8 <TIM_Base_SetConfig+0x110>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d003      	beq.n	8003142 <TIM_Base_SetConfig+0x8a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a23      	ldr	r2, [pc, #140]	@ (80031cc <TIM_Base_SetConfig+0x114>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d108      	bne.n	8003154 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	4313      	orrs	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a0e      	ldr	r2, [pc, #56]	@ (80031b4 <TIM_Base_SetConfig+0xfc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d103      	bne.n	8003188 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b01      	cmp	r3, #1
 8003198:	d105      	bne.n	80031a6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f023 0201 	bic.w	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	611a      	str	r2, [r3, #16]
  }
}
 80031a6:	bf00      	nop
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40010000 	.word	0x40010000
 80031b8:	40000400 	.word	0x40000400
 80031bc:	40000800 	.word	0x40000800
 80031c0:	40000c00 	.word	0x40000c00
 80031c4:	40014000 	.word	0x40014000
 80031c8:	40014400 	.word	0x40014400
 80031cc:	40014800 	.word	0x40014800

080031d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <app_init>:
volatile float pression;
bool begin = false;
bool flag = true;

void app_init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80031fc:	4804      	ldr	r0, [pc, #16]	@ (8003210 <app_init+0x18>)
 80031fe:	f7fe facf 	bl	80017a0 <HAL_ADC_Start>
	stopMotor();
 8003202:	f000 f807 	bl	8003214 <stopMotor>
	valveDeactivate();
 8003206:	f000 f815 	bl	8003234 <valveDeactivate>
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	200001f0 	.word	0x200001f0

08003214 <stopMotor>:
	HAL_GPIO_WritePin(GPIOA, 8, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA, 9, GPIO_PIN_RESET);
}

void stopMotor(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, 8, GPIO_PIN_RESET);
 8003218:	2200      	movs	r2, #0
 800321a:	2108      	movs	r1, #8
 800321c:	4804      	ldr	r0, [pc, #16]	@ (8003230 <stopMotor+0x1c>)
 800321e:	f7ff f837 	bl	8002290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, 9, GPIO_PIN_RESET);
 8003222:	2200      	movs	r2, #0
 8003224:	2109      	movs	r1, #9
 8003226:	4802      	ldr	r0, [pc, #8]	@ (8003230 <stopMotor+0x1c>)
 8003228:	f7ff f832 	bl	8002290 <HAL_GPIO_WritePin>
}
 800322c:	bf00      	nop
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40020000 	.word	0x40020000

08003234 <valveDeactivate>:
{
	HAL_GPIO_WritePin(GPIOB, 15, GPIO_PIN_SET);
}

void valveDeactivate(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, 15, GPIO_PIN_RESET);
 8003238:	2200      	movs	r2, #0
 800323a:	210f      	movs	r1, #15
 800323c:	4802      	ldr	r0, [pc, #8]	@ (8003248 <valveDeactivate+0x14>)
 800323e:	f7ff f827 	bl	8002290 <HAL_GPIO_WritePin>

}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40020400 	.word	0x40020400

0800324c <__cvt>:
 800324c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003250:	ec57 6b10 	vmov	r6, r7, d0
 8003254:	2f00      	cmp	r7, #0
 8003256:	460c      	mov	r4, r1
 8003258:	4619      	mov	r1, r3
 800325a:	463b      	mov	r3, r7
 800325c:	bfbb      	ittet	lt
 800325e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003262:	461f      	movlt	r7, r3
 8003264:	2300      	movge	r3, #0
 8003266:	232d      	movlt	r3, #45	@ 0x2d
 8003268:	700b      	strb	r3, [r1, #0]
 800326a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800326c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003270:	4691      	mov	r9, r2
 8003272:	f023 0820 	bic.w	r8, r3, #32
 8003276:	bfbc      	itt	lt
 8003278:	4632      	movlt	r2, r6
 800327a:	4616      	movlt	r6, r2
 800327c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003280:	d005      	beq.n	800328e <__cvt+0x42>
 8003282:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003286:	d100      	bne.n	800328a <__cvt+0x3e>
 8003288:	3401      	adds	r4, #1
 800328a:	2102      	movs	r1, #2
 800328c:	e000      	b.n	8003290 <__cvt+0x44>
 800328e:	2103      	movs	r1, #3
 8003290:	ab03      	add	r3, sp, #12
 8003292:	9301      	str	r3, [sp, #4]
 8003294:	ab02      	add	r3, sp, #8
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	ec47 6b10 	vmov	d0, r6, r7
 800329c:	4653      	mov	r3, sl
 800329e:	4622      	mov	r2, r4
 80032a0:	f000 fe3a 	bl	8003f18 <_dtoa_r>
 80032a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80032a8:	4605      	mov	r5, r0
 80032aa:	d119      	bne.n	80032e0 <__cvt+0x94>
 80032ac:	f019 0f01 	tst.w	r9, #1
 80032b0:	d00e      	beq.n	80032d0 <__cvt+0x84>
 80032b2:	eb00 0904 	add.w	r9, r0, r4
 80032b6:	2200      	movs	r2, #0
 80032b8:	2300      	movs	r3, #0
 80032ba:	4630      	mov	r0, r6
 80032bc:	4639      	mov	r1, r7
 80032be:	f7fd fc0b 	bl	8000ad8 <__aeabi_dcmpeq>
 80032c2:	b108      	cbz	r0, 80032c8 <__cvt+0x7c>
 80032c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80032c8:	2230      	movs	r2, #48	@ 0x30
 80032ca:	9b03      	ldr	r3, [sp, #12]
 80032cc:	454b      	cmp	r3, r9
 80032ce:	d31e      	bcc.n	800330e <__cvt+0xc2>
 80032d0:	9b03      	ldr	r3, [sp, #12]
 80032d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80032d4:	1b5b      	subs	r3, r3, r5
 80032d6:	4628      	mov	r0, r5
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	b004      	add	sp, #16
 80032dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80032e4:	eb00 0904 	add.w	r9, r0, r4
 80032e8:	d1e5      	bne.n	80032b6 <__cvt+0x6a>
 80032ea:	7803      	ldrb	r3, [r0, #0]
 80032ec:	2b30      	cmp	r3, #48	@ 0x30
 80032ee:	d10a      	bne.n	8003306 <__cvt+0xba>
 80032f0:	2200      	movs	r2, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	4630      	mov	r0, r6
 80032f6:	4639      	mov	r1, r7
 80032f8:	f7fd fbee 	bl	8000ad8 <__aeabi_dcmpeq>
 80032fc:	b918      	cbnz	r0, 8003306 <__cvt+0xba>
 80032fe:	f1c4 0401 	rsb	r4, r4, #1
 8003302:	f8ca 4000 	str.w	r4, [sl]
 8003306:	f8da 3000 	ldr.w	r3, [sl]
 800330a:	4499      	add	r9, r3
 800330c:	e7d3      	b.n	80032b6 <__cvt+0x6a>
 800330e:	1c59      	adds	r1, r3, #1
 8003310:	9103      	str	r1, [sp, #12]
 8003312:	701a      	strb	r2, [r3, #0]
 8003314:	e7d9      	b.n	80032ca <__cvt+0x7e>

08003316 <__exponent>:
 8003316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003318:	2900      	cmp	r1, #0
 800331a:	bfba      	itte	lt
 800331c:	4249      	neglt	r1, r1
 800331e:	232d      	movlt	r3, #45	@ 0x2d
 8003320:	232b      	movge	r3, #43	@ 0x2b
 8003322:	2909      	cmp	r1, #9
 8003324:	7002      	strb	r2, [r0, #0]
 8003326:	7043      	strb	r3, [r0, #1]
 8003328:	dd29      	ble.n	800337e <__exponent+0x68>
 800332a:	f10d 0307 	add.w	r3, sp, #7
 800332e:	461d      	mov	r5, r3
 8003330:	270a      	movs	r7, #10
 8003332:	461a      	mov	r2, r3
 8003334:	fbb1 f6f7 	udiv	r6, r1, r7
 8003338:	fb07 1416 	mls	r4, r7, r6, r1
 800333c:	3430      	adds	r4, #48	@ 0x30
 800333e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003342:	460c      	mov	r4, r1
 8003344:	2c63      	cmp	r4, #99	@ 0x63
 8003346:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800334a:	4631      	mov	r1, r6
 800334c:	dcf1      	bgt.n	8003332 <__exponent+0x1c>
 800334e:	3130      	adds	r1, #48	@ 0x30
 8003350:	1e94      	subs	r4, r2, #2
 8003352:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003356:	1c41      	adds	r1, r0, #1
 8003358:	4623      	mov	r3, r4
 800335a:	42ab      	cmp	r3, r5
 800335c:	d30a      	bcc.n	8003374 <__exponent+0x5e>
 800335e:	f10d 0309 	add.w	r3, sp, #9
 8003362:	1a9b      	subs	r3, r3, r2
 8003364:	42ac      	cmp	r4, r5
 8003366:	bf88      	it	hi
 8003368:	2300      	movhi	r3, #0
 800336a:	3302      	adds	r3, #2
 800336c:	4403      	add	r3, r0
 800336e:	1a18      	subs	r0, r3, r0
 8003370:	b003      	add	sp, #12
 8003372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003374:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003378:	f801 6f01 	strb.w	r6, [r1, #1]!
 800337c:	e7ed      	b.n	800335a <__exponent+0x44>
 800337e:	2330      	movs	r3, #48	@ 0x30
 8003380:	3130      	adds	r1, #48	@ 0x30
 8003382:	7083      	strb	r3, [r0, #2]
 8003384:	70c1      	strb	r1, [r0, #3]
 8003386:	1d03      	adds	r3, r0, #4
 8003388:	e7f1      	b.n	800336e <__exponent+0x58>
	...

0800338c <_printf_float>:
 800338c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003390:	b08d      	sub	sp, #52	@ 0x34
 8003392:	460c      	mov	r4, r1
 8003394:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003398:	4616      	mov	r6, r2
 800339a:	461f      	mov	r7, r3
 800339c:	4605      	mov	r5, r0
 800339e:	f000 fcbb 	bl	8003d18 <_localeconv_r>
 80033a2:	6803      	ldr	r3, [r0, #0]
 80033a4:	9304      	str	r3, [sp, #16]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fc ff6a 	bl	8000280 <strlen>
 80033ac:	2300      	movs	r3, #0
 80033ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80033b0:	f8d8 3000 	ldr.w	r3, [r8]
 80033b4:	9005      	str	r0, [sp, #20]
 80033b6:	3307      	adds	r3, #7
 80033b8:	f023 0307 	bic.w	r3, r3, #7
 80033bc:	f103 0208 	add.w	r2, r3, #8
 80033c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80033c4:	f8d4 b000 	ldr.w	fp, [r4]
 80033c8:	f8c8 2000 	str.w	r2, [r8]
 80033cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80033d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80033d4:	9307      	str	r3, [sp, #28]
 80033d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80033da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80033de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033e2:	4b9c      	ldr	r3, [pc, #624]	@ (8003654 <_printf_float+0x2c8>)
 80033e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033e8:	f7fd fba8 	bl	8000b3c <__aeabi_dcmpun>
 80033ec:	bb70      	cbnz	r0, 800344c <_printf_float+0xc0>
 80033ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033f2:	4b98      	ldr	r3, [pc, #608]	@ (8003654 <_printf_float+0x2c8>)
 80033f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033f8:	f7fd fb82 	bl	8000b00 <__aeabi_dcmple>
 80033fc:	bb30      	cbnz	r0, 800344c <_printf_float+0xc0>
 80033fe:	2200      	movs	r2, #0
 8003400:	2300      	movs	r3, #0
 8003402:	4640      	mov	r0, r8
 8003404:	4649      	mov	r1, r9
 8003406:	f7fd fb71 	bl	8000aec <__aeabi_dcmplt>
 800340a:	b110      	cbz	r0, 8003412 <_printf_float+0x86>
 800340c:	232d      	movs	r3, #45	@ 0x2d
 800340e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003412:	4a91      	ldr	r2, [pc, #580]	@ (8003658 <_printf_float+0x2cc>)
 8003414:	4b91      	ldr	r3, [pc, #580]	@ (800365c <_printf_float+0x2d0>)
 8003416:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800341a:	bf94      	ite	ls
 800341c:	4690      	movls	r8, r2
 800341e:	4698      	movhi	r8, r3
 8003420:	2303      	movs	r3, #3
 8003422:	6123      	str	r3, [r4, #16]
 8003424:	f02b 0304 	bic.w	r3, fp, #4
 8003428:	6023      	str	r3, [r4, #0]
 800342a:	f04f 0900 	mov.w	r9, #0
 800342e:	9700      	str	r7, [sp, #0]
 8003430:	4633      	mov	r3, r6
 8003432:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003434:	4621      	mov	r1, r4
 8003436:	4628      	mov	r0, r5
 8003438:	f000 f9d2 	bl	80037e0 <_printf_common>
 800343c:	3001      	adds	r0, #1
 800343e:	f040 808d 	bne.w	800355c <_printf_float+0x1d0>
 8003442:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003446:	b00d      	add	sp, #52	@ 0x34
 8003448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800344c:	4642      	mov	r2, r8
 800344e:	464b      	mov	r3, r9
 8003450:	4640      	mov	r0, r8
 8003452:	4649      	mov	r1, r9
 8003454:	f7fd fb72 	bl	8000b3c <__aeabi_dcmpun>
 8003458:	b140      	cbz	r0, 800346c <_printf_float+0xe0>
 800345a:	464b      	mov	r3, r9
 800345c:	2b00      	cmp	r3, #0
 800345e:	bfbc      	itt	lt
 8003460:	232d      	movlt	r3, #45	@ 0x2d
 8003462:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003466:	4a7e      	ldr	r2, [pc, #504]	@ (8003660 <_printf_float+0x2d4>)
 8003468:	4b7e      	ldr	r3, [pc, #504]	@ (8003664 <_printf_float+0x2d8>)
 800346a:	e7d4      	b.n	8003416 <_printf_float+0x8a>
 800346c:	6863      	ldr	r3, [r4, #4]
 800346e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003472:	9206      	str	r2, [sp, #24]
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	d13b      	bne.n	80034f0 <_printf_float+0x164>
 8003478:	2306      	movs	r3, #6
 800347a:	6063      	str	r3, [r4, #4]
 800347c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003480:	2300      	movs	r3, #0
 8003482:	6022      	str	r2, [r4, #0]
 8003484:	9303      	str	r3, [sp, #12]
 8003486:	ab0a      	add	r3, sp, #40	@ 0x28
 8003488:	e9cd a301 	strd	sl, r3, [sp, #4]
 800348c:	ab09      	add	r3, sp, #36	@ 0x24
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	6861      	ldr	r1, [r4, #4]
 8003492:	ec49 8b10 	vmov	d0, r8, r9
 8003496:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800349a:	4628      	mov	r0, r5
 800349c:	f7ff fed6 	bl	800324c <__cvt>
 80034a0:	9b06      	ldr	r3, [sp, #24]
 80034a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80034a4:	2b47      	cmp	r3, #71	@ 0x47
 80034a6:	4680      	mov	r8, r0
 80034a8:	d129      	bne.n	80034fe <_printf_float+0x172>
 80034aa:	1cc8      	adds	r0, r1, #3
 80034ac:	db02      	blt.n	80034b4 <_printf_float+0x128>
 80034ae:	6863      	ldr	r3, [r4, #4]
 80034b0:	4299      	cmp	r1, r3
 80034b2:	dd41      	ble.n	8003538 <_printf_float+0x1ac>
 80034b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80034b8:	fa5f fa8a 	uxtb.w	sl, sl
 80034bc:	3901      	subs	r1, #1
 80034be:	4652      	mov	r2, sl
 80034c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80034c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80034c6:	f7ff ff26 	bl	8003316 <__exponent>
 80034ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80034cc:	1813      	adds	r3, r2, r0
 80034ce:	2a01      	cmp	r2, #1
 80034d0:	4681      	mov	r9, r0
 80034d2:	6123      	str	r3, [r4, #16]
 80034d4:	dc02      	bgt.n	80034dc <_printf_float+0x150>
 80034d6:	6822      	ldr	r2, [r4, #0]
 80034d8:	07d2      	lsls	r2, r2, #31
 80034da:	d501      	bpl.n	80034e0 <_printf_float+0x154>
 80034dc:	3301      	adds	r3, #1
 80034de:	6123      	str	r3, [r4, #16]
 80034e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0a2      	beq.n	800342e <_printf_float+0xa2>
 80034e8:	232d      	movs	r3, #45	@ 0x2d
 80034ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034ee:	e79e      	b.n	800342e <_printf_float+0xa2>
 80034f0:	9a06      	ldr	r2, [sp, #24]
 80034f2:	2a47      	cmp	r2, #71	@ 0x47
 80034f4:	d1c2      	bne.n	800347c <_printf_float+0xf0>
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1c0      	bne.n	800347c <_printf_float+0xf0>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e7bd      	b.n	800347a <_printf_float+0xee>
 80034fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003502:	d9db      	bls.n	80034bc <_printf_float+0x130>
 8003504:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003508:	d118      	bne.n	800353c <_printf_float+0x1b0>
 800350a:	2900      	cmp	r1, #0
 800350c:	6863      	ldr	r3, [r4, #4]
 800350e:	dd0b      	ble.n	8003528 <_printf_float+0x19c>
 8003510:	6121      	str	r1, [r4, #16]
 8003512:	b913      	cbnz	r3, 800351a <_printf_float+0x18e>
 8003514:	6822      	ldr	r2, [r4, #0]
 8003516:	07d0      	lsls	r0, r2, #31
 8003518:	d502      	bpl.n	8003520 <_printf_float+0x194>
 800351a:	3301      	adds	r3, #1
 800351c:	440b      	add	r3, r1
 800351e:	6123      	str	r3, [r4, #16]
 8003520:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003522:	f04f 0900 	mov.w	r9, #0
 8003526:	e7db      	b.n	80034e0 <_printf_float+0x154>
 8003528:	b913      	cbnz	r3, 8003530 <_printf_float+0x1a4>
 800352a:	6822      	ldr	r2, [r4, #0]
 800352c:	07d2      	lsls	r2, r2, #31
 800352e:	d501      	bpl.n	8003534 <_printf_float+0x1a8>
 8003530:	3302      	adds	r3, #2
 8003532:	e7f4      	b.n	800351e <_printf_float+0x192>
 8003534:	2301      	movs	r3, #1
 8003536:	e7f2      	b.n	800351e <_printf_float+0x192>
 8003538:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800353c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800353e:	4299      	cmp	r1, r3
 8003540:	db05      	blt.n	800354e <_printf_float+0x1c2>
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	6121      	str	r1, [r4, #16]
 8003546:	07d8      	lsls	r0, r3, #31
 8003548:	d5ea      	bpl.n	8003520 <_printf_float+0x194>
 800354a:	1c4b      	adds	r3, r1, #1
 800354c:	e7e7      	b.n	800351e <_printf_float+0x192>
 800354e:	2900      	cmp	r1, #0
 8003550:	bfd4      	ite	le
 8003552:	f1c1 0202 	rsble	r2, r1, #2
 8003556:	2201      	movgt	r2, #1
 8003558:	4413      	add	r3, r2
 800355a:	e7e0      	b.n	800351e <_printf_float+0x192>
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	055a      	lsls	r2, r3, #21
 8003560:	d407      	bmi.n	8003572 <_printf_float+0x1e6>
 8003562:	6923      	ldr	r3, [r4, #16]
 8003564:	4642      	mov	r2, r8
 8003566:	4631      	mov	r1, r6
 8003568:	4628      	mov	r0, r5
 800356a:	47b8      	blx	r7
 800356c:	3001      	adds	r0, #1
 800356e:	d12b      	bne.n	80035c8 <_printf_float+0x23c>
 8003570:	e767      	b.n	8003442 <_printf_float+0xb6>
 8003572:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003576:	f240 80dd 	bls.w	8003734 <_printf_float+0x3a8>
 800357a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800357e:	2200      	movs	r2, #0
 8003580:	2300      	movs	r3, #0
 8003582:	f7fd faa9 	bl	8000ad8 <__aeabi_dcmpeq>
 8003586:	2800      	cmp	r0, #0
 8003588:	d033      	beq.n	80035f2 <_printf_float+0x266>
 800358a:	4a37      	ldr	r2, [pc, #220]	@ (8003668 <_printf_float+0x2dc>)
 800358c:	2301      	movs	r3, #1
 800358e:	4631      	mov	r1, r6
 8003590:	4628      	mov	r0, r5
 8003592:	47b8      	blx	r7
 8003594:	3001      	adds	r0, #1
 8003596:	f43f af54 	beq.w	8003442 <_printf_float+0xb6>
 800359a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800359e:	4543      	cmp	r3, r8
 80035a0:	db02      	blt.n	80035a8 <_printf_float+0x21c>
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	07d8      	lsls	r0, r3, #31
 80035a6:	d50f      	bpl.n	80035c8 <_printf_float+0x23c>
 80035a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80035ac:	4631      	mov	r1, r6
 80035ae:	4628      	mov	r0, r5
 80035b0:	47b8      	blx	r7
 80035b2:	3001      	adds	r0, #1
 80035b4:	f43f af45 	beq.w	8003442 <_printf_float+0xb6>
 80035b8:	f04f 0900 	mov.w	r9, #0
 80035bc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80035c0:	f104 0a1a 	add.w	sl, r4, #26
 80035c4:	45c8      	cmp	r8, r9
 80035c6:	dc09      	bgt.n	80035dc <_printf_float+0x250>
 80035c8:	6823      	ldr	r3, [r4, #0]
 80035ca:	079b      	lsls	r3, r3, #30
 80035cc:	f100 8103 	bmi.w	80037d6 <_printf_float+0x44a>
 80035d0:	68e0      	ldr	r0, [r4, #12]
 80035d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80035d4:	4298      	cmp	r0, r3
 80035d6:	bfb8      	it	lt
 80035d8:	4618      	movlt	r0, r3
 80035da:	e734      	b.n	8003446 <_printf_float+0xba>
 80035dc:	2301      	movs	r3, #1
 80035de:	4652      	mov	r2, sl
 80035e0:	4631      	mov	r1, r6
 80035e2:	4628      	mov	r0, r5
 80035e4:	47b8      	blx	r7
 80035e6:	3001      	adds	r0, #1
 80035e8:	f43f af2b 	beq.w	8003442 <_printf_float+0xb6>
 80035ec:	f109 0901 	add.w	r9, r9, #1
 80035f0:	e7e8      	b.n	80035c4 <_printf_float+0x238>
 80035f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	dc39      	bgt.n	800366c <_printf_float+0x2e0>
 80035f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003668 <_printf_float+0x2dc>)
 80035fa:	2301      	movs	r3, #1
 80035fc:	4631      	mov	r1, r6
 80035fe:	4628      	mov	r0, r5
 8003600:	47b8      	blx	r7
 8003602:	3001      	adds	r0, #1
 8003604:	f43f af1d 	beq.w	8003442 <_printf_float+0xb6>
 8003608:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800360c:	ea59 0303 	orrs.w	r3, r9, r3
 8003610:	d102      	bne.n	8003618 <_printf_float+0x28c>
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	07d9      	lsls	r1, r3, #31
 8003616:	d5d7      	bpl.n	80035c8 <_printf_float+0x23c>
 8003618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800361c:	4631      	mov	r1, r6
 800361e:	4628      	mov	r0, r5
 8003620:	47b8      	blx	r7
 8003622:	3001      	adds	r0, #1
 8003624:	f43f af0d 	beq.w	8003442 <_printf_float+0xb6>
 8003628:	f04f 0a00 	mov.w	sl, #0
 800362c:	f104 0b1a 	add.w	fp, r4, #26
 8003630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003632:	425b      	negs	r3, r3
 8003634:	4553      	cmp	r3, sl
 8003636:	dc01      	bgt.n	800363c <_printf_float+0x2b0>
 8003638:	464b      	mov	r3, r9
 800363a:	e793      	b.n	8003564 <_printf_float+0x1d8>
 800363c:	2301      	movs	r3, #1
 800363e:	465a      	mov	r2, fp
 8003640:	4631      	mov	r1, r6
 8003642:	4628      	mov	r0, r5
 8003644:	47b8      	blx	r7
 8003646:	3001      	adds	r0, #1
 8003648:	f43f aefb 	beq.w	8003442 <_printf_float+0xb6>
 800364c:	f10a 0a01 	add.w	sl, sl, #1
 8003650:	e7ee      	b.n	8003630 <_printf_float+0x2a4>
 8003652:	bf00      	nop
 8003654:	7fefffff 	.word	0x7fefffff
 8003658:	08005b78 	.word	0x08005b78
 800365c:	08005b7c 	.word	0x08005b7c
 8003660:	08005b80 	.word	0x08005b80
 8003664:	08005b84 	.word	0x08005b84
 8003668:	08005b88 	.word	0x08005b88
 800366c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800366e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003672:	4553      	cmp	r3, sl
 8003674:	bfa8      	it	ge
 8003676:	4653      	movge	r3, sl
 8003678:	2b00      	cmp	r3, #0
 800367a:	4699      	mov	r9, r3
 800367c:	dc36      	bgt.n	80036ec <_printf_float+0x360>
 800367e:	f04f 0b00 	mov.w	fp, #0
 8003682:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003686:	f104 021a 	add.w	r2, r4, #26
 800368a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800368c:	9306      	str	r3, [sp, #24]
 800368e:	eba3 0309 	sub.w	r3, r3, r9
 8003692:	455b      	cmp	r3, fp
 8003694:	dc31      	bgt.n	80036fa <_printf_float+0x36e>
 8003696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003698:	459a      	cmp	sl, r3
 800369a:	dc3a      	bgt.n	8003712 <_printf_float+0x386>
 800369c:	6823      	ldr	r3, [r4, #0]
 800369e:	07da      	lsls	r2, r3, #31
 80036a0:	d437      	bmi.n	8003712 <_printf_float+0x386>
 80036a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036a4:	ebaa 0903 	sub.w	r9, sl, r3
 80036a8:	9b06      	ldr	r3, [sp, #24]
 80036aa:	ebaa 0303 	sub.w	r3, sl, r3
 80036ae:	4599      	cmp	r9, r3
 80036b0:	bfa8      	it	ge
 80036b2:	4699      	movge	r9, r3
 80036b4:	f1b9 0f00 	cmp.w	r9, #0
 80036b8:	dc33      	bgt.n	8003722 <_printf_float+0x396>
 80036ba:	f04f 0800 	mov.w	r8, #0
 80036be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036c2:	f104 0b1a 	add.w	fp, r4, #26
 80036c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036c8:	ebaa 0303 	sub.w	r3, sl, r3
 80036cc:	eba3 0309 	sub.w	r3, r3, r9
 80036d0:	4543      	cmp	r3, r8
 80036d2:	f77f af79 	ble.w	80035c8 <_printf_float+0x23c>
 80036d6:	2301      	movs	r3, #1
 80036d8:	465a      	mov	r2, fp
 80036da:	4631      	mov	r1, r6
 80036dc:	4628      	mov	r0, r5
 80036de:	47b8      	blx	r7
 80036e0:	3001      	adds	r0, #1
 80036e2:	f43f aeae 	beq.w	8003442 <_printf_float+0xb6>
 80036e6:	f108 0801 	add.w	r8, r8, #1
 80036ea:	e7ec      	b.n	80036c6 <_printf_float+0x33a>
 80036ec:	4642      	mov	r2, r8
 80036ee:	4631      	mov	r1, r6
 80036f0:	4628      	mov	r0, r5
 80036f2:	47b8      	blx	r7
 80036f4:	3001      	adds	r0, #1
 80036f6:	d1c2      	bne.n	800367e <_printf_float+0x2f2>
 80036f8:	e6a3      	b.n	8003442 <_printf_float+0xb6>
 80036fa:	2301      	movs	r3, #1
 80036fc:	4631      	mov	r1, r6
 80036fe:	4628      	mov	r0, r5
 8003700:	9206      	str	r2, [sp, #24]
 8003702:	47b8      	blx	r7
 8003704:	3001      	adds	r0, #1
 8003706:	f43f ae9c 	beq.w	8003442 <_printf_float+0xb6>
 800370a:	9a06      	ldr	r2, [sp, #24]
 800370c:	f10b 0b01 	add.w	fp, fp, #1
 8003710:	e7bb      	b.n	800368a <_printf_float+0x2fe>
 8003712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003716:	4631      	mov	r1, r6
 8003718:	4628      	mov	r0, r5
 800371a:	47b8      	blx	r7
 800371c:	3001      	adds	r0, #1
 800371e:	d1c0      	bne.n	80036a2 <_printf_float+0x316>
 8003720:	e68f      	b.n	8003442 <_printf_float+0xb6>
 8003722:	9a06      	ldr	r2, [sp, #24]
 8003724:	464b      	mov	r3, r9
 8003726:	4442      	add	r2, r8
 8003728:	4631      	mov	r1, r6
 800372a:	4628      	mov	r0, r5
 800372c:	47b8      	blx	r7
 800372e:	3001      	adds	r0, #1
 8003730:	d1c3      	bne.n	80036ba <_printf_float+0x32e>
 8003732:	e686      	b.n	8003442 <_printf_float+0xb6>
 8003734:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003738:	f1ba 0f01 	cmp.w	sl, #1
 800373c:	dc01      	bgt.n	8003742 <_printf_float+0x3b6>
 800373e:	07db      	lsls	r3, r3, #31
 8003740:	d536      	bpl.n	80037b0 <_printf_float+0x424>
 8003742:	2301      	movs	r3, #1
 8003744:	4642      	mov	r2, r8
 8003746:	4631      	mov	r1, r6
 8003748:	4628      	mov	r0, r5
 800374a:	47b8      	blx	r7
 800374c:	3001      	adds	r0, #1
 800374e:	f43f ae78 	beq.w	8003442 <_printf_float+0xb6>
 8003752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003756:	4631      	mov	r1, r6
 8003758:	4628      	mov	r0, r5
 800375a:	47b8      	blx	r7
 800375c:	3001      	adds	r0, #1
 800375e:	f43f ae70 	beq.w	8003442 <_printf_float+0xb6>
 8003762:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003766:	2200      	movs	r2, #0
 8003768:	2300      	movs	r3, #0
 800376a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800376e:	f7fd f9b3 	bl	8000ad8 <__aeabi_dcmpeq>
 8003772:	b9c0      	cbnz	r0, 80037a6 <_printf_float+0x41a>
 8003774:	4653      	mov	r3, sl
 8003776:	f108 0201 	add.w	r2, r8, #1
 800377a:	4631      	mov	r1, r6
 800377c:	4628      	mov	r0, r5
 800377e:	47b8      	blx	r7
 8003780:	3001      	adds	r0, #1
 8003782:	d10c      	bne.n	800379e <_printf_float+0x412>
 8003784:	e65d      	b.n	8003442 <_printf_float+0xb6>
 8003786:	2301      	movs	r3, #1
 8003788:	465a      	mov	r2, fp
 800378a:	4631      	mov	r1, r6
 800378c:	4628      	mov	r0, r5
 800378e:	47b8      	blx	r7
 8003790:	3001      	adds	r0, #1
 8003792:	f43f ae56 	beq.w	8003442 <_printf_float+0xb6>
 8003796:	f108 0801 	add.w	r8, r8, #1
 800379a:	45d0      	cmp	r8, sl
 800379c:	dbf3      	blt.n	8003786 <_printf_float+0x3fa>
 800379e:	464b      	mov	r3, r9
 80037a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80037a4:	e6df      	b.n	8003566 <_printf_float+0x1da>
 80037a6:	f04f 0800 	mov.w	r8, #0
 80037aa:	f104 0b1a 	add.w	fp, r4, #26
 80037ae:	e7f4      	b.n	800379a <_printf_float+0x40e>
 80037b0:	2301      	movs	r3, #1
 80037b2:	4642      	mov	r2, r8
 80037b4:	e7e1      	b.n	800377a <_printf_float+0x3ee>
 80037b6:	2301      	movs	r3, #1
 80037b8:	464a      	mov	r2, r9
 80037ba:	4631      	mov	r1, r6
 80037bc:	4628      	mov	r0, r5
 80037be:	47b8      	blx	r7
 80037c0:	3001      	adds	r0, #1
 80037c2:	f43f ae3e 	beq.w	8003442 <_printf_float+0xb6>
 80037c6:	f108 0801 	add.w	r8, r8, #1
 80037ca:	68e3      	ldr	r3, [r4, #12]
 80037cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80037ce:	1a5b      	subs	r3, r3, r1
 80037d0:	4543      	cmp	r3, r8
 80037d2:	dcf0      	bgt.n	80037b6 <_printf_float+0x42a>
 80037d4:	e6fc      	b.n	80035d0 <_printf_float+0x244>
 80037d6:	f04f 0800 	mov.w	r8, #0
 80037da:	f104 0919 	add.w	r9, r4, #25
 80037de:	e7f4      	b.n	80037ca <_printf_float+0x43e>

080037e0 <_printf_common>:
 80037e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037e4:	4616      	mov	r6, r2
 80037e6:	4698      	mov	r8, r3
 80037e8:	688a      	ldr	r2, [r1, #8]
 80037ea:	690b      	ldr	r3, [r1, #16]
 80037ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80037f0:	4293      	cmp	r3, r2
 80037f2:	bfb8      	it	lt
 80037f4:	4613      	movlt	r3, r2
 80037f6:	6033      	str	r3, [r6, #0]
 80037f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80037fc:	4607      	mov	r7, r0
 80037fe:	460c      	mov	r4, r1
 8003800:	b10a      	cbz	r2, 8003806 <_printf_common+0x26>
 8003802:	3301      	adds	r3, #1
 8003804:	6033      	str	r3, [r6, #0]
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	0699      	lsls	r1, r3, #26
 800380a:	bf42      	ittt	mi
 800380c:	6833      	ldrmi	r3, [r6, #0]
 800380e:	3302      	addmi	r3, #2
 8003810:	6033      	strmi	r3, [r6, #0]
 8003812:	6825      	ldr	r5, [r4, #0]
 8003814:	f015 0506 	ands.w	r5, r5, #6
 8003818:	d106      	bne.n	8003828 <_printf_common+0x48>
 800381a:	f104 0a19 	add.w	sl, r4, #25
 800381e:	68e3      	ldr	r3, [r4, #12]
 8003820:	6832      	ldr	r2, [r6, #0]
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	42ab      	cmp	r3, r5
 8003826:	dc26      	bgt.n	8003876 <_printf_common+0x96>
 8003828:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800382c:	6822      	ldr	r2, [r4, #0]
 800382e:	3b00      	subs	r3, #0
 8003830:	bf18      	it	ne
 8003832:	2301      	movne	r3, #1
 8003834:	0692      	lsls	r2, r2, #26
 8003836:	d42b      	bmi.n	8003890 <_printf_common+0xb0>
 8003838:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800383c:	4641      	mov	r1, r8
 800383e:	4638      	mov	r0, r7
 8003840:	47c8      	blx	r9
 8003842:	3001      	adds	r0, #1
 8003844:	d01e      	beq.n	8003884 <_printf_common+0xa4>
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	6922      	ldr	r2, [r4, #16]
 800384a:	f003 0306 	and.w	r3, r3, #6
 800384e:	2b04      	cmp	r3, #4
 8003850:	bf02      	ittt	eq
 8003852:	68e5      	ldreq	r5, [r4, #12]
 8003854:	6833      	ldreq	r3, [r6, #0]
 8003856:	1aed      	subeq	r5, r5, r3
 8003858:	68a3      	ldr	r3, [r4, #8]
 800385a:	bf0c      	ite	eq
 800385c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003860:	2500      	movne	r5, #0
 8003862:	4293      	cmp	r3, r2
 8003864:	bfc4      	itt	gt
 8003866:	1a9b      	subgt	r3, r3, r2
 8003868:	18ed      	addgt	r5, r5, r3
 800386a:	2600      	movs	r6, #0
 800386c:	341a      	adds	r4, #26
 800386e:	42b5      	cmp	r5, r6
 8003870:	d11a      	bne.n	80038a8 <_printf_common+0xc8>
 8003872:	2000      	movs	r0, #0
 8003874:	e008      	b.n	8003888 <_printf_common+0xa8>
 8003876:	2301      	movs	r3, #1
 8003878:	4652      	mov	r2, sl
 800387a:	4641      	mov	r1, r8
 800387c:	4638      	mov	r0, r7
 800387e:	47c8      	blx	r9
 8003880:	3001      	adds	r0, #1
 8003882:	d103      	bne.n	800388c <_printf_common+0xac>
 8003884:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800388c:	3501      	adds	r5, #1
 800388e:	e7c6      	b.n	800381e <_printf_common+0x3e>
 8003890:	18e1      	adds	r1, r4, r3
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	2030      	movs	r0, #48	@ 0x30
 8003896:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800389a:	4422      	add	r2, r4
 800389c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038a4:	3302      	adds	r3, #2
 80038a6:	e7c7      	b.n	8003838 <_printf_common+0x58>
 80038a8:	2301      	movs	r3, #1
 80038aa:	4622      	mov	r2, r4
 80038ac:	4641      	mov	r1, r8
 80038ae:	4638      	mov	r0, r7
 80038b0:	47c8      	blx	r9
 80038b2:	3001      	adds	r0, #1
 80038b4:	d0e6      	beq.n	8003884 <_printf_common+0xa4>
 80038b6:	3601      	adds	r6, #1
 80038b8:	e7d9      	b.n	800386e <_printf_common+0x8e>
	...

080038bc <_printf_i>:
 80038bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038c0:	7e0f      	ldrb	r7, [r1, #24]
 80038c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80038c4:	2f78      	cmp	r7, #120	@ 0x78
 80038c6:	4691      	mov	r9, r2
 80038c8:	4680      	mov	r8, r0
 80038ca:	460c      	mov	r4, r1
 80038cc:	469a      	mov	sl, r3
 80038ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80038d2:	d807      	bhi.n	80038e4 <_printf_i+0x28>
 80038d4:	2f62      	cmp	r7, #98	@ 0x62
 80038d6:	d80a      	bhi.n	80038ee <_printf_i+0x32>
 80038d8:	2f00      	cmp	r7, #0
 80038da:	f000 80d2 	beq.w	8003a82 <_printf_i+0x1c6>
 80038de:	2f58      	cmp	r7, #88	@ 0x58
 80038e0:	f000 80b9 	beq.w	8003a56 <_printf_i+0x19a>
 80038e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80038ec:	e03a      	b.n	8003964 <_printf_i+0xa8>
 80038ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80038f2:	2b15      	cmp	r3, #21
 80038f4:	d8f6      	bhi.n	80038e4 <_printf_i+0x28>
 80038f6:	a101      	add	r1, pc, #4	@ (adr r1, 80038fc <_printf_i+0x40>)
 80038f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038fc:	08003955 	.word	0x08003955
 8003900:	08003969 	.word	0x08003969
 8003904:	080038e5 	.word	0x080038e5
 8003908:	080038e5 	.word	0x080038e5
 800390c:	080038e5 	.word	0x080038e5
 8003910:	080038e5 	.word	0x080038e5
 8003914:	08003969 	.word	0x08003969
 8003918:	080038e5 	.word	0x080038e5
 800391c:	080038e5 	.word	0x080038e5
 8003920:	080038e5 	.word	0x080038e5
 8003924:	080038e5 	.word	0x080038e5
 8003928:	08003a69 	.word	0x08003a69
 800392c:	08003993 	.word	0x08003993
 8003930:	08003a23 	.word	0x08003a23
 8003934:	080038e5 	.word	0x080038e5
 8003938:	080038e5 	.word	0x080038e5
 800393c:	08003a8b 	.word	0x08003a8b
 8003940:	080038e5 	.word	0x080038e5
 8003944:	08003993 	.word	0x08003993
 8003948:	080038e5 	.word	0x080038e5
 800394c:	080038e5 	.word	0x080038e5
 8003950:	08003a2b 	.word	0x08003a2b
 8003954:	6833      	ldr	r3, [r6, #0]
 8003956:	1d1a      	adds	r2, r3, #4
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6032      	str	r2, [r6, #0]
 800395c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003960:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003964:	2301      	movs	r3, #1
 8003966:	e09d      	b.n	8003aa4 <_printf_i+0x1e8>
 8003968:	6833      	ldr	r3, [r6, #0]
 800396a:	6820      	ldr	r0, [r4, #0]
 800396c:	1d19      	adds	r1, r3, #4
 800396e:	6031      	str	r1, [r6, #0]
 8003970:	0606      	lsls	r6, r0, #24
 8003972:	d501      	bpl.n	8003978 <_printf_i+0xbc>
 8003974:	681d      	ldr	r5, [r3, #0]
 8003976:	e003      	b.n	8003980 <_printf_i+0xc4>
 8003978:	0645      	lsls	r5, r0, #25
 800397a:	d5fb      	bpl.n	8003974 <_printf_i+0xb8>
 800397c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003980:	2d00      	cmp	r5, #0
 8003982:	da03      	bge.n	800398c <_printf_i+0xd0>
 8003984:	232d      	movs	r3, #45	@ 0x2d
 8003986:	426d      	negs	r5, r5
 8003988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800398c:	4859      	ldr	r0, [pc, #356]	@ (8003af4 <_printf_i+0x238>)
 800398e:	230a      	movs	r3, #10
 8003990:	e011      	b.n	80039b6 <_printf_i+0xfa>
 8003992:	6821      	ldr	r1, [r4, #0]
 8003994:	6833      	ldr	r3, [r6, #0]
 8003996:	0608      	lsls	r0, r1, #24
 8003998:	f853 5b04 	ldr.w	r5, [r3], #4
 800399c:	d402      	bmi.n	80039a4 <_printf_i+0xe8>
 800399e:	0649      	lsls	r1, r1, #25
 80039a0:	bf48      	it	mi
 80039a2:	b2ad      	uxthmi	r5, r5
 80039a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80039a6:	4853      	ldr	r0, [pc, #332]	@ (8003af4 <_printf_i+0x238>)
 80039a8:	6033      	str	r3, [r6, #0]
 80039aa:	bf14      	ite	ne
 80039ac:	230a      	movne	r3, #10
 80039ae:	2308      	moveq	r3, #8
 80039b0:	2100      	movs	r1, #0
 80039b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80039b6:	6866      	ldr	r6, [r4, #4]
 80039b8:	60a6      	str	r6, [r4, #8]
 80039ba:	2e00      	cmp	r6, #0
 80039bc:	bfa2      	ittt	ge
 80039be:	6821      	ldrge	r1, [r4, #0]
 80039c0:	f021 0104 	bicge.w	r1, r1, #4
 80039c4:	6021      	strge	r1, [r4, #0]
 80039c6:	b90d      	cbnz	r5, 80039cc <_printf_i+0x110>
 80039c8:	2e00      	cmp	r6, #0
 80039ca:	d04b      	beq.n	8003a64 <_printf_i+0x1a8>
 80039cc:	4616      	mov	r6, r2
 80039ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80039d2:	fb03 5711 	mls	r7, r3, r1, r5
 80039d6:	5dc7      	ldrb	r7, [r0, r7]
 80039d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039dc:	462f      	mov	r7, r5
 80039de:	42bb      	cmp	r3, r7
 80039e0:	460d      	mov	r5, r1
 80039e2:	d9f4      	bls.n	80039ce <_printf_i+0x112>
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d10b      	bne.n	8003a00 <_printf_i+0x144>
 80039e8:	6823      	ldr	r3, [r4, #0]
 80039ea:	07df      	lsls	r7, r3, #31
 80039ec:	d508      	bpl.n	8003a00 <_printf_i+0x144>
 80039ee:	6923      	ldr	r3, [r4, #16]
 80039f0:	6861      	ldr	r1, [r4, #4]
 80039f2:	4299      	cmp	r1, r3
 80039f4:	bfde      	ittt	le
 80039f6:	2330      	movle	r3, #48	@ 0x30
 80039f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039fc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003a00:	1b92      	subs	r2, r2, r6
 8003a02:	6122      	str	r2, [r4, #16]
 8003a04:	f8cd a000 	str.w	sl, [sp]
 8003a08:	464b      	mov	r3, r9
 8003a0a:	aa03      	add	r2, sp, #12
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	4640      	mov	r0, r8
 8003a10:	f7ff fee6 	bl	80037e0 <_printf_common>
 8003a14:	3001      	adds	r0, #1
 8003a16:	d14a      	bne.n	8003aae <_printf_i+0x1f2>
 8003a18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a1c:	b004      	add	sp, #16
 8003a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	f043 0320 	orr.w	r3, r3, #32
 8003a28:	6023      	str	r3, [r4, #0]
 8003a2a:	4833      	ldr	r0, [pc, #204]	@ (8003af8 <_printf_i+0x23c>)
 8003a2c:	2778      	movs	r7, #120	@ 0x78
 8003a2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	6831      	ldr	r1, [r6, #0]
 8003a36:	061f      	lsls	r7, r3, #24
 8003a38:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a3c:	d402      	bmi.n	8003a44 <_printf_i+0x188>
 8003a3e:	065f      	lsls	r7, r3, #25
 8003a40:	bf48      	it	mi
 8003a42:	b2ad      	uxthmi	r5, r5
 8003a44:	6031      	str	r1, [r6, #0]
 8003a46:	07d9      	lsls	r1, r3, #31
 8003a48:	bf44      	itt	mi
 8003a4a:	f043 0320 	orrmi.w	r3, r3, #32
 8003a4e:	6023      	strmi	r3, [r4, #0]
 8003a50:	b11d      	cbz	r5, 8003a5a <_printf_i+0x19e>
 8003a52:	2310      	movs	r3, #16
 8003a54:	e7ac      	b.n	80039b0 <_printf_i+0xf4>
 8003a56:	4827      	ldr	r0, [pc, #156]	@ (8003af4 <_printf_i+0x238>)
 8003a58:	e7e9      	b.n	8003a2e <_printf_i+0x172>
 8003a5a:	6823      	ldr	r3, [r4, #0]
 8003a5c:	f023 0320 	bic.w	r3, r3, #32
 8003a60:	6023      	str	r3, [r4, #0]
 8003a62:	e7f6      	b.n	8003a52 <_printf_i+0x196>
 8003a64:	4616      	mov	r6, r2
 8003a66:	e7bd      	b.n	80039e4 <_printf_i+0x128>
 8003a68:	6833      	ldr	r3, [r6, #0]
 8003a6a:	6825      	ldr	r5, [r4, #0]
 8003a6c:	6961      	ldr	r1, [r4, #20]
 8003a6e:	1d18      	adds	r0, r3, #4
 8003a70:	6030      	str	r0, [r6, #0]
 8003a72:	062e      	lsls	r6, r5, #24
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	d501      	bpl.n	8003a7c <_printf_i+0x1c0>
 8003a78:	6019      	str	r1, [r3, #0]
 8003a7a:	e002      	b.n	8003a82 <_printf_i+0x1c6>
 8003a7c:	0668      	lsls	r0, r5, #25
 8003a7e:	d5fb      	bpl.n	8003a78 <_printf_i+0x1bc>
 8003a80:	8019      	strh	r1, [r3, #0]
 8003a82:	2300      	movs	r3, #0
 8003a84:	6123      	str	r3, [r4, #16]
 8003a86:	4616      	mov	r6, r2
 8003a88:	e7bc      	b.n	8003a04 <_printf_i+0x148>
 8003a8a:	6833      	ldr	r3, [r6, #0]
 8003a8c:	1d1a      	adds	r2, r3, #4
 8003a8e:	6032      	str	r2, [r6, #0]
 8003a90:	681e      	ldr	r6, [r3, #0]
 8003a92:	6862      	ldr	r2, [r4, #4]
 8003a94:	2100      	movs	r1, #0
 8003a96:	4630      	mov	r0, r6
 8003a98:	f7fc fba2 	bl	80001e0 <memchr>
 8003a9c:	b108      	cbz	r0, 8003aa2 <_printf_i+0x1e6>
 8003a9e:	1b80      	subs	r0, r0, r6
 8003aa0:	6060      	str	r0, [r4, #4]
 8003aa2:	6863      	ldr	r3, [r4, #4]
 8003aa4:	6123      	str	r3, [r4, #16]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003aac:	e7aa      	b.n	8003a04 <_printf_i+0x148>
 8003aae:	6923      	ldr	r3, [r4, #16]
 8003ab0:	4632      	mov	r2, r6
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	4640      	mov	r0, r8
 8003ab6:	47d0      	blx	sl
 8003ab8:	3001      	adds	r0, #1
 8003aba:	d0ad      	beq.n	8003a18 <_printf_i+0x15c>
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	079b      	lsls	r3, r3, #30
 8003ac0:	d413      	bmi.n	8003aea <_printf_i+0x22e>
 8003ac2:	68e0      	ldr	r0, [r4, #12]
 8003ac4:	9b03      	ldr	r3, [sp, #12]
 8003ac6:	4298      	cmp	r0, r3
 8003ac8:	bfb8      	it	lt
 8003aca:	4618      	movlt	r0, r3
 8003acc:	e7a6      	b.n	8003a1c <_printf_i+0x160>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	4632      	mov	r2, r6
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	4640      	mov	r0, r8
 8003ad6:	47d0      	blx	sl
 8003ad8:	3001      	adds	r0, #1
 8003ada:	d09d      	beq.n	8003a18 <_printf_i+0x15c>
 8003adc:	3501      	adds	r5, #1
 8003ade:	68e3      	ldr	r3, [r4, #12]
 8003ae0:	9903      	ldr	r1, [sp, #12]
 8003ae2:	1a5b      	subs	r3, r3, r1
 8003ae4:	42ab      	cmp	r3, r5
 8003ae6:	dcf2      	bgt.n	8003ace <_printf_i+0x212>
 8003ae8:	e7eb      	b.n	8003ac2 <_printf_i+0x206>
 8003aea:	2500      	movs	r5, #0
 8003aec:	f104 0619 	add.w	r6, r4, #25
 8003af0:	e7f5      	b.n	8003ade <_printf_i+0x222>
 8003af2:	bf00      	nop
 8003af4:	08005b8a 	.word	0x08005b8a
 8003af8:	08005b9b 	.word	0x08005b9b

08003afc <std>:
 8003afc:	2300      	movs	r3, #0
 8003afe:	b510      	push	{r4, lr}
 8003b00:	4604      	mov	r4, r0
 8003b02:	e9c0 3300 	strd	r3, r3, [r0]
 8003b06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b0a:	6083      	str	r3, [r0, #8]
 8003b0c:	8181      	strh	r1, [r0, #12]
 8003b0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b10:	81c2      	strh	r2, [r0, #14]
 8003b12:	6183      	str	r3, [r0, #24]
 8003b14:	4619      	mov	r1, r3
 8003b16:	2208      	movs	r2, #8
 8003b18:	305c      	adds	r0, #92	@ 0x5c
 8003b1a:	f000 f8f4 	bl	8003d06 <memset>
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b54 <std+0x58>)
 8003b20:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b22:	4b0d      	ldr	r3, [pc, #52]	@ (8003b58 <std+0x5c>)
 8003b24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b26:	4b0d      	ldr	r3, [pc, #52]	@ (8003b5c <std+0x60>)
 8003b28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b60 <std+0x64>)
 8003b2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b64 <std+0x68>)
 8003b30:	6224      	str	r4, [r4, #32]
 8003b32:	429c      	cmp	r4, r3
 8003b34:	d006      	beq.n	8003b44 <std+0x48>
 8003b36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b3a:	4294      	cmp	r4, r2
 8003b3c:	d002      	beq.n	8003b44 <std+0x48>
 8003b3e:	33d0      	adds	r3, #208	@ 0xd0
 8003b40:	429c      	cmp	r4, r3
 8003b42:	d105      	bne.n	8003b50 <std+0x54>
 8003b44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b4c:	f000 b958 	b.w	8003e00 <__retarget_lock_init_recursive>
 8003b50:	bd10      	pop	{r4, pc}
 8003b52:	bf00      	nop
 8003b54:	08003c81 	.word	0x08003c81
 8003b58:	08003ca3 	.word	0x08003ca3
 8003b5c:	08003cdb 	.word	0x08003cdb
 8003b60:	08003cff 	.word	0x08003cff
 8003b64:	200002dc 	.word	0x200002dc

08003b68 <stdio_exit_handler>:
 8003b68:	4a02      	ldr	r2, [pc, #8]	@ (8003b74 <stdio_exit_handler+0xc>)
 8003b6a:	4903      	ldr	r1, [pc, #12]	@ (8003b78 <stdio_exit_handler+0x10>)
 8003b6c:	4803      	ldr	r0, [pc, #12]	@ (8003b7c <stdio_exit_handler+0x14>)
 8003b6e:	f000 b869 	b.w	8003c44 <_fwalk_sglue>
 8003b72:	bf00      	nop
 8003b74:	2000000c 	.word	0x2000000c
 8003b78:	080054ad 	.word	0x080054ad
 8003b7c:	2000001c 	.word	0x2000001c

08003b80 <cleanup_stdio>:
 8003b80:	6841      	ldr	r1, [r0, #4]
 8003b82:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb4 <cleanup_stdio+0x34>)
 8003b84:	4299      	cmp	r1, r3
 8003b86:	b510      	push	{r4, lr}
 8003b88:	4604      	mov	r4, r0
 8003b8a:	d001      	beq.n	8003b90 <cleanup_stdio+0x10>
 8003b8c:	f001 fc8e 	bl	80054ac <_fflush_r>
 8003b90:	68a1      	ldr	r1, [r4, #8]
 8003b92:	4b09      	ldr	r3, [pc, #36]	@ (8003bb8 <cleanup_stdio+0x38>)
 8003b94:	4299      	cmp	r1, r3
 8003b96:	d002      	beq.n	8003b9e <cleanup_stdio+0x1e>
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f001 fc87 	bl	80054ac <_fflush_r>
 8003b9e:	68e1      	ldr	r1, [r4, #12]
 8003ba0:	4b06      	ldr	r3, [pc, #24]	@ (8003bbc <cleanup_stdio+0x3c>)
 8003ba2:	4299      	cmp	r1, r3
 8003ba4:	d004      	beq.n	8003bb0 <cleanup_stdio+0x30>
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bac:	f001 bc7e 	b.w	80054ac <_fflush_r>
 8003bb0:	bd10      	pop	{r4, pc}
 8003bb2:	bf00      	nop
 8003bb4:	200002dc 	.word	0x200002dc
 8003bb8:	20000344 	.word	0x20000344
 8003bbc:	200003ac 	.word	0x200003ac

08003bc0 <global_stdio_init.part.0>:
 8003bc0:	b510      	push	{r4, lr}
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <global_stdio_init.part.0+0x30>)
 8003bc4:	4c0b      	ldr	r4, [pc, #44]	@ (8003bf4 <global_stdio_init.part.0+0x34>)
 8003bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8003bf8 <global_stdio_init.part.0+0x38>)
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	4620      	mov	r0, r4
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2104      	movs	r1, #4
 8003bd0:	f7ff ff94 	bl	8003afc <std>
 8003bd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003bd8:	2201      	movs	r2, #1
 8003bda:	2109      	movs	r1, #9
 8003bdc:	f7ff ff8e 	bl	8003afc <std>
 8003be0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003be4:	2202      	movs	r2, #2
 8003be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bea:	2112      	movs	r1, #18
 8003bec:	f7ff bf86 	b.w	8003afc <std>
 8003bf0:	20000414 	.word	0x20000414
 8003bf4:	200002dc 	.word	0x200002dc
 8003bf8:	08003b69 	.word	0x08003b69

08003bfc <__sfp_lock_acquire>:
 8003bfc:	4801      	ldr	r0, [pc, #4]	@ (8003c04 <__sfp_lock_acquire+0x8>)
 8003bfe:	f000 b900 	b.w	8003e02 <__retarget_lock_acquire_recursive>
 8003c02:	bf00      	nop
 8003c04:	2000041d 	.word	0x2000041d

08003c08 <__sfp_lock_release>:
 8003c08:	4801      	ldr	r0, [pc, #4]	@ (8003c10 <__sfp_lock_release+0x8>)
 8003c0a:	f000 b8fb 	b.w	8003e04 <__retarget_lock_release_recursive>
 8003c0e:	bf00      	nop
 8003c10:	2000041d 	.word	0x2000041d

08003c14 <__sinit>:
 8003c14:	b510      	push	{r4, lr}
 8003c16:	4604      	mov	r4, r0
 8003c18:	f7ff fff0 	bl	8003bfc <__sfp_lock_acquire>
 8003c1c:	6a23      	ldr	r3, [r4, #32]
 8003c1e:	b11b      	cbz	r3, 8003c28 <__sinit+0x14>
 8003c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c24:	f7ff bff0 	b.w	8003c08 <__sfp_lock_release>
 8003c28:	4b04      	ldr	r3, [pc, #16]	@ (8003c3c <__sinit+0x28>)
 8003c2a:	6223      	str	r3, [r4, #32]
 8003c2c:	4b04      	ldr	r3, [pc, #16]	@ (8003c40 <__sinit+0x2c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f5      	bne.n	8003c20 <__sinit+0xc>
 8003c34:	f7ff ffc4 	bl	8003bc0 <global_stdio_init.part.0>
 8003c38:	e7f2      	b.n	8003c20 <__sinit+0xc>
 8003c3a:	bf00      	nop
 8003c3c:	08003b81 	.word	0x08003b81
 8003c40:	20000414 	.word	0x20000414

08003c44 <_fwalk_sglue>:
 8003c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c48:	4607      	mov	r7, r0
 8003c4a:	4688      	mov	r8, r1
 8003c4c:	4614      	mov	r4, r2
 8003c4e:	2600      	movs	r6, #0
 8003c50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c54:	f1b9 0901 	subs.w	r9, r9, #1
 8003c58:	d505      	bpl.n	8003c66 <_fwalk_sglue+0x22>
 8003c5a:	6824      	ldr	r4, [r4, #0]
 8003c5c:	2c00      	cmp	r4, #0
 8003c5e:	d1f7      	bne.n	8003c50 <_fwalk_sglue+0xc>
 8003c60:	4630      	mov	r0, r6
 8003c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c66:	89ab      	ldrh	r3, [r5, #12]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d907      	bls.n	8003c7c <_fwalk_sglue+0x38>
 8003c6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c70:	3301      	adds	r3, #1
 8003c72:	d003      	beq.n	8003c7c <_fwalk_sglue+0x38>
 8003c74:	4629      	mov	r1, r5
 8003c76:	4638      	mov	r0, r7
 8003c78:	47c0      	blx	r8
 8003c7a:	4306      	orrs	r6, r0
 8003c7c:	3568      	adds	r5, #104	@ 0x68
 8003c7e:	e7e9      	b.n	8003c54 <_fwalk_sglue+0x10>

08003c80 <__sread>:
 8003c80:	b510      	push	{r4, lr}
 8003c82:	460c      	mov	r4, r1
 8003c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c88:	f000 f86c 	bl	8003d64 <_read_r>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	bfab      	itete	ge
 8003c90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003c92:	89a3      	ldrhlt	r3, [r4, #12]
 8003c94:	181b      	addge	r3, r3, r0
 8003c96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003c9a:	bfac      	ite	ge
 8003c9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003c9e:	81a3      	strhlt	r3, [r4, #12]
 8003ca0:	bd10      	pop	{r4, pc}

08003ca2 <__swrite>:
 8003ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ca6:	461f      	mov	r7, r3
 8003ca8:	898b      	ldrh	r3, [r1, #12]
 8003caa:	05db      	lsls	r3, r3, #23
 8003cac:	4605      	mov	r5, r0
 8003cae:	460c      	mov	r4, r1
 8003cb0:	4616      	mov	r6, r2
 8003cb2:	d505      	bpl.n	8003cc0 <__swrite+0x1e>
 8003cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb8:	2302      	movs	r3, #2
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f000 f840 	bl	8003d40 <_lseek_r>
 8003cc0:	89a3      	ldrh	r3, [r4, #12]
 8003cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cca:	81a3      	strh	r3, [r4, #12]
 8003ccc:	4632      	mov	r2, r6
 8003cce:	463b      	mov	r3, r7
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd6:	f000 b857 	b.w	8003d88 <_write_r>

08003cda <__sseek>:
 8003cda:	b510      	push	{r4, lr}
 8003cdc:	460c      	mov	r4, r1
 8003cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce2:	f000 f82d 	bl	8003d40 <_lseek_r>
 8003ce6:	1c43      	adds	r3, r0, #1
 8003ce8:	89a3      	ldrh	r3, [r4, #12]
 8003cea:	bf15      	itete	ne
 8003cec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003cee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003cf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003cf6:	81a3      	strheq	r3, [r4, #12]
 8003cf8:	bf18      	it	ne
 8003cfa:	81a3      	strhne	r3, [r4, #12]
 8003cfc:	bd10      	pop	{r4, pc}

08003cfe <__sclose>:
 8003cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d02:	f000 b80d 	b.w	8003d20 <_close_r>

08003d06 <memset>:
 8003d06:	4402      	add	r2, r0
 8003d08:	4603      	mov	r3, r0
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d100      	bne.n	8003d10 <memset+0xa>
 8003d0e:	4770      	bx	lr
 8003d10:	f803 1b01 	strb.w	r1, [r3], #1
 8003d14:	e7f9      	b.n	8003d0a <memset+0x4>
	...

08003d18 <_localeconv_r>:
 8003d18:	4800      	ldr	r0, [pc, #0]	@ (8003d1c <_localeconv_r+0x4>)
 8003d1a:	4770      	bx	lr
 8003d1c:	20000158 	.word	0x20000158

08003d20 <_close_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	4d06      	ldr	r5, [pc, #24]	@ (8003d3c <_close_r+0x1c>)
 8003d24:	2300      	movs	r3, #0
 8003d26:	4604      	mov	r4, r0
 8003d28:	4608      	mov	r0, r1
 8003d2a:	602b      	str	r3, [r5, #0]
 8003d2c:	f7fd fbdc 	bl	80014e8 <_close>
 8003d30:	1c43      	adds	r3, r0, #1
 8003d32:	d102      	bne.n	8003d3a <_close_r+0x1a>
 8003d34:	682b      	ldr	r3, [r5, #0]
 8003d36:	b103      	cbz	r3, 8003d3a <_close_r+0x1a>
 8003d38:	6023      	str	r3, [r4, #0]
 8003d3a:	bd38      	pop	{r3, r4, r5, pc}
 8003d3c:	20000418 	.word	0x20000418

08003d40 <_lseek_r>:
 8003d40:	b538      	push	{r3, r4, r5, lr}
 8003d42:	4d07      	ldr	r5, [pc, #28]	@ (8003d60 <_lseek_r+0x20>)
 8003d44:	4604      	mov	r4, r0
 8003d46:	4608      	mov	r0, r1
 8003d48:	4611      	mov	r1, r2
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	602a      	str	r2, [r5, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f7fd fbf1 	bl	8001536 <_lseek>
 8003d54:	1c43      	adds	r3, r0, #1
 8003d56:	d102      	bne.n	8003d5e <_lseek_r+0x1e>
 8003d58:	682b      	ldr	r3, [r5, #0]
 8003d5a:	b103      	cbz	r3, 8003d5e <_lseek_r+0x1e>
 8003d5c:	6023      	str	r3, [r4, #0]
 8003d5e:	bd38      	pop	{r3, r4, r5, pc}
 8003d60:	20000418 	.word	0x20000418

08003d64 <_read_r>:
 8003d64:	b538      	push	{r3, r4, r5, lr}
 8003d66:	4d07      	ldr	r5, [pc, #28]	@ (8003d84 <_read_r+0x20>)
 8003d68:	4604      	mov	r4, r0
 8003d6a:	4608      	mov	r0, r1
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	2200      	movs	r2, #0
 8003d70:	602a      	str	r2, [r5, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	f7fd fb7f 	bl	8001476 <_read>
 8003d78:	1c43      	adds	r3, r0, #1
 8003d7a:	d102      	bne.n	8003d82 <_read_r+0x1e>
 8003d7c:	682b      	ldr	r3, [r5, #0]
 8003d7e:	b103      	cbz	r3, 8003d82 <_read_r+0x1e>
 8003d80:	6023      	str	r3, [r4, #0]
 8003d82:	bd38      	pop	{r3, r4, r5, pc}
 8003d84:	20000418 	.word	0x20000418

08003d88 <_write_r>:
 8003d88:	b538      	push	{r3, r4, r5, lr}
 8003d8a:	4d07      	ldr	r5, [pc, #28]	@ (8003da8 <_write_r+0x20>)
 8003d8c:	4604      	mov	r4, r0
 8003d8e:	4608      	mov	r0, r1
 8003d90:	4611      	mov	r1, r2
 8003d92:	2200      	movs	r2, #0
 8003d94:	602a      	str	r2, [r5, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	f7fd fb8a 	bl	80014b0 <_write>
 8003d9c:	1c43      	adds	r3, r0, #1
 8003d9e:	d102      	bne.n	8003da6 <_write_r+0x1e>
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	b103      	cbz	r3, 8003da6 <_write_r+0x1e>
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	bd38      	pop	{r3, r4, r5, pc}
 8003da8:	20000418 	.word	0x20000418

08003dac <__errno>:
 8003dac:	4b01      	ldr	r3, [pc, #4]	@ (8003db4 <__errno+0x8>)
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000018 	.word	0x20000018

08003db8 <__libc_init_array>:
 8003db8:	b570      	push	{r4, r5, r6, lr}
 8003dba:	4d0d      	ldr	r5, [pc, #52]	@ (8003df0 <__libc_init_array+0x38>)
 8003dbc:	4c0d      	ldr	r4, [pc, #52]	@ (8003df4 <__libc_init_array+0x3c>)
 8003dbe:	1b64      	subs	r4, r4, r5
 8003dc0:	10a4      	asrs	r4, r4, #2
 8003dc2:	2600      	movs	r6, #0
 8003dc4:	42a6      	cmp	r6, r4
 8003dc6:	d109      	bne.n	8003ddc <__libc_init_array+0x24>
 8003dc8:	4d0b      	ldr	r5, [pc, #44]	@ (8003df8 <__libc_init_array+0x40>)
 8003dca:	4c0c      	ldr	r4, [pc, #48]	@ (8003dfc <__libc_init_array+0x44>)
 8003dcc:	f001 febc 	bl	8005b48 <_init>
 8003dd0:	1b64      	subs	r4, r4, r5
 8003dd2:	10a4      	asrs	r4, r4, #2
 8003dd4:	2600      	movs	r6, #0
 8003dd6:	42a6      	cmp	r6, r4
 8003dd8:	d105      	bne.n	8003de6 <__libc_init_array+0x2e>
 8003dda:	bd70      	pop	{r4, r5, r6, pc}
 8003ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de0:	4798      	blx	r3
 8003de2:	3601      	adds	r6, #1
 8003de4:	e7ee      	b.n	8003dc4 <__libc_init_array+0xc>
 8003de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dea:	4798      	blx	r3
 8003dec:	3601      	adds	r6, #1
 8003dee:	e7f2      	b.n	8003dd6 <__libc_init_array+0x1e>
 8003df0:	08005ef0 	.word	0x08005ef0
 8003df4:	08005ef0 	.word	0x08005ef0
 8003df8:	08005ef0 	.word	0x08005ef0
 8003dfc:	08005ef4 	.word	0x08005ef4

08003e00 <__retarget_lock_init_recursive>:
 8003e00:	4770      	bx	lr

08003e02 <__retarget_lock_acquire_recursive>:
 8003e02:	4770      	bx	lr

08003e04 <__retarget_lock_release_recursive>:
 8003e04:	4770      	bx	lr

08003e06 <quorem>:
 8003e06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0a:	6903      	ldr	r3, [r0, #16]
 8003e0c:	690c      	ldr	r4, [r1, #16]
 8003e0e:	42a3      	cmp	r3, r4
 8003e10:	4607      	mov	r7, r0
 8003e12:	db7e      	blt.n	8003f12 <quorem+0x10c>
 8003e14:	3c01      	subs	r4, #1
 8003e16:	f101 0814 	add.w	r8, r1, #20
 8003e1a:	00a3      	lsls	r3, r4, #2
 8003e1c:	f100 0514 	add.w	r5, r0, #20
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e26:	9301      	str	r3, [sp, #4]
 8003e28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003e2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e30:	3301      	adds	r3, #1
 8003e32:	429a      	cmp	r2, r3
 8003e34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003e38:	fbb2 f6f3 	udiv	r6, r2, r3
 8003e3c:	d32e      	bcc.n	8003e9c <quorem+0x96>
 8003e3e:	f04f 0a00 	mov.w	sl, #0
 8003e42:	46c4      	mov	ip, r8
 8003e44:	46ae      	mov	lr, r5
 8003e46:	46d3      	mov	fp, sl
 8003e48:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003e4c:	b298      	uxth	r0, r3
 8003e4e:	fb06 a000 	mla	r0, r6, r0, sl
 8003e52:	0c02      	lsrs	r2, r0, #16
 8003e54:	0c1b      	lsrs	r3, r3, #16
 8003e56:	fb06 2303 	mla	r3, r6, r3, r2
 8003e5a:	f8de 2000 	ldr.w	r2, [lr]
 8003e5e:	b280      	uxth	r0, r0
 8003e60:	b292      	uxth	r2, r2
 8003e62:	1a12      	subs	r2, r2, r0
 8003e64:	445a      	add	r2, fp
 8003e66:	f8de 0000 	ldr.w	r0, [lr]
 8003e6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003e74:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003e78:	b292      	uxth	r2, r2
 8003e7a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003e7e:	45e1      	cmp	r9, ip
 8003e80:	f84e 2b04 	str.w	r2, [lr], #4
 8003e84:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003e88:	d2de      	bcs.n	8003e48 <quorem+0x42>
 8003e8a:	9b00      	ldr	r3, [sp, #0]
 8003e8c:	58eb      	ldr	r3, [r5, r3]
 8003e8e:	b92b      	cbnz	r3, 8003e9c <quorem+0x96>
 8003e90:	9b01      	ldr	r3, [sp, #4]
 8003e92:	3b04      	subs	r3, #4
 8003e94:	429d      	cmp	r5, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	d32f      	bcc.n	8003efa <quorem+0xf4>
 8003e9a:	613c      	str	r4, [r7, #16]
 8003e9c:	4638      	mov	r0, r7
 8003e9e:	f001 f979 	bl	8005194 <__mcmp>
 8003ea2:	2800      	cmp	r0, #0
 8003ea4:	db25      	blt.n	8003ef2 <quorem+0xec>
 8003ea6:	4629      	mov	r1, r5
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	f858 2b04 	ldr.w	r2, [r8], #4
 8003eae:	f8d1 c000 	ldr.w	ip, [r1]
 8003eb2:	fa1f fe82 	uxth.w	lr, r2
 8003eb6:	fa1f f38c 	uxth.w	r3, ip
 8003eba:	eba3 030e 	sub.w	r3, r3, lr
 8003ebe:	4403      	add	r3, r0
 8003ec0:	0c12      	lsrs	r2, r2, #16
 8003ec2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003ec6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ed0:	45c1      	cmp	r9, r8
 8003ed2:	f841 3b04 	str.w	r3, [r1], #4
 8003ed6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003eda:	d2e6      	bcs.n	8003eaa <quorem+0xa4>
 8003edc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ee0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ee4:	b922      	cbnz	r2, 8003ef0 <quorem+0xea>
 8003ee6:	3b04      	subs	r3, #4
 8003ee8:	429d      	cmp	r5, r3
 8003eea:	461a      	mov	r2, r3
 8003eec:	d30b      	bcc.n	8003f06 <quorem+0x100>
 8003eee:	613c      	str	r4, [r7, #16]
 8003ef0:	3601      	adds	r6, #1
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	b003      	add	sp, #12
 8003ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003efa:	6812      	ldr	r2, [r2, #0]
 8003efc:	3b04      	subs	r3, #4
 8003efe:	2a00      	cmp	r2, #0
 8003f00:	d1cb      	bne.n	8003e9a <quorem+0x94>
 8003f02:	3c01      	subs	r4, #1
 8003f04:	e7c6      	b.n	8003e94 <quorem+0x8e>
 8003f06:	6812      	ldr	r2, [r2, #0]
 8003f08:	3b04      	subs	r3, #4
 8003f0a:	2a00      	cmp	r2, #0
 8003f0c:	d1ef      	bne.n	8003eee <quorem+0xe8>
 8003f0e:	3c01      	subs	r4, #1
 8003f10:	e7ea      	b.n	8003ee8 <quorem+0xe2>
 8003f12:	2000      	movs	r0, #0
 8003f14:	e7ee      	b.n	8003ef4 <quorem+0xee>
	...

08003f18 <_dtoa_r>:
 8003f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f1c:	69c7      	ldr	r7, [r0, #28]
 8003f1e:	b099      	sub	sp, #100	@ 0x64
 8003f20:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003f24:	ec55 4b10 	vmov	r4, r5, d0
 8003f28:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8003f2a:	9109      	str	r1, [sp, #36]	@ 0x24
 8003f2c:	4683      	mov	fp, r0
 8003f2e:	920e      	str	r2, [sp, #56]	@ 0x38
 8003f30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003f32:	b97f      	cbnz	r7, 8003f54 <_dtoa_r+0x3c>
 8003f34:	2010      	movs	r0, #16
 8003f36:	f000 fdfd 	bl	8004b34 <malloc>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	f8cb 001c 	str.w	r0, [fp, #28]
 8003f40:	b920      	cbnz	r0, 8003f4c <_dtoa_r+0x34>
 8003f42:	4ba7      	ldr	r3, [pc, #668]	@ (80041e0 <_dtoa_r+0x2c8>)
 8003f44:	21ef      	movs	r1, #239	@ 0xef
 8003f46:	48a7      	ldr	r0, [pc, #668]	@ (80041e4 <_dtoa_r+0x2cc>)
 8003f48:	f001 faf6 	bl	8005538 <__assert_func>
 8003f4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003f50:	6007      	str	r7, [r0, #0]
 8003f52:	60c7      	str	r7, [r0, #12]
 8003f54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003f58:	6819      	ldr	r1, [r3, #0]
 8003f5a:	b159      	cbz	r1, 8003f74 <_dtoa_r+0x5c>
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	604a      	str	r2, [r1, #4]
 8003f60:	2301      	movs	r3, #1
 8003f62:	4093      	lsls	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
 8003f66:	4658      	mov	r0, fp
 8003f68:	f000 feda 	bl	8004d20 <_Bfree>
 8003f6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	1e2b      	subs	r3, r5, #0
 8003f76:	bfb9      	ittee	lt
 8003f78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003f7c:	9303      	strlt	r3, [sp, #12]
 8003f7e:	2300      	movge	r3, #0
 8003f80:	6033      	strge	r3, [r6, #0]
 8003f82:	9f03      	ldr	r7, [sp, #12]
 8003f84:	4b98      	ldr	r3, [pc, #608]	@ (80041e8 <_dtoa_r+0x2d0>)
 8003f86:	bfbc      	itt	lt
 8003f88:	2201      	movlt	r2, #1
 8003f8a:	6032      	strlt	r2, [r6, #0]
 8003f8c:	43bb      	bics	r3, r7
 8003f8e:	d112      	bne.n	8003fb6 <_dtoa_r+0x9e>
 8003f90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003f92:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003f9c:	4323      	orrs	r3, r4
 8003f9e:	f000 854d 	beq.w	8004a3c <_dtoa_r+0xb24>
 8003fa2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003fa4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80041fc <_dtoa_r+0x2e4>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 854f 	beq.w	8004a4c <_dtoa_r+0xb34>
 8003fae:	f10a 0303 	add.w	r3, sl, #3
 8003fb2:	f000 bd49 	b.w	8004a48 <_dtoa_r+0xb30>
 8003fb6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	ec51 0b17 	vmov	r0, r1, d7
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8003fc6:	f7fc fd87 	bl	8000ad8 <__aeabi_dcmpeq>
 8003fca:	4680      	mov	r8, r0
 8003fcc:	b158      	cbz	r0, 8003fe6 <_dtoa_r+0xce>
 8003fce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003fd6:	b113      	cbz	r3, 8003fde <_dtoa_r+0xc6>
 8003fd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8003fda:	4b84      	ldr	r3, [pc, #528]	@ (80041ec <_dtoa_r+0x2d4>)
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004200 <_dtoa_r+0x2e8>
 8003fe2:	f000 bd33 	b.w	8004a4c <_dtoa_r+0xb34>
 8003fe6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8003fea:	aa16      	add	r2, sp, #88	@ 0x58
 8003fec:	a917      	add	r1, sp, #92	@ 0x5c
 8003fee:	4658      	mov	r0, fp
 8003ff0:	f001 f980 	bl	80052f4 <__d2b>
 8003ff4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003ff8:	4681      	mov	r9, r0
 8003ffa:	2e00      	cmp	r6, #0
 8003ffc:	d077      	beq.n	80040ee <_dtoa_r+0x1d6>
 8003ffe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004000:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004008:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800400c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004010:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004014:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004018:	4619      	mov	r1, r3
 800401a:	2200      	movs	r2, #0
 800401c:	4b74      	ldr	r3, [pc, #464]	@ (80041f0 <_dtoa_r+0x2d8>)
 800401e:	f7fc f93b 	bl	8000298 <__aeabi_dsub>
 8004022:	a369      	add	r3, pc, #420	@ (adr r3, 80041c8 <_dtoa_r+0x2b0>)
 8004024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004028:	f7fc faee 	bl	8000608 <__aeabi_dmul>
 800402c:	a368      	add	r3, pc, #416	@ (adr r3, 80041d0 <_dtoa_r+0x2b8>)
 800402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004032:	f7fc f933 	bl	800029c <__adddf3>
 8004036:	4604      	mov	r4, r0
 8004038:	4630      	mov	r0, r6
 800403a:	460d      	mov	r5, r1
 800403c:	f7fc fa7a 	bl	8000534 <__aeabi_i2d>
 8004040:	a365      	add	r3, pc, #404	@ (adr r3, 80041d8 <_dtoa_r+0x2c0>)
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f7fc fadf 	bl	8000608 <__aeabi_dmul>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4620      	mov	r0, r4
 8004050:	4629      	mov	r1, r5
 8004052:	f7fc f923 	bl	800029c <__adddf3>
 8004056:	4604      	mov	r4, r0
 8004058:	460d      	mov	r5, r1
 800405a:	f7fc fd85 	bl	8000b68 <__aeabi_d2iz>
 800405e:	2200      	movs	r2, #0
 8004060:	4607      	mov	r7, r0
 8004062:	2300      	movs	r3, #0
 8004064:	4620      	mov	r0, r4
 8004066:	4629      	mov	r1, r5
 8004068:	f7fc fd40 	bl	8000aec <__aeabi_dcmplt>
 800406c:	b140      	cbz	r0, 8004080 <_dtoa_r+0x168>
 800406e:	4638      	mov	r0, r7
 8004070:	f7fc fa60 	bl	8000534 <__aeabi_i2d>
 8004074:	4622      	mov	r2, r4
 8004076:	462b      	mov	r3, r5
 8004078:	f7fc fd2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800407c:	b900      	cbnz	r0, 8004080 <_dtoa_r+0x168>
 800407e:	3f01      	subs	r7, #1
 8004080:	2f16      	cmp	r7, #22
 8004082:	d851      	bhi.n	8004128 <_dtoa_r+0x210>
 8004084:	4b5b      	ldr	r3, [pc, #364]	@ (80041f4 <_dtoa_r+0x2dc>)
 8004086:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004092:	f7fc fd2b 	bl	8000aec <__aeabi_dcmplt>
 8004096:	2800      	cmp	r0, #0
 8004098:	d048      	beq.n	800412c <_dtoa_r+0x214>
 800409a:	3f01      	subs	r7, #1
 800409c:	2300      	movs	r3, #0
 800409e:	9312      	str	r3, [sp, #72]	@ 0x48
 80040a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80040a2:	1b9b      	subs	r3, r3, r6
 80040a4:	1e5a      	subs	r2, r3, #1
 80040a6:	bf44      	itt	mi
 80040a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80040ac:	2300      	movmi	r3, #0
 80040ae:	9208      	str	r2, [sp, #32]
 80040b0:	bf54      	ite	pl
 80040b2:	f04f 0800 	movpl.w	r8, #0
 80040b6:	9308      	strmi	r3, [sp, #32]
 80040b8:	2f00      	cmp	r7, #0
 80040ba:	db39      	blt.n	8004130 <_dtoa_r+0x218>
 80040bc:	9b08      	ldr	r3, [sp, #32]
 80040be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80040c0:	443b      	add	r3, r7
 80040c2:	9308      	str	r3, [sp, #32]
 80040c4:	2300      	movs	r3, #0
 80040c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80040c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040ca:	2b09      	cmp	r3, #9
 80040cc:	d864      	bhi.n	8004198 <_dtoa_r+0x280>
 80040ce:	2b05      	cmp	r3, #5
 80040d0:	bfc4      	itt	gt
 80040d2:	3b04      	subgt	r3, #4
 80040d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80040d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040d8:	f1a3 0302 	sub.w	r3, r3, #2
 80040dc:	bfcc      	ite	gt
 80040de:	2400      	movgt	r4, #0
 80040e0:	2401      	movle	r4, #1
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d863      	bhi.n	80041ae <_dtoa_r+0x296>
 80040e6:	e8df f003 	tbb	[pc, r3]
 80040ea:	372a      	.short	0x372a
 80040ec:	5535      	.short	0x5535
 80040ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80040f2:	441e      	add	r6, r3
 80040f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	bfc1      	itttt	gt
 80040fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004100:	409f      	lslgt	r7, r3
 8004102:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004106:	fa24 f303 	lsrgt.w	r3, r4, r3
 800410a:	bfd6      	itet	le
 800410c:	f1c3 0320 	rsble	r3, r3, #32
 8004110:	ea47 0003 	orrgt.w	r0, r7, r3
 8004114:	fa04 f003 	lslle.w	r0, r4, r3
 8004118:	f7fc f9fc 	bl	8000514 <__aeabi_ui2d>
 800411c:	2201      	movs	r2, #1
 800411e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004122:	3e01      	subs	r6, #1
 8004124:	9214      	str	r2, [sp, #80]	@ 0x50
 8004126:	e777      	b.n	8004018 <_dtoa_r+0x100>
 8004128:	2301      	movs	r3, #1
 800412a:	e7b8      	b.n	800409e <_dtoa_r+0x186>
 800412c:	9012      	str	r0, [sp, #72]	@ 0x48
 800412e:	e7b7      	b.n	80040a0 <_dtoa_r+0x188>
 8004130:	427b      	negs	r3, r7
 8004132:	930a      	str	r3, [sp, #40]	@ 0x28
 8004134:	2300      	movs	r3, #0
 8004136:	eba8 0807 	sub.w	r8, r8, r7
 800413a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800413c:	e7c4      	b.n	80040c8 <_dtoa_r+0x1b0>
 800413e:	2300      	movs	r3, #0
 8004140:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004142:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004144:	2b00      	cmp	r3, #0
 8004146:	dc35      	bgt.n	80041b4 <_dtoa_r+0x29c>
 8004148:	2301      	movs	r3, #1
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	9307      	str	r3, [sp, #28]
 800414e:	461a      	mov	r2, r3
 8004150:	920e      	str	r2, [sp, #56]	@ 0x38
 8004152:	e00b      	b.n	800416c <_dtoa_r+0x254>
 8004154:	2301      	movs	r3, #1
 8004156:	e7f3      	b.n	8004140 <_dtoa_r+0x228>
 8004158:	2300      	movs	r3, #0
 800415a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800415c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	3301      	adds	r3, #1
 8004164:	2b01      	cmp	r3, #1
 8004166:	9307      	str	r3, [sp, #28]
 8004168:	bfb8      	it	lt
 800416a:	2301      	movlt	r3, #1
 800416c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004170:	2100      	movs	r1, #0
 8004172:	2204      	movs	r2, #4
 8004174:	f102 0514 	add.w	r5, r2, #20
 8004178:	429d      	cmp	r5, r3
 800417a:	d91f      	bls.n	80041bc <_dtoa_r+0x2a4>
 800417c:	6041      	str	r1, [r0, #4]
 800417e:	4658      	mov	r0, fp
 8004180:	f000 fd8e 	bl	8004ca0 <_Balloc>
 8004184:	4682      	mov	sl, r0
 8004186:	2800      	cmp	r0, #0
 8004188:	d13c      	bne.n	8004204 <_dtoa_r+0x2ec>
 800418a:	4b1b      	ldr	r3, [pc, #108]	@ (80041f8 <_dtoa_r+0x2e0>)
 800418c:	4602      	mov	r2, r0
 800418e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004192:	e6d8      	b.n	8003f46 <_dtoa_r+0x2e>
 8004194:	2301      	movs	r3, #1
 8004196:	e7e0      	b.n	800415a <_dtoa_r+0x242>
 8004198:	2401      	movs	r4, #1
 800419a:	2300      	movs	r3, #0
 800419c:	9309      	str	r3, [sp, #36]	@ 0x24
 800419e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80041a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	9307      	str	r3, [sp, #28]
 80041a8:	2200      	movs	r2, #0
 80041aa:	2312      	movs	r3, #18
 80041ac:	e7d0      	b.n	8004150 <_dtoa_r+0x238>
 80041ae:	2301      	movs	r3, #1
 80041b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041b2:	e7f5      	b.n	80041a0 <_dtoa_r+0x288>
 80041b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	9307      	str	r3, [sp, #28]
 80041ba:	e7d7      	b.n	800416c <_dtoa_r+0x254>
 80041bc:	3101      	adds	r1, #1
 80041be:	0052      	lsls	r2, r2, #1
 80041c0:	e7d8      	b.n	8004174 <_dtoa_r+0x25c>
 80041c2:	bf00      	nop
 80041c4:	f3af 8000 	nop.w
 80041c8:	636f4361 	.word	0x636f4361
 80041cc:	3fd287a7 	.word	0x3fd287a7
 80041d0:	8b60c8b3 	.word	0x8b60c8b3
 80041d4:	3fc68a28 	.word	0x3fc68a28
 80041d8:	509f79fb 	.word	0x509f79fb
 80041dc:	3fd34413 	.word	0x3fd34413
 80041e0:	08005bb9 	.word	0x08005bb9
 80041e4:	08005bd0 	.word	0x08005bd0
 80041e8:	7ff00000 	.word	0x7ff00000
 80041ec:	08005b89 	.word	0x08005b89
 80041f0:	3ff80000 	.word	0x3ff80000
 80041f4:	08005cc8 	.word	0x08005cc8
 80041f8:	08005c28 	.word	0x08005c28
 80041fc:	08005bb5 	.word	0x08005bb5
 8004200:	08005b88 	.word	0x08005b88
 8004204:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004208:	6018      	str	r0, [r3, #0]
 800420a:	9b07      	ldr	r3, [sp, #28]
 800420c:	2b0e      	cmp	r3, #14
 800420e:	f200 80a4 	bhi.w	800435a <_dtoa_r+0x442>
 8004212:	2c00      	cmp	r4, #0
 8004214:	f000 80a1 	beq.w	800435a <_dtoa_r+0x442>
 8004218:	2f00      	cmp	r7, #0
 800421a:	dd33      	ble.n	8004284 <_dtoa_r+0x36c>
 800421c:	4bad      	ldr	r3, [pc, #692]	@ (80044d4 <_dtoa_r+0x5bc>)
 800421e:	f007 020f 	and.w	r2, r7, #15
 8004222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004226:	ed93 7b00 	vldr	d7, [r3]
 800422a:	05f8      	lsls	r0, r7, #23
 800422c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004230:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004234:	d516      	bpl.n	8004264 <_dtoa_r+0x34c>
 8004236:	4ba8      	ldr	r3, [pc, #672]	@ (80044d8 <_dtoa_r+0x5c0>)
 8004238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800423c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004240:	f7fc fb0c 	bl	800085c <__aeabi_ddiv>
 8004244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004248:	f004 040f 	and.w	r4, r4, #15
 800424c:	2603      	movs	r6, #3
 800424e:	4da2      	ldr	r5, [pc, #648]	@ (80044d8 <_dtoa_r+0x5c0>)
 8004250:	b954      	cbnz	r4, 8004268 <_dtoa_r+0x350>
 8004252:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800425a:	f7fc faff 	bl	800085c <__aeabi_ddiv>
 800425e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004262:	e028      	b.n	80042b6 <_dtoa_r+0x39e>
 8004264:	2602      	movs	r6, #2
 8004266:	e7f2      	b.n	800424e <_dtoa_r+0x336>
 8004268:	07e1      	lsls	r1, r4, #31
 800426a:	d508      	bpl.n	800427e <_dtoa_r+0x366>
 800426c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004270:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004274:	f7fc f9c8 	bl	8000608 <__aeabi_dmul>
 8004278:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800427c:	3601      	adds	r6, #1
 800427e:	1064      	asrs	r4, r4, #1
 8004280:	3508      	adds	r5, #8
 8004282:	e7e5      	b.n	8004250 <_dtoa_r+0x338>
 8004284:	f000 80d2 	beq.w	800442c <_dtoa_r+0x514>
 8004288:	427c      	negs	r4, r7
 800428a:	4b92      	ldr	r3, [pc, #584]	@ (80044d4 <_dtoa_r+0x5bc>)
 800428c:	4d92      	ldr	r5, [pc, #584]	@ (80044d8 <_dtoa_r+0x5c0>)
 800428e:	f004 020f 	and.w	r2, r4, #15
 8004292:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800429e:	f7fc f9b3 	bl	8000608 <__aeabi_dmul>
 80042a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042a6:	1124      	asrs	r4, r4, #4
 80042a8:	2300      	movs	r3, #0
 80042aa:	2602      	movs	r6, #2
 80042ac:	2c00      	cmp	r4, #0
 80042ae:	f040 80b2 	bne.w	8004416 <_dtoa_r+0x4fe>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1d3      	bne.n	800425e <_dtoa_r+0x346>
 80042b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80042b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80b7 	beq.w	8004430 <_dtoa_r+0x518>
 80042c2:	4b86      	ldr	r3, [pc, #536]	@ (80044dc <_dtoa_r+0x5c4>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	4620      	mov	r0, r4
 80042c8:	4629      	mov	r1, r5
 80042ca:	f7fc fc0f 	bl	8000aec <__aeabi_dcmplt>
 80042ce:	2800      	cmp	r0, #0
 80042d0:	f000 80ae 	beq.w	8004430 <_dtoa_r+0x518>
 80042d4:	9b07      	ldr	r3, [sp, #28]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 80aa 	beq.w	8004430 <_dtoa_r+0x518>
 80042dc:	9b00      	ldr	r3, [sp, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	dd37      	ble.n	8004352 <_dtoa_r+0x43a>
 80042e2:	1e7b      	subs	r3, r7, #1
 80042e4:	9304      	str	r3, [sp, #16]
 80042e6:	4620      	mov	r0, r4
 80042e8:	4b7d      	ldr	r3, [pc, #500]	@ (80044e0 <_dtoa_r+0x5c8>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	4629      	mov	r1, r5
 80042ee:	f7fc f98b 	bl	8000608 <__aeabi_dmul>
 80042f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042f6:	9c00      	ldr	r4, [sp, #0]
 80042f8:	3601      	adds	r6, #1
 80042fa:	4630      	mov	r0, r6
 80042fc:	f7fc f91a 	bl	8000534 <__aeabi_i2d>
 8004300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004304:	f7fc f980 	bl	8000608 <__aeabi_dmul>
 8004308:	4b76      	ldr	r3, [pc, #472]	@ (80044e4 <_dtoa_r+0x5cc>)
 800430a:	2200      	movs	r2, #0
 800430c:	f7fb ffc6 	bl	800029c <__adddf3>
 8004310:	4605      	mov	r5, r0
 8004312:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004316:	2c00      	cmp	r4, #0
 8004318:	f040 808d 	bne.w	8004436 <_dtoa_r+0x51e>
 800431c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004320:	4b71      	ldr	r3, [pc, #452]	@ (80044e8 <_dtoa_r+0x5d0>)
 8004322:	2200      	movs	r2, #0
 8004324:	f7fb ffb8 	bl	8000298 <__aeabi_dsub>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004330:	462a      	mov	r2, r5
 8004332:	4633      	mov	r3, r6
 8004334:	f7fc fbf8 	bl	8000b28 <__aeabi_dcmpgt>
 8004338:	2800      	cmp	r0, #0
 800433a:	f040 828b 	bne.w	8004854 <_dtoa_r+0x93c>
 800433e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004342:	462a      	mov	r2, r5
 8004344:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004348:	f7fc fbd0 	bl	8000aec <__aeabi_dcmplt>
 800434c:	2800      	cmp	r0, #0
 800434e:	f040 8128 	bne.w	80045a2 <_dtoa_r+0x68a>
 8004352:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004356:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800435a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800435c:	2b00      	cmp	r3, #0
 800435e:	f2c0 815a 	blt.w	8004616 <_dtoa_r+0x6fe>
 8004362:	2f0e      	cmp	r7, #14
 8004364:	f300 8157 	bgt.w	8004616 <_dtoa_r+0x6fe>
 8004368:	4b5a      	ldr	r3, [pc, #360]	@ (80044d4 <_dtoa_r+0x5bc>)
 800436a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800436e:	ed93 7b00 	vldr	d7, [r3]
 8004372:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004374:	2b00      	cmp	r3, #0
 8004376:	ed8d 7b00 	vstr	d7, [sp]
 800437a:	da03      	bge.n	8004384 <_dtoa_r+0x46c>
 800437c:	9b07      	ldr	r3, [sp, #28]
 800437e:	2b00      	cmp	r3, #0
 8004380:	f340 8101 	ble.w	8004586 <_dtoa_r+0x66e>
 8004384:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004388:	4656      	mov	r6, sl
 800438a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800438e:	4620      	mov	r0, r4
 8004390:	4629      	mov	r1, r5
 8004392:	f7fc fa63 	bl	800085c <__aeabi_ddiv>
 8004396:	f7fc fbe7 	bl	8000b68 <__aeabi_d2iz>
 800439a:	4680      	mov	r8, r0
 800439c:	f7fc f8ca 	bl	8000534 <__aeabi_i2d>
 80043a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043a4:	f7fc f930 	bl	8000608 <__aeabi_dmul>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4620      	mov	r0, r4
 80043ae:	4629      	mov	r1, r5
 80043b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80043b4:	f7fb ff70 	bl	8000298 <__aeabi_dsub>
 80043b8:	f806 4b01 	strb.w	r4, [r6], #1
 80043bc:	9d07      	ldr	r5, [sp, #28]
 80043be:	eba6 040a 	sub.w	r4, r6, sl
 80043c2:	42a5      	cmp	r5, r4
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	f040 8117 	bne.w	80045fa <_dtoa_r+0x6e2>
 80043cc:	f7fb ff66 	bl	800029c <__adddf3>
 80043d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043d4:	4604      	mov	r4, r0
 80043d6:	460d      	mov	r5, r1
 80043d8:	f7fc fba6 	bl	8000b28 <__aeabi_dcmpgt>
 80043dc:	2800      	cmp	r0, #0
 80043de:	f040 80f9 	bne.w	80045d4 <_dtoa_r+0x6bc>
 80043e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043e6:	4620      	mov	r0, r4
 80043e8:	4629      	mov	r1, r5
 80043ea:	f7fc fb75 	bl	8000ad8 <__aeabi_dcmpeq>
 80043ee:	b118      	cbz	r0, 80043f8 <_dtoa_r+0x4e0>
 80043f0:	f018 0f01 	tst.w	r8, #1
 80043f4:	f040 80ee 	bne.w	80045d4 <_dtoa_r+0x6bc>
 80043f8:	4649      	mov	r1, r9
 80043fa:	4658      	mov	r0, fp
 80043fc:	f000 fc90 	bl	8004d20 <_Bfree>
 8004400:	2300      	movs	r3, #0
 8004402:	7033      	strb	r3, [r6, #0]
 8004404:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004406:	3701      	adds	r7, #1
 8004408:	601f      	str	r7, [r3, #0]
 800440a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 831d 	beq.w	8004a4c <_dtoa_r+0xb34>
 8004412:	601e      	str	r6, [r3, #0]
 8004414:	e31a      	b.n	8004a4c <_dtoa_r+0xb34>
 8004416:	07e2      	lsls	r2, r4, #31
 8004418:	d505      	bpl.n	8004426 <_dtoa_r+0x50e>
 800441a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800441e:	f7fc f8f3 	bl	8000608 <__aeabi_dmul>
 8004422:	3601      	adds	r6, #1
 8004424:	2301      	movs	r3, #1
 8004426:	1064      	asrs	r4, r4, #1
 8004428:	3508      	adds	r5, #8
 800442a:	e73f      	b.n	80042ac <_dtoa_r+0x394>
 800442c:	2602      	movs	r6, #2
 800442e:	e742      	b.n	80042b6 <_dtoa_r+0x39e>
 8004430:	9c07      	ldr	r4, [sp, #28]
 8004432:	9704      	str	r7, [sp, #16]
 8004434:	e761      	b.n	80042fa <_dtoa_r+0x3e2>
 8004436:	4b27      	ldr	r3, [pc, #156]	@ (80044d4 <_dtoa_r+0x5bc>)
 8004438:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800443a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800443e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004442:	4454      	add	r4, sl
 8004444:	2900      	cmp	r1, #0
 8004446:	d053      	beq.n	80044f0 <_dtoa_r+0x5d8>
 8004448:	4928      	ldr	r1, [pc, #160]	@ (80044ec <_dtoa_r+0x5d4>)
 800444a:	2000      	movs	r0, #0
 800444c:	f7fc fa06 	bl	800085c <__aeabi_ddiv>
 8004450:	4633      	mov	r3, r6
 8004452:	462a      	mov	r2, r5
 8004454:	f7fb ff20 	bl	8000298 <__aeabi_dsub>
 8004458:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800445c:	4656      	mov	r6, sl
 800445e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004462:	f7fc fb81 	bl	8000b68 <__aeabi_d2iz>
 8004466:	4605      	mov	r5, r0
 8004468:	f7fc f864 	bl	8000534 <__aeabi_i2d>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004474:	f7fb ff10 	bl	8000298 <__aeabi_dsub>
 8004478:	3530      	adds	r5, #48	@ 0x30
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004482:	f806 5b01 	strb.w	r5, [r6], #1
 8004486:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800448a:	f7fc fb2f 	bl	8000aec <__aeabi_dcmplt>
 800448e:	2800      	cmp	r0, #0
 8004490:	d171      	bne.n	8004576 <_dtoa_r+0x65e>
 8004492:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004496:	4911      	ldr	r1, [pc, #68]	@ (80044dc <_dtoa_r+0x5c4>)
 8004498:	2000      	movs	r0, #0
 800449a:	f7fb fefd 	bl	8000298 <__aeabi_dsub>
 800449e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80044a2:	f7fc fb23 	bl	8000aec <__aeabi_dcmplt>
 80044a6:	2800      	cmp	r0, #0
 80044a8:	f040 8095 	bne.w	80045d6 <_dtoa_r+0x6be>
 80044ac:	42a6      	cmp	r6, r4
 80044ae:	f43f af50 	beq.w	8004352 <_dtoa_r+0x43a>
 80044b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80044b6:	4b0a      	ldr	r3, [pc, #40]	@ (80044e0 <_dtoa_r+0x5c8>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	f7fc f8a5 	bl	8000608 <__aeabi_dmul>
 80044be:	4b08      	ldr	r3, [pc, #32]	@ (80044e0 <_dtoa_r+0x5c8>)
 80044c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80044c4:	2200      	movs	r2, #0
 80044c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044ca:	f7fc f89d 	bl	8000608 <__aeabi_dmul>
 80044ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044d2:	e7c4      	b.n	800445e <_dtoa_r+0x546>
 80044d4:	08005cc8 	.word	0x08005cc8
 80044d8:	08005ca0 	.word	0x08005ca0
 80044dc:	3ff00000 	.word	0x3ff00000
 80044e0:	40240000 	.word	0x40240000
 80044e4:	401c0000 	.word	0x401c0000
 80044e8:	40140000 	.word	0x40140000
 80044ec:	3fe00000 	.word	0x3fe00000
 80044f0:	4631      	mov	r1, r6
 80044f2:	4628      	mov	r0, r5
 80044f4:	f7fc f888 	bl	8000608 <__aeabi_dmul>
 80044f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80044fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80044fe:	4656      	mov	r6, sl
 8004500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004504:	f7fc fb30 	bl	8000b68 <__aeabi_d2iz>
 8004508:	4605      	mov	r5, r0
 800450a:	f7fc f813 	bl	8000534 <__aeabi_i2d>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004516:	f7fb febf 	bl	8000298 <__aeabi_dsub>
 800451a:	3530      	adds	r5, #48	@ 0x30
 800451c:	f806 5b01 	strb.w	r5, [r6], #1
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	42a6      	cmp	r6, r4
 8004526:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	d124      	bne.n	800457a <_dtoa_r+0x662>
 8004530:	4bac      	ldr	r3, [pc, #688]	@ (80047e4 <_dtoa_r+0x8cc>)
 8004532:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004536:	f7fb feb1 	bl	800029c <__adddf3>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004542:	f7fc faf1 	bl	8000b28 <__aeabi_dcmpgt>
 8004546:	2800      	cmp	r0, #0
 8004548:	d145      	bne.n	80045d6 <_dtoa_r+0x6be>
 800454a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800454e:	49a5      	ldr	r1, [pc, #660]	@ (80047e4 <_dtoa_r+0x8cc>)
 8004550:	2000      	movs	r0, #0
 8004552:	f7fb fea1 	bl	8000298 <__aeabi_dsub>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800455e:	f7fc fac5 	bl	8000aec <__aeabi_dcmplt>
 8004562:	2800      	cmp	r0, #0
 8004564:	f43f aef5 	beq.w	8004352 <_dtoa_r+0x43a>
 8004568:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800456a:	1e73      	subs	r3, r6, #1
 800456c:	9315      	str	r3, [sp, #84]	@ 0x54
 800456e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004572:	2b30      	cmp	r3, #48	@ 0x30
 8004574:	d0f8      	beq.n	8004568 <_dtoa_r+0x650>
 8004576:	9f04      	ldr	r7, [sp, #16]
 8004578:	e73e      	b.n	80043f8 <_dtoa_r+0x4e0>
 800457a:	4b9b      	ldr	r3, [pc, #620]	@ (80047e8 <_dtoa_r+0x8d0>)
 800457c:	f7fc f844 	bl	8000608 <__aeabi_dmul>
 8004580:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004584:	e7bc      	b.n	8004500 <_dtoa_r+0x5e8>
 8004586:	d10c      	bne.n	80045a2 <_dtoa_r+0x68a>
 8004588:	4b98      	ldr	r3, [pc, #608]	@ (80047ec <_dtoa_r+0x8d4>)
 800458a:	2200      	movs	r2, #0
 800458c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004590:	f7fc f83a 	bl	8000608 <__aeabi_dmul>
 8004594:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004598:	f7fc fabc 	bl	8000b14 <__aeabi_dcmpge>
 800459c:	2800      	cmp	r0, #0
 800459e:	f000 8157 	beq.w	8004850 <_dtoa_r+0x938>
 80045a2:	2400      	movs	r4, #0
 80045a4:	4625      	mov	r5, r4
 80045a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80045a8:	43db      	mvns	r3, r3
 80045aa:	9304      	str	r3, [sp, #16]
 80045ac:	4656      	mov	r6, sl
 80045ae:	2700      	movs	r7, #0
 80045b0:	4621      	mov	r1, r4
 80045b2:	4658      	mov	r0, fp
 80045b4:	f000 fbb4 	bl	8004d20 <_Bfree>
 80045b8:	2d00      	cmp	r5, #0
 80045ba:	d0dc      	beq.n	8004576 <_dtoa_r+0x65e>
 80045bc:	b12f      	cbz	r7, 80045ca <_dtoa_r+0x6b2>
 80045be:	42af      	cmp	r7, r5
 80045c0:	d003      	beq.n	80045ca <_dtoa_r+0x6b2>
 80045c2:	4639      	mov	r1, r7
 80045c4:	4658      	mov	r0, fp
 80045c6:	f000 fbab 	bl	8004d20 <_Bfree>
 80045ca:	4629      	mov	r1, r5
 80045cc:	4658      	mov	r0, fp
 80045ce:	f000 fba7 	bl	8004d20 <_Bfree>
 80045d2:	e7d0      	b.n	8004576 <_dtoa_r+0x65e>
 80045d4:	9704      	str	r7, [sp, #16]
 80045d6:	4633      	mov	r3, r6
 80045d8:	461e      	mov	r6, r3
 80045da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80045de:	2a39      	cmp	r2, #57	@ 0x39
 80045e0:	d107      	bne.n	80045f2 <_dtoa_r+0x6da>
 80045e2:	459a      	cmp	sl, r3
 80045e4:	d1f8      	bne.n	80045d8 <_dtoa_r+0x6c0>
 80045e6:	9a04      	ldr	r2, [sp, #16]
 80045e8:	3201      	adds	r2, #1
 80045ea:	9204      	str	r2, [sp, #16]
 80045ec:	2230      	movs	r2, #48	@ 0x30
 80045ee:	f88a 2000 	strb.w	r2, [sl]
 80045f2:	781a      	ldrb	r2, [r3, #0]
 80045f4:	3201      	adds	r2, #1
 80045f6:	701a      	strb	r2, [r3, #0]
 80045f8:	e7bd      	b.n	8004576 <_dtoa_r+0x65e>
 80045fa:	4b7b      	ldr	r3, [pc, #492]	@ (80047e8 <_dtoa_r+0x8d0>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	f7fc f803 	bl	8000608 <__aeabi_dmul>
 8004602:	2200      	movs	r2, #0
 8004604:	2300      	movs	r3, #0
 8004606:	4604      	mov	r4, r0
 8004608:	460d      	mov	r5, r1
 800460a:	f7fc fa65 	bl	8000ad8 <__aeabi_dcmpeq>
 800460e:	2800      	cmp	r0, #0
 8004610:	f43f aebb 	beq.w	800438a <_dtoa_r+0x472>
 8004614:	e6f0      	b.n	80043f8 <_dtoa_r+0x4e0>
 8004616:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004618:	2a00      	cmp	r2, #0
 800461a:	f000 80db 	beq.w	80047d4 <_dtoa_r+0x8bc>
 800461e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004620:	2a01      	cmp	r2, #1
 8004622:	f300 80bf 	bgt.w	80047a4 <_dtoa_r+0x88c>
 8004626:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004628:	2a00      	cmp	r2, #0
 800462a:	f000 80b7 	beq.w	800479c <_dtoa_r+0x884>
 800462e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004632:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004634:	4646      	mov	r6, r8
 8004636:	9a08      	ldr	r2, [sp, #32]
 8004638:	2101      	movs	r1, #1
 800463a:	441a      	add	r2, r3
 800463c:	4658      	mov	r0, fp
 800463e:	4498      	add	r8, r3
 8004640:	9208      	str	r2, [sp, #32]
 8004642:	f000 fc21 	bl	8004e88 <__i2b>
 8004646:	4605      	mov	r5, r0
 8004648:	b15e      	cbz	r6, 8004662 <_dtoa_r+0x74a>
 800464a:	9b08      	ldr	r3, [sp, #32]
 800464c:	2b00      	cmp	r3, #0
 800464e:	dd08      	ble.n	8004662 <_dtoa_r+0x74a>
 8004650:	42b3      	cmp	r3, r6
 8004652:	9a08      	ldr	r2, [sp, #32]
 8004654:	bfa8      	it	ge
 8004656:	4633      	movge	r3, r6
 8004658:	eba8 0803 	sub.w	r8, r8, r3
 800465c:	1af6      	subs	r6, r6, r3
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	9308      	str	r3, [sp, #32]
 8004662:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004664:	b1f3      	cbz	r3, 80046a4 <_dtoa_r+0x78c>
 8004666:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 80b7 	beq.w	80047dc <_dtoa_r+0x8c4>
 800466e:	b18c      	cbz	r4, 8004694 <_dtoa_r+0x77c>
 8004670:	4629      	mov	r1, r5
 8004672:	4622      	mov	r2, r4
 8004674:	4658      	mov	r0, fp
 8004676:	f000 fcc7 	bl	8005008 <__pow5mult>
 800467a:	464a      	mov	r2, r9
 800467c:	4601      	mov	r1, r0
 800467e:	4605      	mov	r5, r0
 8004680:	4658      	mov	r0, fp
 8004682:	f000 fc17 	bl	8004eb4 <__multiply>
 8004686:	4649      	mov	r1, r9
 8004688:	9004      	str	r0, [sp, #16]
 800468a:	4658      	mov	r0, fp
 800468c:	f000 fb48 	bl	8004d20 <_Bfree>
 8004690:	9b04      	ldr	r3, [sp, #16]
 8004692:	4699      	mov	r9, r3
 8004694:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004696:	1b1a      	subs	r2, r3, r4
 8004698:	d004      	beq.n	80046a4 <_dtoa_r+0x78c>
 800469a:	4649      	mov	r1, r9
 800469c:	4658      	mov	r0, fp
 800469e:	f000 fcb3 	bl	8005008 <__pow5mult>
 80046a2:	4681      	mov	r9, r0
 80046a4:	2101      	movs	r1, #1
 80046a6:	4658      	mov	r0, fp
 80046a8:	f000 fbee 	bl	8004e88 <__i2b>
 80046ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80046ae:	4604      	mov	r4, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 81cf 	beq.w	8004a54 <_dtoa_r+0xb3c>
 80046b6:	461a      	mov	r2, r3
 80046b8:	4601      	mov	r1, r0
 80046ba:	4658      	mov	r0, fp
 80046bc:	f000 fca4 	bl	8005008 <__pow5mult>
 80046c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	4604      	mov	r4, r0
 80046c6:	f300 8095 	bgt.w	80047f4 <_dtoa_r+0x8dc>
 80046ca:	9b02      	ldr	r3, [sp, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f040 8087 	bne.w	80047e0 <_dtoa_r+0x8c8>
 80046d2:	9b03      	ldr	r3, [sp, #12]
 80046d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f040 8089 	bne.w	80047f0 <_dtoa_r+0x8d8>
 80046de:	9b03      	ldr	r3, [sp, #12]
 80046e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046e4:	0d1b      	lsrs	r3, r3, #20
 80046e6:	051b      	lsls	r3, r3, #20
 80046e8:	b12b      	cbz	r3, 80046f6 <_dtoa_r+0x7de>
 80046ea:	9b08      	ldr	r3, [sp, #32]
 80046ec:	3301      	adds	r3, #1
 80046ee:	9308      	str	r3, [sp, #32]
 80046f0:	f108 0801 	add.w	r8, r8, #1
 80046f4:	2301      	movs	r3, #1
 80046f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80046f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 81b0 	beq.w	8004a60 <_dtoa_r+0xb48>
 8004700:	6923      	ldr	r3, [r4, #16]
 8004702:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004706:	6918      	ldr	r0, [r3, #16]
 8004708:	f000 fb72 	bl	8004df0 <__hi0bits>
 800470c:	f1c0 0020 	rsb	r0, r0, #32
 8004710:	9b08      	ldr	r3, [sp, #32]
 8004712:	4418      	add	r0, r3
 8004714:	f010 001f 	ands.w	r0, r0, #31
 8004718:	d077      	beq.n	800480a <_dtoa_r+0x8f2>
 800471a:	f1c0 0320 	rsb	r3, r0, #32
 800471e:	2b04      	cmp	r3, #4
 8004720:	dd6b      	ble.n	80047fa <_dtoa_r+0x8e2>
 8004722:	9b08      	ldr	r3, [sp, #32]
 8004724:	f1c0 001c 	rsb	r0, r0, #28
 8004728:	4403      	add	r3, r0
 800472a:	4480      	add	r8, r0
 800472c:	4406      	add	r6, r0
 800472e:	9308      	str	r3, [sp, #32]
 8004730:	f1b8 0f00 	cmp.w	r8, #0
 8004734:	dd05      	ble.n	8004742 <_dtoa_r+0x82a>
 8004736:	4649      	mov	r1, r9
 8004738:	4642      	mov	r2, r8
 800473a:	4658      	mov	r0, fp
 800473c:	f000 fcbe 	bl	80050bc <__lshift>
 8004740:	4681      	mov	r9, r0
 8004742:	9b08      	ldr	r3, [sp, #32]
 8004744:	2b00      	cmp	r3, #0
 8004746:	dd05      	ble.n	8004754 <_dtoa_r+0x83c>
 8004748:	4621      	mov	r1, r4
 800474a:	461a      	mov	r2, r3
 800474c:	4658      	mov	r0, fp
 800474e:	f000 fcb5 	bl	80050bc <__lshift>
 8004752:	4604      	mov	r4, r0
 8004754:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004756:	2b00      	cmp	r3, #0
 8004758:	d059      	beq.n	800480e <_dtoa_r+0x8f6>
 800475a:	4621      	mov	r1, r4
 800475c:	4648      	mov	r0, r9
 800475e:	f000 fd19 	bl	8005194 <__mcmp>
 8004762:	2800      	cmp	r0, #0
 8004764:	da53      	bge.n	800480e <_dtoa_r+0x8f6>
 8004766:	1e7b      	subs	r3, r7, #1
 8004768:	9304      	str	r3, [sp, #16]
 800476a:	4649      	mov	r1, r9
 800476c:	2300      	movs	r3, #0
 800476e:	220a      	movs	r2, #10
 8004770:	4658      	mov	r0, fp
 8004772:	f000 faf7 	bl	8004d64 <__multadd>
 8004776:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004778:	4681      	mov	r9, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 8172 	beq.w	8004a64 <_dtoa_r+0xb4c>
 8004780:	2300      	movs	r3, #0
 8004782:	4629      	mov	r1, r5
 8004784:	220a      	movs	r2, #10
 8004786:	4658      	mov	r0, fp
 8004788:	f000 faec 	bl	8004d64 <__multadd>
 800478c:	9b00      	ldr	r3, [sp, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	4605      	mov	r5, r0
 8004792:	dc67      	bgt.n	8004864 <_dtoa_r+0x94c>
 8004794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004796:	2b02      	cmp	r3, #2
 8004798:	dc41      	bgt.n	800481e <_dtoa_r+0x906>
 800479a:	e063      	b.n	8004864 <_dtoa_r+0x94c>
 800479c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800479e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80047a2:	e746      	b.n	8004632 <_dtoa_r+0x71a>
 80047a4:	9b07      	ldr	r3, [sp, #28]
 80047a6:	1e5c      	subs	r4, r3, #1
 80047a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80047aa:	42a3      	cmp	r3, r4
 80047ac:	bfbf      	itttt	lt
 80047ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80047b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80047b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80047b4:	1ae3      	sublt	r3, r4, r3
 80047b6:	bfb4      	ite	lt
 80047b8:	18d2      	addlt	r2, r2, r3
 80047ba:	1b1c      	subge	r4, r3, r4
 80047bc:	9b07      	ldr	r3, [sp, #28]
 80047be:	bfbc      	itt	lt
 80047c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80047c2:	2400      	movlt	r4, #0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	bfb5      	itete	lt
 80047c8:	eba8 0603 	sublt.w	r6, r8, r3
 80047cc:	9b07      	ldrge	r3, [sp, #28]
 80047ce:	2300      	movlt	r3, #0
 80047d0:	4646      	movge	r6, r8
 80047d2:	e730      	b.n	8004636 <_dtoa_r+0x71e>
 80047d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80047d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80047d8:	4646      	mov	r6, r8
 80047da:	e735      	b.n	8004648 <_dtoa_r+0x730>
 80047dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80047de:	e75c      	b.n	800469a <_dtoa_r+0x782>
 80047e0:	2300      	movs	r3, #0
 80047e2:	e788      	b.n	80046f6 <_dtoa_r+0x7de>
 80047e4:	3fe00000 	.word	0x3fe00000
 80047e8:	40240000 	.word	0x40240000
 80047ec:	40140000 	.word	0x40140000
 80047f0:	9b02      	ldr	r3, [sp, #8]
 80047f2:	e780      	b.n	80046f6 <_dtoa_r+0x7de>
 80047f4:	2300      	movs	r3, #0
 80047f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80047f8:	e782      	b.n	8004700 <_dtoa_r+0x7e8>
 80047fa:	d099      	beq.n	8004730 <_dtoa_r+0x818>
 80047fc:	9a08      	ldr	r2, [sp, #32]
 80047fe:	331c      	adds	r3, #28
 8004800:	441a      	add	r2, r3
 8004802:	4498      	add	r8, r3
 8004804:	441e      	add	r6, r3
 8004806:	9208      	str	r2, [sp, #32]
 8004808:	e792      	b.n	8004730 <_dtoa_r+0x818>
 800480a:	4603      	mov	r3, r0
 800480c:	e7f6      	b.n	80047fc <_dtoa_r+0x8e4>
 800480e:	9b07      	ldr	r3, [sp, #28]
 8004810:	9704      	str	r7, [sp, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	dc20      	bgt.n	8004858 <_dtoa_r+0x940>
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800481a:	2b02      	cmp	r3, #2
 800481c:	dd1e      	ble.n	800485c <_dtoa_r+0x944>
 800481e:	9b00      	ldr	r3, [sp, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	f47f aec0 	bne.w	80045a6 <_dtoa_r+0x68e>
 8004826:	4621      	mov	r1, r4
 8004828:	2205      	movs	r2, #5
 800482a:	4658      	mov	r0, fp
 800482c:	f000 fa9a 	bl	8004d64 <__multadd>
 8004830:	4601      	mov	r1, r0
 8004832:	4604      	mov	r4, r0
 8004834:	4648      	mov	r0, r9
 8004836:	f000 fcad 	bl	8005194 <__mcmp>
 800483a:	2800      	cmp	r0, #0
 800483c:	f77f aeb3 	ble.w	80045a6 <_dtoa_r+0x68e>
 8004840:	4656      	mov	r6, sl
 8004842:	2331      	movs	r3, #49	@ 0x31
 8004844:	f806 3b01 	strb.w	r3, [r6], #1
 8004848:	9b04      	ldr	r3, [sp, #16]
 800484a:	3301      	adds	r3, #1
 800484c:	9304      	str	r3, [sp, #16]
 800484e:	e6ae      	b.n	80045ae <_dtoa_r+0x696>
 8004850:	9c07      	ldr	r4, [sp, #28]
 8004852:	9704      	str	r7, [sp, #16]
 8004854:	4625      	mov	r5, r4
 8004856:	e7f3      	b.n	8004840 <_dtoa_r+0x928>
 8004858:	9b07      	ldr	r3, [sp, #28]
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 8104 	beq.w	8004a6c <_dtoa_r+0xb54>
 8004864:	2e00      	cmp	r6, #0
 8004866:	dd05      	ble.n	8004874 <_dtoa_r+0x95c>
 8004868:	4629      	mov	r1, r5
 800486a:	4632      	mov	r2, r6
 800486c:	4658      	mov	r0, fp
 800486e:	f000 fc25 	bl	80050bc <__lshift>
 8004872:	4605      	mov	r5, r0
 8004874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004876:	2b00      	cmp	r3, #0
 8004878:	d05a      	beq.n	8004930 <_dtoa_r+0xa18>
 800487a:	6869      	ldr	r1, [r5, #4]
 800487c:	4658      	mov	r0, fp
 800487e:	f000 fa0f 	bl	8004ca0 <_Balloc>
 8004882:	4606      	mov	r6, r0
 8004884:	b928      	cbnz	r0, 8004892 <_dtoa_r+0x97a>
 8004886:	4b84      	ldr	r3, [pc, #528]	@ (8004a98 <_dtoa_r+0xb80>)
 8004888:	4602      	mov	r2, r0
 800488a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800488e:	f7ff bb5a 	b.w	8003f46 <_dtoa_r+0x2e>
 8004892:	692a      	ldr	r2, [r5, #16]
 8004894:	3202      	adds	r2, #2
 8004896:	0092      	lsls	r2, r2, #2
 8004898:	f105 010c 	add.w	r1, r5, #12
 800489c:	300c      	adds	r0, #12
 800489e:	f000 fe3d 	bl	800551c <memcpy>
 80048a2:	2201      	movs	r2, #1
 80048a4:	4631      	mov	r1, r6
 80048a6:	4658      	mov	r0, fp
 80048a8:	f000 fc08 	bl	80050bc <__lshift>
 80048ac:	f10a 0301 	add.w	r3, sl, #1
 80048b0:	9307      	str	r3, [sp, #28]
 80048b2:	9b00      	ldr	r3, [sp, #0]
 80048b4:	4453      	add	r3, sl
 80048b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048b8:	9b02      	ldr	r3, [sp, #8]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	462f      	mov	r7, r5
 80048c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80048c2:	4605      	mov	r5, r0
 80048c4:	9b07      	ldr	r3, [sp, #28]
 80048c6:	4621      	mov	r1, r4
 80048c8:	3b01      	subs	r3, #1
 80048ca:	4648      	mov	r0, r9
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	f7ff fa9a 	bl	8003e06 <quorem>
 80048d2:	4639      	mov	r1, r7
 80048d4:	9002      	str	r0, [sp, #8]
 80048d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80048da:	4648      	mov	r0, r9
 80048dc:	f000 fc5a 	bl	8005194 <__mcmp>
 80048e0:	462a      	mov	r2, r5
 80048e2:	9008      	str	r0, [sp, #32]
 80048e4:	4621      	mov	r1, r4
 80048e6:	4658      	mov	r0, fp
 80048e8:	f000 fc70 	bl	80051cc <__mdiff>
 80048ec:	68c2      	ldr	r2, [r0, #12]
 80048ee:	4606      	mov	r6, r0
 80048f0:	bb02      	cbnz	r2, 8004934 <_dtoa_r+0xa1c>
 80048f2:	4601      	mov	r1, r0
 80048f4:	4648      	mov	r0, r9
 80048f6:	f000 fc4d 	bl	8005194 <__mcmp>
 80048fa:	4602      	mov	r2, r0
 80048fc:	4631      	mov	r1, r6
 80048fe:	4658      	mov	r0, fp
 8004900:	920e      	str	r2, [sp, #56]	@ 0x38
 8004902:	f000 fa0d 	bl	8004d20 <_Bfree>
 8004906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004908:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800490a:	9e07      	ldr	r6, [sp, #28]
 800490c:	ea43 0102 	orr.w	r1, r3, r2
 8004910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004912:	4319      	orrs	r1, r3
 8004914:	d110      	bne.n	8004938 <_dtoa_r+0xa20>
 8004916:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800491a:	d029      	beq.n	8004970 <_dtoa_r+0xa58>
 800491c:	9b08      	ldr	r3, [sp, #32]
 800491e:	2b00      	cmp	r3, #0
 8004920:	dd02      	ble.n	8004928 <_dtoa_r+0xa10>
 8004922:	9b02      	ldr	r3, [sp, #8]
 8004924:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004928:	9b00      	ldr	r3, [sp, #0]
 800492a:	f883 8000 	strb.w	r8, [r3]
 800492e:	e63f      	b.n	80045b0 <_dtoa_r+0x698>
 8004930:	4628      	mov	r0, r5
 8004932:	e7bb      	b.n	80048ac <_dtoa_r+0x994>
 8004934:	2201      	movs	r2, #1
 8004936:	e7e1      	b.n	80048fc <_dtoa_r+0x9e4>
 8004938:	9b08      	ldr	r3, [sp, #32]
 800493a:	2b00      	cmp	r3, #0
 800493c:	db04      	blt.n	8004948 <_dtoa_r+0xa30>
 800493e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004940:	430b      	orrs	r3, r1
 8004942:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004944:	430b      	orrs	r3, r1
 8004946:	d120      	bne.n	800498a <_dtoa_r+0xa72>
 8004948:	2a00      	cmp	r2, #0
 800494a:	dded      	ble.n	8004928 <_dtoa_r+0xa10>
 800494c:	4649      	mov	r1, r9
 800494e:	2201      	movs	r2, #1
 8004950:	4658      	mov	r0, fp
 8004952:	f000 fbb3 	bl	80050bc <__lshift>
 8004956:	4621      	mov	r1, r4
 8004958:	4681      	mov	r9, r0
 800495a:	f000 fc1b 	bl	8005194 <__mcmp>
 800495e:	2800      	cmp	r0, #0
 8004960:	dc03      	bgt.n	800496a <_dtoa_r+0xa52>
 8004962:	d1e1      	bne.n	8004928 <_dtoa_r+0xa10>
 8004964:	f018 0f01 	tst.w	r8, #1
 8004968:	d0de      	beq.n	8004928 <_dtoa_r+0xa10>
 800496a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800496e:	d1d8      	bne.n	8004922 <_dtoa_r+0xa0a>
 8004970:	9a00      	ldr	r2, [sp, #0]
 8004972:	2339      	movs	r3, #57	@ 0x39
 8004974:	7013      	strb	r3, [r2, #0]
 8004976:	4633      	mov	r3, r6
 8004978:	461e      	mov	r6, r3
 800497a:	3b01      	subs	r3, #1
 800497c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004980:	2a39      	cmp	r2, #57	@ 0x39
 8004982:	d052      	beq.n	8004a2a <_dtoa_r+0xb12>
 8004984:	3201      	adds	r2, #1
 8004986:	701a      	strb	r2, [r3, #0]
 8004988:	e612      	b.n	80045b0 <_dtoa_r+0x698>
 800498a:	2a00      	cmp	r2, #0
 800498c:	dd07      	ble.n	800499e <_dtoa_r+0xa86>
 800498e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004992:	d0ed      	beq.n	8004970 <_dtoa_r+0xa58>
 8004994:	9a00      	ldr	r2, [sp, #0]
 8004996:	f108 0301 	add.w	r3, r8, #1
 800499a:	7013      	strb	r3, [r2, #0]
 800499c:	e608      	b.n	80045b0 <_dtoa_r+0x698>
 800499e:	9b07      	ldr	r3, [sp, #28]
 80049a0:	9a07      	ldr	r2, [sp, #28]
 80049a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80049a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d028      	beq.n	80049fe <_dtoa_r+0xae6>
 80049ac:	4649      	mov	r1, r9
 80049ae:	2300      	movs	r3, #0
 80049b0:	220a      	movs	r2, #10
 80049b2:	4658      	mov	r0, fp
 80049b4:	f000 f9d6 	bl	8004d64 <__multadd>
 80049b8:	42af      	cmp	r7, r5
 80049ba:	4681      	mov	r9, r0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	f04f 020a 	mov.w	r2, #10
 80049c4:	4639      	mov	r1, r7
 80049c6:	4658      	mov	r0, fp
 80049c8:	d107      	bne.n	80049da <_dtoa_r+0xac2>
 80049ca:	f000 f9cb 	bl	8004d64 <__multadd>
 80049ce:	4607      	mov	r7, r0
 80049d0:	4605      	mov	r5, r0
 80049d2:	9b07      	ldr	r3, [sp, #28]
 80049d4:	3301      	adds	r3, #1
 80049d6:	9307      	str	r3, [sp, #28]
 80049d8:	e774      	b.n	80048c4 <_dtoa_r+0x9ac>
 80049da:	f000 f9c3 	bl	8004d64 <__multadd>
 80049de:	4629      	mov	r1, r5
 80049e0:	4607      	mov	r7, r0
 80049e2:	2300      	movs	r3, #0
 80049e4:	220a      	movs	r2, #10
 80049e6:	4658      	mov	r0, fp
 80049e8:	f000 f9bc 	bl	8004d64 <__multadd>
 80049ec:	4605      	mov	r5, r0
 80049ee:	e7f0      	b.n	80049d2 <_dtoa_r+0xaba>
 80049f0:	9b00      	ldr	r3, [sp, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	bfcc      	ite	gt
 80049f6:	461e      	movgt	r6, r3
 80049f8:	2601      	movle	r6, #1
 80049fa:	4456      	add	r6, sl
 80049fc:	2700      	movs	r7, #0
 80049fe:	4649      	mov	r1, r9
 8004a00:	2201      	movs	r2, #1
 8004a02:	4658      	mov	r0, fp
 8004a04:	f000 fb5a 	bl	80050bc <__lshift>
 8004a08:	4621      	mov	r1, r4
 8004a0a:	4681      	mov	r9, r0
 8004a0c:	f000 fbc2 	bl	8005194 <__mcmp>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	dcb0      	bgt.n	8004976 <_dtoa_r+0xa5e>
 8004a14:	d102      	bne.n	8004a1c <_dtoa_r+0xb04>
 8004a16:	f018 0f01 	tst.w	r8, #1
 8004a1a:	d1ac      	bne.n	8004976 <_dtoa_r+0xa5e>
 8004a1c:	4633      	mov	r3, r6
 8004a1e:	461e      	mov	r6, r3
 8004a20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a24:	2a30      	cmp	r2, #48	@ 0x30
 8004a26:	d0fa      	beq.n	8004a1e <_dtoa_r+0xb06>
 8004a28:	e5c2      	b.n	80045b0 <_dtoa_r+0x698>
 8004a2a:	459a      	cmp	sl, r3
 8004a2c:	d1a4      	bne.n	8004978 <_dtoa_r+0xa60>
 8004a2e:	9b04      	ldr	r3, [sp, #16]
 8004a30:	3301      	adds	r3, #1
 8004a32:	9304      	str	r3, [sp, #16]
 8004a34:	2331      	movs	r3, #49	@ 0x31
 8004a36:	f88a 3000 	strb.w	r3, [sl]
 8004a3a:	e5b9      	b.n	80045b0 <_dtoa_r+0x698>
 8004a3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004a3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004a9c <_dtoa_r+0xb84>
 8004a42:	b11b      	cbz	r3, 8004a4c <_dtoa_r+0xb34>
 8004a44:	f10a 0308 	add.w	r3, sl, #8
 8004a48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	4650      	mov	r0, sl
 8004a4e:	b019      	add	sp, #100	@ 0x64
 8004a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	f77f ae37 	ble.w	80046ca <_dtoa_r+0x7b2>
 8004a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a60:	2001      	movs	r0, #1
 8004a62:	e655      	b.n	8004710 <_dtoa_r+0x7f8>
 8004a64:	9b00      	ldr	r3, [sp, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f77f aed6 	ble.w	8004818 <_dtoa_r+0x900>
 8004a6c:	4656      	mov	r6, sl
 8004a6e:	4621      	mov	r1, r4
 8004a70:	4648      	mov	r0, r9
 8004a72:	f7ff f9c8 	bl	8003e06 <quorem>
 8004a76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004a7a:	f806 8b01 	strb.w	r8, [r6], #1
 8004a7e:	9b00      	ldr	r3, [sp, #0]
 8004a80:	eba6 020a 	sub.w	r2, r6, sl
 8004a84:	4293      	cmp	r3, r2
 8004a86:	ddb3      	ble.n	80049f0 <_dtoa_r+0xad8>
 8004a88:	4649      	mov	r1, r9
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	220a      	movs	r2, #10
 8004a8e:	4658      	mov	r0, fp
 8004a90:	f000 f968 	bl	8004d64 <__multadd>
 8004a94:	4681      	mov	r9, r0
 8004a96:	e7ea      	b.n	8004a6e <_dtoa_r+0xb56>
 8004a98:	08005c28 	.word	0x08005c28
 8004a9c:	08005bac 	.word	0x08005bac

08004aa0 <_free_r>:
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	4605      	mov	r5, r0
 8004aa4:	2900      	cmp	r1, #0
 8004aa6:	d041      	beq.n	8004b2c <_free_r+0x8c>
 8004aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aac:	1f0c      	subs	r4, r1, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	bfb8      	it	lt
 8004ab2:	18e4      	addlt	r4, r4, r3
 8004ab4:	f000 f8e8 	bl	8004c88 <__malloc_lock>
 8004ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b30 <_free_r+0x90>)
 8004aba:	6813      	ldr	r3, [r2, #0]
 8004abc:	b933      	cbnz	r3, 8004acc <_free_r+0x2c>
 8004abe:	6063      	str	r3, [r4, #4]
 8004ac0:	6014      	str	r4, [r2, #0]
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ac8:	f000 b8e4 	b.w	8004c94 <__malloc_unlock>
 8004acc:	42a3      	cmp	r3, r4
 8004ace:	d908      	bls.n	8004ae2 <_free_r+0x42>
 8004ad0:	6820      	ldr	r0, [r4, #0]
 8004ad2:	1821      	adds	r1, r4, r0
 8004ad4:	428b      	cmp	r3, r1
 8004ad6:	bf01      	itttt	eq
 8004ad8:	6819      	ldreq	r1, [r3, #0]
 8004ada:	685b      	ldreq	r3, [r3, #4]
 8004adc:	1809      	addeq	r1, r1, r0
 8004ade:	6021      	streq	r1, [r4, #0]
 8004ae0:	e7ed      	b.n	8004abe <_free_r+0x1e>
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	b10b      	cbz	r3, 8004aec <_free_r+0x4c>
 8004ae8:	42a3      	cmp	r3, r4
 8004aea:	d9fa      	bls.n	8004ae2 <_free_r+0x42>
 8004aec:	6811      	ldr	r1, [r2, #0]
 8004aee:	1850      	adds	r0, r2, r1
 8004af0:	42a0      	cmp	r0, r4
 8004af2:	d10b      	bne.n	8004b0c <_free_r+0x6c>
 8004af4:	6820      	ldr	r0, [r4, #0]
 8004af6:	4401      	add	r1, r0
 8004af8:	1850      	adds	r0, r2, r1
 8004afa:	4283      	cmp	r3, r0
 8004afc:	6011      	str	r1, [r2, #0]
 8004afe:	d1e0      	bne.n	8004ac2 <_free_r+0x22>
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	6053      	str	r3, [r2, #4]
 8004b06:	4408      	add	r0, r1
 8004b08:	6010      	str	r0, [r2, #0]
 8004b0a:	e7da      	b.n	8004ac2 <_free_r+0x22>
 8004b0c:	d902      	bls.n	8004b14 <_free_r+0x74>
 8004b0e:	230c      	movs	r3, #12
 8004b10:	602b      	str	r3, [r5, #0]
 8004b12:	e7d6      	b.n	8004ac2 <_free_r+0x22>
 8004b14:	6820      	ldr	r0, [r4, #0]
 8004b16:	1821      	adds	r1, r4, r0
 8004b18:	428b      	cmp	r3, r1
 8004b1a:	bf04      	itt	eq
 8004b1c:	6819      	ldreq	r1, [r3, #0]
 8004b1e:	685b      	ldreq	r3, [r3, #4]
 8004b20:	6063      	str	r3, [r4, #4]
 8004b22:	bf04      	itt	eq
 8004b24:	1809      	addeq	r1, r1, r0
 8004b26:	6021      	streq	r1, [r4, #0]
 8004b28:	6054      	str	r4, [r2, #4]
 8004b2a:	e7ca      	b.n	8004ac2 <_free_r+0x22>
 8004b2c:	bd38      	pop	{r3, r4, r5, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000424 	.word	0x20000424

08004b34 <malloc>:
 8004b34:	4b02      	ldr	r3, [pc, #8]	@ (8004b40 <malloc+0xc>)
 8004b36:	4601      	mov	r1, r0
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	f000 b825 	b.w	8004b88 <_malloc_r>
 8004b3e:	bf00      	nop
 8004b40:	20000018 	.word	0x20000018

08004b44 <sbrk_aligned>:
 8004b44:	b570      	push	{r4, r5, r6, lr}
 8004b46:	4e0f      	ldr	r6, [pc, #60]	@ (8004b84 <sbrk_aligned+0x40>)
 8004b48:	460c      	mov	r4, r1
 8004b4a:	6831      	ldr	r1, [r6, #0]
 8004b4c:	4605      	mov	r5, r0
 8004b4e:	b911      	cbnz	r1, 8004b56 <sbrk_aligned+0x12>
 8004b50:	f000 fcd4 	bl	80054fc <_sbrk_r>
 8004b54:	6030      	str	r0, [r6, #0]
 8004b56:	4621      	mov	r1, r4
 8004b58:	4628      	mov	r0, r5
 8004b5a:	f000 fccf 	bl	80054fc <_sbrk_r>
 8004b5e:	1c43      	adds	r3, r0, #1
 8004b60:	d103      	bne.n	8004b6a <sbrk_aligned+0x26>
 8004b62:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004b66:	4620      	mov	r0, r4
 8004b68:	bd70      	pop	{r4, r5, r6, pc}
 8004b6a:	1cc4      	adds	r4, r0, #3
 8004b6c:	f024 0403 	bic.w	r4, r4, #3
 8004b70:	42a0      	cmp	r0, r4
 8004b72:	d0f8      	beq.n	8004b66 <sbrk_aligned+0x22>
 8004b74:	1a21      	subs	r1, r4, r0
 8004b76:	4628      	mov	r0, r5
 8004b78:	f000 fcc0 	bl	80054fc <_sbrk_r>
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	d1f2      	bne.n	8004b66 <sbrk_aligned+0x22>
 8004b80:	e7ef      	b.n	8004b62 <sbrk_aligned+0x1e>
 8004b82:	bf00      	nop
 8004b84:	20000420 	.word	0x20000420

08004b88 <_malloc_r>:
 8004b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b8c:	1ccd      	adds	r5, r1, #3
 8004b8e:	f025 0503 	bic.w	r5, r5, #3
 8004b92:	3508      	adds	r5, #8
 8004b94:	2d0c      	cmp	r5, #12
 8004b96:	bf38      	it	cc
 8004b98:	250c      	movcc	r5, #12
 8004b9a:	2d00      	cmp	r5, #0
 8004b9c:	4606      	mov	r6, r0
 8004b9e:	db01      	blt.n	8004ba4 <_malloc_r+0x1c>
 8004ba0:	42a9      	cmp	r1, r5
 8004ba2:	d904      	bls.n	8004bae <_malloc_r+0x26>
 8004ba4:	230c      	movs	r3, #12
 8004ba6:	6033      	str	r3, [r6, #0]
 8004ba8:	2000      	movs	r0, #0
 8004baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c84 <_malloc_r+0xfc>
 8004bb2:	f000 f869 	bl	8004c88 <__malloc_lock>
 8004bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8004bba:	461c      	mov	r4, r3
 8004bbc:	bb44      	cbnz	r4, 8004c10 <_malloc_r+0x88>
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	f7ff ffbf 	bl	8004b44 <sbrk_aligned>
 8004bc6:	1c43      	adds	r3, r0, #1
 8004bc8:	4604      	mov	r4, r0
 8004bca:	d158      	bne.n	8004c7e <_malloc_r+0xf6>
 8004bcc:	f8d8 4000 	ldr.w	r4, [r8]
 8004bd0:	4627      	mov	r7, r4
 8004bd2:	2f00      	cmp	r7, #0
 8004bd4:	d143      	bne.n	8004c5e <_malloc_r+0xd6>
 8004bd6:	2c00      	cmp	r4, #0
 8004bd8:	d04b      	beq.n	8004c72 <_malloc_r+0xea>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	4639      	mov	r1, r7
 8004bde:	4630      	mov	r0, r6
 8004be0:	eb04 0903 	add.w	r9, r4, r3
 8004be4:	f000 fc8a 	bl	80054fc <_sbrk_r>
 8004be8:	4581      	cmp	r9, r0
 8004bea:	d142      	bne.n	8004c72 <_malloc_r+0xea>
 8004bec:	6821      	ldr	r1, [r4, #0]
 8004bee:	1a6d      	subs	r5, r5, r1
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	4630      	mov	r0, r6
 8004bf4:	f7ff ffa6 	bl	8004b44 <sbrk_aligned>
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	d03a      	beq.n	8004c72 <_malloc_r+0xea>
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	442b      	add	r3, r5
 8004c00:	6023      	str	r3, [r4, #0]
 8004c02:	f8d8 3000 	ldr.w	r3, [r8]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	bb62      	cbnz	r2, 8004c64 <_malloc_r+0xdc>
 8004c0a:	f8c8 7000 	str.w	r7, [r8]
 8004c0e:	e00f      	b.n	8004c30 <_malloc_r+0xa8>
 8004c10:	6822      	ldr	r2, [r4, #0]
 8004c12:	1b52      	subs	r2, r2, r5
 8004c14:	d420      	bmi.n	8004c58 <_malloc_r+0xd0>
 8004c16:	2a0b      	cmp	r2, #11
 8004c18:	d917      	bls.n	8004c4a <_malloc_r+0xc2>
 8004c1a:	1961      	adds	r1, r4, r5
 8004c1c:	42a3      	cmp	r3, r4
 8004c1e:	6025      	str	r5, [r4, #0]
 8004c20:	bf18      	it	ne
 8004c22:	6059      	strne	r1, [r3, #4]
 8004c24:	6863      	ldr	r3, [r4, #4]
 8004c26:	bf08      	it	eq
 8004c28:	f8c8 1000 	streq.w	r1, [r8]
 8004c2c:	5162      	str	r2, [r4, r5]
 8004c2e:	604b      	str	r3, [r1, #4]
 8004c30:	4630      	mov	r0, r6
 8004c32:	f000 f82f 	bl	8004c94 <__malloc_unlock>
 8004c36:	f104 000b 	add.w	r0, r4, #11
 8004c3a:	1d23      	adds	r3, r4, #4
 8004c3c:	f020 0007 	bic.w	r0, r0, #7
 8004c40:	1ac2      	subs	r2, r0, r3
 8004c42:	bf1c      	itt	ne
 8004c44:	1a1b      	subne	r3, r3, r0
 8004c46:	50a3      	strne	r3, [r4, r2]
 8004c48:	e7af      	b.n	8004baa <_malloc_r+0x22>
 8004c4a:	6862      	ldr	r2, [r4, #4]
 8004c4c:	42a3      	cmp	r3, r4
 8004c4e:	bf0c      	ite	eq
 8004c50:	f8c8 2000 	streq.w	r2, [r8]
 8004c54:	605a      	strne	r2, [r3, #4]
 8004c56:	e7eb      	b.n	8004c30 <_malloc_r+0xa8>
 8004c58:	4623      	mov	r3, r4
 8004c5a:	6864      	ldr	r4, [r4, #4]
 8004c5c:	e7ae      	b.n	8004bbc <_malloc_r+0x34>
 8004c5e:	463c      	mov	r4, r7
 8004c60:	687f      	ldr	r7, [r7, #4]
 8004c62:	e7b6      	b.n	8004bd2 <_malloc_r+0x4a>
 8004c64:	461a      	mov	r2, r3
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	42a3      	cmp	r3, r4
 8004c6a:	d1fb      	bne.n	8004c64 <_malloc_r+0xdc>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	6053      	str	r3, [r2, #4]
 8004c70:	e7de      	b.n	8004c30 <_malloc_r+0xa8>
 8004c72:	230c      	movs	r3, #12
 8004c74:	6033      	str	r3, [r6, #0]
 8004c76:	4630      	mov	r0, r6
 8004c78:	f000 f80c 	bl	8004c94 <__malloc_unlock>
 8004c7c:	e794      	b.n	8004ba8 <_malloc_r+0x20>
 8004c7e:	6005      	str	r5, [r0, #0]
 8004c80:	e7d6      	b.n	8004c30 <_malloc_r+0xa8>
 8004c82:	bf00      	nop
 8004c84:	20000424 	.word	0x20000424

08004c88 <__malloc_lock>:
 8004c88:	4801      	ldr	r0, [pc, #4]	@ (8004c90 <__malloc_lock+0x8>)
 8004c8a:	f7ff b8ba 	b.w	8003e02 <__retarget_lock_acquire_recursive>
 8004c8e:	bf00      	nop
 8004c90:	2000041c 	.word	0x2000041c

08004c94 <__malloc_unlock>:
 8004c94:	4801      	ldr	r0, [pc, #4]	@ (8004c9c <__malloc_unlock+0x8>)
 8004c96:	f7ff b8b5 	b.w	8003e04 <__retarget_lock_release_recursive>
 8004c9a:	bf00      	nop
 8004c9c:	2000041c 	.word	0x2000041c

08004ca0 <_Balloc>:
 8004ca0:	b570      	push	{r4, r5, r6, lr}
 8004ca2:	69c6      	ldr	r6, [r0, #28]
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	460d      	mov	r5, r1
 8004ca8:	b976      	cbnz	r6, 8004cc8 <_Balloc+0x28>
 8004caa:	2010      	movs	r0, #16
 8004cac:	f7ff ff42 	bl	8004b34 <malloc>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	61e0      	str	r0, [r4, #28]
 8004cb4:	b920      	cbnz	r0, 8004cc0 <_Balloc+0x20>
 8004cb6:	4b18      	ldr	r3, [pc, #96]	@ (8004d18 <_Balloc+0x78>)
 8004cb8:	4818      	ldr	r0, [pc, #96]	@ (8004d1c <_Balloc+0x7c>)
 8004cba:	216b      	movs	r1, #107	@ 0x6b
 8004cbc:	f000 fc3c 	bl	8005538 <__assert_func>
 8004cc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004cc4:	6006      	str	r6, [r0, #0]
 8004cc6:	60c6      	str	r6, [r0, #12]
 8004cc8:	69e6      	ldr	r6, [r4, #28]
 8004cca:	68f3      	ldr	r3, [r6, #12]
 8004ccc:	b183      	cbz	r3, 8004cf0 <_Balloc+0x50>
 8004cce:	69e3      	ldr	r3, [r4, #28]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004cd6:	b9b8      	cbnz	r0, 8004d08 <_Balloc+0x68>
 8004cd8:	2101      	movs	r1, #1
 8004cda:	fa01 f605 	lsl.w	r6, r1, r5
 8004cde:	1d72      	adds	r2, r6, #5
 8004ce0:	0092      	lsls	r2, r2, #2
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f000 fc46 	bl	8005574 <_calloc_r>
 8004ce8:	b160      	cbz	r0, 8004d04 <_Balloc+0x64>
 8004cea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004cee:	e00e      	b.n	8004d0e <_Balloc+0x6e>
 8004cf0:	2221      	movs	r2, #33	@ 0x21
 8004cf2:	2104      	movs	r1, #4
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	f000 fc3d 	bl	8005574 <_calloc_r>
 8004cfa:	69e3      	ldr	r3, [r4, #28]
 8004cfc:	60f0      	str	r0, [r6, #12]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e4      	bne.n	8004cce <_Balloc+0x2e>
 8004d04:	2000      	movs	r0, #0
 8004d06:	bd70      	pop	{r4, r5, r6, pc}
 8004d08:	6802      	ldr	r2, [r0, #0]
 8004d0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004d14:	e7f7      	b.n	8004d06 <_Balloc+0x66>
 8004d16:	bf00      	nop
 8004d18:	08005bb9 	.word	0x08005bb9
 8004d1c:	08005c39 	.word	0x08005c39

08004d20 <_Bfree>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	69c6      	ldr	r6, [r0, #28]
 8004d24:	4605      	mov	r5, r0
 8004d26:	460c      	mov	r4, r1
 8004d28:	b976      	cbnz	r6, 8004d48 <_Bfree+0x28>
 8004d2a:	2010      	movs	r0, #16
 8004d2c:	f7ff ff02 	bl	8004b34 <malloc>
 8004d30:	4602      	mov	r2, r0
 8004d32:	61e8      	str	r0, [r5, #28]
 8004d34:	b920      	cbnz	r0, 8004d40 <_Bfree+0x20>
 8004d36:	4b09      	ldr	r3, [pc, #36]	@ (8004d5c <_Bfree+0x3c>)
 8004d38:	4809      	ldr	r0, [pc, #36]	@ (8004d60 <_Bfree+0x40>)
 8004d3a:	218f      	movs	r1, #143	@ 0x8f
 8004d3c:	f000 fbfc 	bl	8005538 <__assert_func>
 8004d40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d44:	6006      	str	r6, [r0, #0]
 8004d46:	60c6      	str	r6, [r0, #12]
 8004d48:	b13c      	cbz	r4, 8004d5a <_Bfree+0x3a>
 8004d4a:	69eb      	ldr	r3, [r5, #28]
 8004d4c:	6862      	ldr	r2, [r4, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d54:	6021      	str	r1, [r4, #0]
 8004d56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004d5a:	bd70      	pop	{r4, r5, r6, pc}
 8004d5c:	08005bb9 	.word	0x08005bb9
 8004d60:	08005c39 	.word	0x08005c39

08004d64 <__multadd>:
 8004d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d68:	690d      	ldr	r5, [r1, #16]
 8004d6a:	4607      	mov	r7, r0
 8004d6c:	460c      	mov	r4, r1
 8004d6e:	461e      	mov	r6, r3
 8004d70:	f101 0c14 	add.w	ip, r1, #20
 8004d74:	2000      	movs	r0, #0
 8004d76:	f8dc 3000 	ldr.w	r3, [ip]
 8004d7a:	b299      	uxth	r1, r3
 8004d7c:	fb02 6101 	mla	r1, r2, r1, r6
 8004d80:	0c1e      	lsrs	r6, r3, #16
 8004d82:	0c0b      	lsrs	r3, r1, #16
 8004d84:	fb02 3306 	mla	r3, r2, r6, r3
 8004d88:	b289      	uxth	r1, r1
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004d90:	4285      	cmp	r5, r0
 8004d92:	f84c 1b04 	str.w	r1, [ip], #4
 8004d96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004d9a:	dcec      	bgt.n	8004d76 <__multadd+0x12>
 8004d9c:	b30e      	cbz	r6, 8004de2 <__multadd+0x7e>
 8004d9e:	68a3      	ldr	r3, [r4, #8]
 8004da0:	42ab      	cmp	r3, r5
 8004da2:	dc19      	bgt.n	8004dd8 <__multadd+0x74>
 8004da4:	6861      	ldr	r1, [r4, #4]
 8004da6:	4638      	mov	r0, r7
 8004da8:	3101      	adds	r1, #1
 8004daa:	f7ff ff79 	bl	8004ca0 <_Balloc>
 8004dae:	4680      	mov	r8, r0
 8004db0:	b928      	cbnz	r0, 8004dbe <__multadd+0x5a>
 8004db2:	4602      	mov	r2, r0
 8004db4:	4b0c      	ldr	r3, [pc, #48]	@ (8004de8 <__multadd+0x84>)
 8004db6:	480d      	ldr	r0, [pc, #52]	@ (8004dec <__multadd+0x88>)
 8004db8:	21ba      	movs	r1, #186	@ 0xba
 8004dba:	f000 fbbd 	bl	8005538 <__assert_func>
 8004dbe:	6922      	ldr	r2, [r4, #16]
 8004dc0:	3202      	adds	r2, #2
 8004dc2:	f104 010c 	add.w	r1, r4, #12
 8004dc6:	0092      	lsls	r2, r2, #2
 8004dc8:	300c      	adds	r0, #12
 8004dca:	f000 fba7 	bl	800551c <memcpy>
 8004dce:	4621      	mov	r1, r4
 8004dd0:	4638      	mov	r0, r7
 8004dd2:	f7ff ffa5 	bl	8004d20 <_Bfree>
 8004dd6:	4644      	mov	r4, r8
 8004dd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ddc:	3501      	adds	r5, #1
 8004dde:	615e      	str	r6, [r3, #20]
 8004de0:	6125      	str	r5, [r4, #16]
 8004de2:	4620      	mov	r0, r4
 8004de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004de8:	08005c28 	.word	0x08005c28
 8004dec:	08005c39 	.word	0x08005c39

08004df0 <__hi0bits>:
 8004df0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004df4:	4603      	mov	r3, r0
 8004df6:	bf36      	itet	cc
 8004df8:	0403      	lslcc	r3, r0, #16
 8004dfa:	2000      	movcs	r0, #0
 8004dfc:	2010      	movcc	r0, #16
 8004dfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e02:	bf3c      	itt	cc
 8004e04:	021b      	lslcc	r3, r3, #8
 8004e06:	3008      	addcc	r0, #8
 8004e08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e0c:	bf3c      	itt	cc
 8004e0e:	011b      	lslcc	r3, r3, #4
 8004e10:	3004      	addcc	r0, #4
 8004e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e16:	bf3c      	itt	cc
 8004e18:	009b      	lslcc	r3, r3, #2
 8004e1a:	3002      	addcc	r0, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	db05      	blt.n	8004e2c <__hi0bits+0x3c>
 8004e20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004e24:	f100 0001 	add.w	r0, r0, #1
 8004e28:	bf08      	it	eq
 8004e2a:	2020      	moveq	r0, #32
 8004e2c:	4770      	bx	lr

08004e2e <__lo0bits>:
 8004e2e:	6803      	ldr	r3, [r0, #0]
 8004e30:	4602      	mov	r2, r0
 8004e32:	f013 0007 	ands.w	r0, r3, #7
 8004e36:	d00b      	beq.n	8004e50 <__lo0bits+0x22>
 8004e38:	07d9      	lsls	r1, r3, #31
 8004e3a:	d421      	bmi.n	8004e80 <__lo0bits+0x52>
 8004e3c:	0798      	lsls	r0, r3, #30
 8004e3e:	bf49      	itett	mi
 8004e40:	085b      	lsrmi	r3, r3, #1
 8004e42:	089b      	lsrpl	r3, r3, #2
 8004e44:	2001      	movmi	r0, #1
 8004e46:	6013      	strmi	r3, [r2, #0]
 8004e48:	bf5c      	itt	pl
 8004e4a:	6013      	strpl	r3, [r2, #0]
 8004e4c:	2002      	movpl	r0, #2
 8004e4e:	4770      	bx	lr
 8004e50:	b299      	uxth	r1, r3
 8004e52:	b909      	cbnz	r1, 8004e58 <__lo0bits+0x2a>
 8004e54:	0c1b      	lsrs	r3, r3, #16
 8004e56:	2010      	movs	r0, #16
 8004e58:	b2d9      	uxtb	r1, r3
 8004e5a:	b909      	cbnz	r1, 8004e60 <__lo0bits+0x32>
 8004e5c:	3008      	adds	r0, #8
 8004e5e:	0a1b      	lsrs	r3, r3, #8
 8004e60:	0719      	lsls	r1, r3, #28
 8004e62:	bf04      	itt	eq
 8004e64:	091b      	lsreq	r3, r3, #4
 8004e66:	3004      	addeq	r0, #4
 8004e68:	0799      	lsls	r1, r3, #30
 8004e6a:	bf04      	itt	eq
 8004e6c:	089b      	lsreq	r3, r3, #2
 8004e6e:	3002      	addeq	r0, #2
 8004e70:	07d9      	lsls	r1, r3, #31
 8004e72:	d403      	bmi.n	8004e7c <__lo0bits+0x4e>
 8004e74:	085b      	lsrs	r3, r3, #1
 8004e76:	f100 0001 	add.w	r0, r0, #1
 8004e7a:	d003      	beq.n	8004e84 <__lo0bits+0x56>
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	4770      	bx	lr
 8004e80:	2000      	movs	r0, #0
 8004e82:	4770      	bx	lr
 8004e84:	2020      	movs	r0, #32
 8004e86:	4770      	bx	lr

08004e88 <__i2b>:
 8004e88:	b510      	push	{r4, lr}
 8004e8a:	460c      	mov	r4, r1
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	f7ff ff07 	bl	8004ca0 <_Balloc>
 8004e92:	4602      	mov	r2, r0
 8004e94:	b928      	cbnz	r0, 8004ea2 <__i2b+0x1a>
 8004e96:	4b05      	ldr	r3, [pc, #20]	@ (8004eac <__i2b+0x24>)
 8004e98:	4805      	ldr	r0, [pc, #20]	@ (8004eb0 <__i2b+0x28>)
 8004e9a:	f240 1145 	movw	r1, #325	@ 0x145
 8004e9e:	f000 fb4b 	bl	8005538 <__assert_func>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	6144      	str	r4, [r0, #20]
 8004ea6:	6103      	str	r3, [r0, #16]
 8004ea8:	bd10      	pop	{r4, pc}
 8004eaa:	bf00      	nop
 8004eac:	08005c28 	.word	0x08005c28
 8004eb0:	08005c39 	.word	0x08005c39

08004eb4 <__multiply>:
 8004eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb8:	4614      	mov	r4, r2
 8004eba:	690a      	ldr	r2, [r1, #16]
 8004ebc:	6923      	ldr	r3, [r4, #16]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	bfa8      	it	ge
 8004ec2:	4623      	movge	r3, r4
 8004ec4:	460f      	mov	r7, r1
 8004ec6:	bfa4      	itt	ge
 8004ec8:	460c      	movge	r4, r1
 8004eca:	461f      	movge	r7, r3
 8004ecc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004ed0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004ed4:	68a3      	ldr	r3, [r4, #8]
 8004ed6:	6861      	ldr	r1, [r4, #4]
 8004ed8:	eb0a 0609 	add.w	r6, sl, r9
 8004edc:	42b3      	cmp	r3, r6
 8004ede:	b085      	sub	sp, #20
 8004ee0:	bfb8      	it	lt
 8004ee2:	3101      	addlt	r1, #1
 8004ee4:	f7ff fedc 	bl	8004ca0 <_Balloc>
 8004ee8:	b930      	cbnz	r0, 8004ef8 <__multiply+0x44>
 8004eea:	4602      	mov	r2, r0
 8004eec:	4b44      	ldr	r3, [pc, #272]	@ (8005000 <__multiply+0x14c>)
 8004eee:	4845      	ldr	r0, [pc, #276]	@ (8005004 <__multiply+0x150>)
 8004ef0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004ef4:	f000 fb20 	bl	8005538 <__assert_func>
 8004ef8:	f100 0514 	add.w	r5, r0, #20
 8004efc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004f00:	462b      	mov	r3, r5
 8004f02:	2200      	movs	r2, #0
 8004f04:	4543      	cmp	r3, r8
 8004f06:	d321      	bcc.n	8004f4c <__multiply+0x98>
 8004f08:	f107 0114 	add.w	r1, r7, #20
 8004f0c:	f104 0214 	add.w	r2, r4, #20
 8004f10:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004f14:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004f18:	9302      	str	r3, [sp, #8]
 8004f1a:	1b13      	subs	r3, r2, r4
 8004f1c:	3b15      	subs	r3, #21
 8004f1e:	f023 0303 	bic.w	r3, r3, #3
 8004f22:	3304      	adds	r3, #4
 8004f24:	f104 0715 	add.w	r7, r4, #21
 8004f28:	42ba      	cmp	r2, r7
 8004f2a:	bf38      	it	cc
 8004f2c:	2304      	movcc	r3, #4
 8004f2e:	9301      	str	r3, [sp, #4]
 8004f30:	9b02      	ldr	r3, [sp, #8]
 8004f32:	9103      	str	r1, [sp, #12]
 8004f34:	428b      	cmp	r3, r1
 8004f36:	d80c      	bhi.n	8004f52 <__multiply+0x9e>
 8004f38:	2e00      	cmp	r6, #0
 8004f3a:	dd03      	ble.n	8004f44 <__multiply+0x90>
 8004f3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d05b      	beq.n	8004ffc <__multiply+0x148>
 8004f44:	6106      	str	r6, [r0, #16]
 8004f46:	b005      	add	sp, #20
 8004f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f4c:	f843 2b04 	str.w	r2, [r3], #4
 8004f50:	e7d8      	b.n	8004f04 <__multiply+0x50>
 8004f52:	f8b1 a000 	ldrh.w	sl, [r1]
 8004f56:	f1ba 0f00 	cmp.w	sl, #0
 8004f5a:	d024      	beq.n	8004fa6 <__multiply+0xf2>
 8004f5c:	f104 0e14 	add.w	lr, r4, #20
 8004f60:	46a9      	mov	r9, r5
 8004f62:	f04f 0c00 	mov.w	ip, #0
 8004f66:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004f6a:	f8d9 3000 	ldr.w	r3, [r9]
 8004f6e:	fa1f fb87 	uxth.w	fp, r7
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	fb0a 330b 	mla	r3, sl, fp, r3
 8004f78:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8004f7c:	f8d9 7000 	ldr.w	r7, [r9]
 8004f80:	4463      	add	r3, ip
 8004f82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004f86:	fb0a c70b 	mla	r7, sl, fp, ip
 8004f8a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004f94:	4572      	cmp	r2, lr
 8004f96:	f849 3b04 	str.w	r3, [r9], #4
 8004f9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004f9e:	d8e2      	bhi.n	8004f66 <__multiply+0xb2>
 8004fa0:	9b01      	ldr	r3, [sp, #4]
 8004fa2:	f845 c003 	str.w	ip, [r5, r3]
 8004fa6:	9b03      	ldr	r3, [sp, #12]
 8004fa8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004fac:	3104      	adds	r1, #4
 8004fae:	f1b9 0f00 	cmp.w	r9, #0
 8004fb2:	d021      	beq.n	8004ff8 <__multiply+0x144>
 8004fb4:	682b      	ldr	r3, [r5, #0]
 8004fb6:	f104 0c14 	add.w	ip, r4, #20
 8004fba:	46ae      	mov	lr, r5
 8004fbc:	f04f 0a00 	mov.w	sl, #0
 8004fc0:	f8bc b000 	ldrh.w	fp, [ip]
 8004fc4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004fc8:	fb09 770b 	mla	r7, r9, fp, r7
 8004fcc:	4457      	add	r7, sl
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004fd4:	f84e 3b04 	str.w	r3, [lr], #4
 8004fd8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004fdc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004fe0:	f8be 3000 	ldrh.w	r3, [lr]
 8004fe4:	fb09 330a 	mla	r3, r9, sl, r3
 8004fe8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004fec:	4562      	cmp	r2, ip
 8004fee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004ff2:	d8e5      	bhi.n	8004fc0 <__multiply+0x10c>
 8004ff4:	9f01      	ldr	r7, [sp, #4]
 8004ff6:	51eb      	str	r3, [r5, r7]
 8004ff8:	3504      	adds	r5, #4
 8004ffa:	e799      	b.n	8004f30 <__multiply+0x7c>
 8004ffc:	3e01      	subs	r6, #1
 8004ffe:	e79b      	b.n	8004f38 <__multiply+0x84>
 8005000:	08005c28 	.word	0x08005c28
 8005004:	08005c39 	.word	0x08005c39

08005008 <__pow5mult>:
 8005008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800500c:	4615      	mov	r5, r2
 800500e:	f012 0203 	ands.w	r2, r2, #3
 8005012:	4607      	mov	r7, r0
 8005014:	460e      	mov	r6, r1
 8005016:	d007      	beq.n	8005028 <__pow5mult+0x20>
 8005018:	4c25      	ldr	r4, [pc, #148]	@ (80050b0 <__pow5mult+0xa8>)
 800501a:	3a01      	subs	r2, #1
 800501c:	2300      	movs	r3, #0
 800501e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005022:	f7ff fe9f 	bl	8004d64 <__multadd>
 8005026:	4606      	mov	r6, r0
 8005028:	10ad      	asrs	r5, r5, #2
 800502a:	d03d      	beq.n	80050a8 <__pow5mult+0xa0>
 800502c:	69fc      	ldr	r4, [r7, #28]
 800502e:	b97c      	cbnz	r4, 8005050 <__pow5mult+0x48>
 8005030:	2010      	movs	r0, #16
 8005032:	f7ff fd7f 	bl	8004b34 <malloc>
 8005036:	4602      	mov	r2, r0
 8005038:	61f8      	str	r0, [r7, #28]
 800503a:	b928      	cbnz	r0, 8005048 <__pow5mult+0x40>
 800503c:	4b1d      	ldr	r3, [pc, #116]	@ (80050b4 <__pow5mult+0xac>)
 800503e:	481e      	ldr	r0, [pc, #120]	@ (80050b8 <__pow5mult+0xb0>)
 8005040:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005044:	f000 fa78 	bl	8005538 <__assert_func>
 8005048:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800504c:	6004      	str	r4, [r0, #0]
 800504e:	60c4      	str	r4, [r0, #12]
 8005050:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005054:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005058:	b94c      	cbnz	r4, 800506e <__pow5mult+0x66>
 800505a:	f240 2171 	movw	r1, #625	@ 0x271
 800505e:	4638      	mov	r0, r7
 8005060:	f7ff ff12 	bl	8004e88 <__i2b>
 8005064:	2300      	movs	r3, #0
 8005066:	f8c8 0008 	str.w	r0, [r8, #8]
 800506a:	4604      	mov	r4, r0
 800506c:	6003      	str	r3, [r0, #0]
 800506e:	f04f 0900 	mov.w	r9, #0
 8005072:	07eb      	lsls	r3, r5, #31
 8005074:	d50a      	bpl.n	800508c <__pow5mult+0x84>
 8005076:	4631      	mov	r1, r6
 8005078:	4622      	mov	r2, r4
 800507a:	4638      	mov	r0, r7
 800507c:	f7ff ff1a 	bl	8004eb4 <__multiply>
 8005080:	4631      	mov	r1, r6
 8005082:	4680      	mov	r8, r0
 8005084:	4638      	mov	r0, r7
 8005086:	f7ff fe4b 	bl	8004d20 <_Bfree>
 800508a:	4646      	mov	r6, r8
 800508c:	106d      	asrs	r5, r5, #1
 800508e:	d00b      	beq.n	80050a8 <__pow5mult+0xa0>
 8005090:	6820      	ldr	r0, [r4, #0]
 8005092:	b938      	cbnz	r0, 80050a4 <__pow5mult+0x9c>
 8005094:	4622      	mov	r2, r4
 8005096:	4621      	mov	r1, r4
 8005098:	4638      	mov	r0, r7
 800509a:	f7ff ff0b 	bl	8004eb4 <__multiply>
 800509e:	6020      	str	r0, [r4, #0]
 80050a0:	f8c0 9000 	str.w	r9, [r0]
 80050a4:	4604      	mov	r4, r0
 80050a6:	e7e4      	b.n	8005072 <__pow5mult+0x6a>
 80050a8:	4630      	mov	r0, r6
 80050aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ae:	bf00      	nop
 80050b0:	08005c94 	.word	0x08005c94
 80050b4:	08005bb9 	.word	0x08005bb9
 80050b8:	08005c39 	.word	0x08005c39

080050bc <__lshift>:
 80050bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c0:	460c      	mov	r4, r1
 80050c2:	6849      	ldr	r1, [r1, #4]
 80050c4:	6923      	ldr	r3, [r4, #16]
 80050c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80050ca:	68a3      	ldr	r3, [r4, #8]
 80050cc:	4607      	mov	r7, r0
 80050ce:	4691      	mov	r9, r2
 80050d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80050d4:	f108 0601 	add.w	r6, r8, #1
 80050d8:	42b3      	cmp	r3, r6
 80050da:	db0b      	blt.n	80050f4 <__lshift+0x38>
 80050dc:	4638      	mov	r0, r7
 80050de:	f7ff fddf 	bl	8004ca0 <_Balloc>
 80050e2:	4605      	mov	r5, r0
 80050e4:	b948      	cbnz	r0, 80050fa <__lshift+0x3e>
 80050e6:	4602      	mov	r2, r0
 80050e8:	4b28      	ldr	r3, [pc, #160]	@ (800518c <__lshift+0xd0>)
 80050ea:	4829      	ldr	r0, [pc, #164]	@ (8005190 <__lshift+0xd4>)
 80050ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80050f0:	f000 fa22 	bl	8005538 <__assert_func>
 80050f4:	3101      	adds	r1, #1
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	e7ee      	b.n	80050d8 <__lshift+0x1c>
 80050fa:	2300      	movs	r3, #0
 80050fc:	f100 0114 	add.w	r1, r0, #20
 8005100:	f100 0210 	add.w	r2, r0, #16
 8005104:	4618      	mov	r0, r3
 8005106:	4553      	cmp	r3, sl
 8005108:	db33      	blt.n	8005172 <__lshift+0xb6>
 800510a:	6920      	ldr	r0, [r4, #16]
 800510c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005110:	f104 0314 	add.w	r3, r4, #20
 8005114:	f019 091f 	ands.w	r9, r9, #31
 8005118:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800511c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005120:	d02b      	beq.n	800517a <__lshift+0xbe>
 8005122:	f1c9 0e20 	rsb	lr, r9, #32
 8005126:	468a      	mov	sl, r1
 8005128:	2200      	movs	r2, #0
 800512a:	6818      	ldr	r0, [r3, #0]
 800512c:	fa00 f009 	lsl.w	r0, r0, r9
 8005130:	4310      	orrs	r0, r2
 8005132:	f84a 0b04 	str.w	r0, [sl], #4
 8005136:	f853 2b04 	ldr.w	r2, [r3], #4
 800513a:	459c      	cmp	ip, r3
 800513c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005140:	d8f3      	bhi.n	800512a <__lshift+0x6e>
 8005142:	ebac 0304 	sub.w	r3, ip, r4
 8005146:	3b15      	subs	r3, #21
 8005148:	f023 0303 	bic.w	r3, r3, #3
 800514c:	3304      	adds	r3, #4
 800514e:	f104 0015 	add.w	r0, r4, #21
 8005152:	4584      	cmp	ip, r0
 8005154:	bf38      	it	cc
 8005156:	2304      	movcc	r3, #4
 8005158:	50ca      	str	r2, [r1, r3]
 800515a:	b10a      	cbz	r2, 8005160 <__lshift+0xa4>
 800515c:	f108 0602 	add.w	r6, r8, #2
 8005160:	3e01      	subs	r6, #1
 8005162:	4638      	mov	r0, r7
 8005164:	612e      	str	r6, [r5, #16]
 8005166:	4621      	mov	r1, r4
 8005168:	f7ff fdda 	bl	8004d20 <_Bfree>
 800516c:	4628      	mov	r0, r5
 800516e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005172:	f842 0f04 	str.w	r0, [r2, #4]!
 8005176:	3301      	adds	r3, #1
 8005178:	e7c5      	b.n	8005106 <__lshift+0x4a>
 800517a:	3904      	subs	r1, #4
 800517c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005180:	f841 2f04 	str.w	r2, [r1, #4]!
 8005184:	459c      	cmp	ip, r3
 8005186:	d8f9      	bhi.n	800517c <__lshift+0xc0>
 8005188:	e7ea      	b.n	8005160 <__lshift+0xa4>
 800518a:	bf00      	nop
 800518c:	08005c28 	.word	0x08005c28
 8005190:	08005c39 	.word	0x08005c39

08005194 <__mcmp>:
 8005194:	690a      	ldr	r2, [r1, #16]
 8005196:	4603      	mov	r3, r0
 8005198:	6900      	ldr	r0, [r0, #16]
 800519a:	1a80      	subs	r0, r0, r2
 800519c:	b530      	push	{r4, r5, lr}
 800519e:	d10e      	bne.n	80051be <__mcmp+0x2a>
 80051a0:	3314      	adds	r3, #20
 80051a2:	3114      	adds	r1, #20
 80051a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80051a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80051ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80051b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80051b4:	4295      	cmp	r5, r2
 80051b6:	d003      	beq.n	80051c0 <__mcmp+0x2c>
 80051b8:	d205      	bcs.n	80051c6 <__mcmp+0x32>
 80051ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051be:	bd30      	pop	{r4, r5, pc}
 80051c0:	42a3      	cmp	r3, r4
 80051c2:	d3f3      	bcc.n	80051ac <__mcmp+0x18>
 80051c4:	e7fb      	b.n	80051be <__mcmp+0x2a>
 80051c6:	2001      	movs	r0, #1
 80051c8:	e7f9      	b.n	80051be <__mcmp+0x2a>
	...

080051cc <__mdiff>:
 80051cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d0:	4689      	mov	r9, r1
 80051d2:	4606      	mov	r6, r0
 80051d4:	4611      	mov	r1, r2
 80051d6:	4648      	mov	r0, r9
 80051d8:	4614      	mov	r4, r2
 80051da:	f7ff ffdb 	bl	8005194 <__mcmp>
 80051de:	1e05      	subs	r5, r0, #0
 80051e0:	d112      	bne.n	8005208 <__mdiff+0x3c>
 80051e2:	4629      	mov	r1, r5
 80051e4:	4630      	mov	r0, r6
 80051e6:	f7ff fd5b 	bl	8004ca0 <_Balloc>
 80051ea:	4602      	mov	r2, r0
 80051ec:	b928      	cbnz	r0, 80051fa <__mdiff+0x2e>
 80051ee:	4b3f      	ldr	r3, [pc, #252]	@ (80052ec <__mdiff+0x120>)
 80051f0:	f240 2137 	movw	r1, #567	@ 0x237
 80051f4:	483e      	ldr	r0, [pc, #248]	@ (80052f0 <__mdiff+0x124>)
 80051f6:	f000 f99f 	bl	8005538 <__assert_func>
 80051fa:	2301      	movs	r3, #1
 80051fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005200:	4610      	mov	r0, r2
 8005202:	b003      	add	sp, #12
 8005204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005208:	bfbc      	itt	lt
 800520a:	464b      	movlt	r3, r9
 800520c:	46a1      	movlt	r9, r4
 800520e:	4630      	mov	r0, r6
 8005210:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005214:	bfba      	itte	lt
 8005216:	461c      	movlt	r4, r3
 8005218:	2501      	movlt	r5, #1
 800521a:	2500      	movge	r5, #0
 800521c:	f7ff fd40 	bl	8004ca0 <_Balloc>
 8005220:	4602      	mov	r2, r0
 8005222:	b918      	cbnz	r0, 800522c <__mdiff+0x60>
 8005224:	4b31      	ldr	r3, [pc, #196]	@ (80052ec <__mdiff+0x120>)
 8005226:	f240 2145 	movw	r1, #581	@ 0x245
 800522a:	e7e3      	b.n	80051f4 <__mdiff+0x28>
 800522c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005230:	6926      	ldr	r6, [r4, #16]
 8005232:	60c5      	str	r5, [r0, #12]
 8005234:	f109 0310 	add.w	r3, r9, #16
 8005238:	f109 0514 	add.w	r5, r9, #20
 800523c:	f104 0e14 	add.w	lr, r4, #20
 8005240:	f100 0b14 	add.w	fp, r0, #20
 8005244:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005248:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	46d9      	mov	r9, fp
 8005250:	f04f 0c00 	mov.w	ip, #0
 8005254:	9b01      	ldr	r3, [sp, #4]
 8005256:	f85e 0b04 	ldr.w	r0, [lr], #4
 800525a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800525e:	9301      	str	r3, [sp, #4]
 8005260:	fa1f f38a 	uxth.w	r3, sl
 8005264:	4619      	mov	r1, r3
 8005266:	b283      	uxth	r3, r0
 8005268:	1acb      	subs	r3, r1, r3
 800526a:	0c00      	lsrs	r0, r0, #16
 800526c:	4463      	add	r3, ip
 800526e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005272:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005276:	b29b      	uxth	r3, r3
 8005278:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800527c:	4576      	cmp	r6, lr
 800527e:	f849 3b04 	str.w	r3, [r9], #4
 8005282:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005286:	d8e5      	bhi.n	8005254 <__mdiff+0x88>
 8005288:	1b33      	subs	r3, r6, r4
 800528a:	3b15      	subs	r3, #21
 800528c:	f023 0303 	bic.w	r3, r3, #3
 8005290:	3415      	adds	r4, #21
 8005292:	3304      	adds	r3, #4
 8005294:	42a6      	cmp	r6, r4
 8005296:	bf38      	it	cc
 8005298:	2304      	movcc	r3, #4
 800529a:	441d      	add	r5, r3
 800529c:	445b      	add	r3, fp
 800529e:	461e      	mov	r6, r3
 80052a0:	462c      	mov	r4, r5
 80052a2:	4544      	cmp	r4, r8
 80052a4:	d30e      	bcc.n	80052c4 <__mdiff+0xf8>
 80052a6:	f108 0103 	add.w	r1, r8, #3
 80052aa:	1b49      	subs	r1, r1, r5
 80052ac:	f021 0103 	bic.w	r1, r1, #3
 80052b0:	3d03      	subs	r5, #3
 80052b2:	45a8      	cmp	r8, r5
 80052b4:	bf38      	it	cc
 80052b6:	2100      	movcc	r1, #0
 80052b8:	440b      	add	r3, r1
 80052ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80052be:	b191      	cbz	r1, 80052e6 <__mdiff+0x11a>
 80052c0:	6117      	str	r7, [r2, #16]
 80052c2:	e79d      	b.n	8005200 <__mdiff+0x34>
 80052c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80052c8:	46e6      	mov	lr, ip
 80052ca:	0c08      	lsrs	r0, r1, #16
 80052cc:	fa1c fc81 	uxtah	ip, ip, r1
 80052d0:	4471      	add	r1, lr
 80052d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80052d6:	b289      	uxth	r1, r1
 80052d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80052dc:	f846 1b04 	str.w	r1, [r6], #4
 80052e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80052e4:	e7dd      	b.n	80052a2 <__mdiff+0xd6>
 80052e6:	3f01      	subs	r7, #1
 80052e8:	e7e7      	b.n	80052ba <__mdiff+0xee>
 80052ea:	bf00      	nop
 80052ec:	08005c28 	.word	0x08005c28
 80052f0:	08005c39 	.word	0x08005c39

080052f4 <__d2b>:
 80052f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80052f8:	460f      	mov	r7, r1
 80052fa:	2101      	movs	r1, #1
 80052fc:	ec59 8b10 	vmov	r8, r9, d0
 8005300:	4616      	mov	r6, r2
 8005302:	f7ff fccd 	bl	8004ca0 <_Balloc>
 8005306:	4604      	mov	r4, r0
 8005308:	b930      	cbnz	r0, 8005318 <__d2b+0x24>
 800530a:	4602      	mov	r2, r0
 800530c:	4b23      	ldr	r3, [pc, #140]	@ (800539c <__d2b+0xa8>)
 800530e:	4824      	ldr	r0, [pc, #144]	@ (80053a0 <__d2b+0xac>)
 8005310:	f240 310f 	movw	r1, #783	@ 0x30f
 8005314:	f000 f910 	bl	8005538 <__assert_func>
 8005318:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800531c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005320:	b10d      	cbz	r5, 8005326 <__d2b+0x32>
 8005322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005326:	9301      	str	r3, [sp, #4]
 8005328:	f1b8 0300 	subs.w	r3, r8, #0
 800532c:	d023      	beq.n	8005376 <__d2b+0x82>
 800532e:	4668      	mov	r0, sp
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	f7ff fd7c 	bl	8004e2e <__lo0bits>
 8005336:	e9dd 1200 	ldrd	r1, r2, [sp]
 800533a:	b1d0      	cbz	r0, 8005372 <__d2b+0x7e>
 800533c:	f1c0 0320 	rsb	r3, r0, #32
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	430b      	orrs	r3, r1
 8005346:	40c2      	lsrs	r2, r0
 8005348:	6163      	str	r3, [r4, #20]
 800534a:	9201      	str	r2, [sp, #4]
 800534c:	9b01      	ldr	r3, [sp, #4]
 800534e:	61a3      	str	r3, [r4, #24]
 8005350:	2b00      	cmp	r3, #0
 8005352:	bf0c      	ite	eq
 8005354:	2201      	moveq	r2, #1
 8005356:	2202      	movne	r2, #2
 8005358:	6122      	str	r2, [r4, #16]
 800535a:	b1a5      	cbz	r5, 8005386 <__d2b+0x92>
 800535c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005360:	4405      	add	r5, r0
 8005362:	603d      	str	r5, [r7, #0]
 8005364:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005368:	6030      	str	r0, [r6, #0]
 800536a:	4620      	mov	r0, r4
 800536c:	b003      	add	sp, #12
 800536e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005372:	6161      	str	r1, [r4, #20]
 8005374:	e7ea      	b.n	800534c <__d2b+0x58>
 8005376:	a801      	add	r0, sp, #4
 8005378:	f7ff fd59 	bl	8004e2e <__lo0bits>
 800537c:	9b01      	ldr	r3, [sp, #4]
 800537e:	6163      	str	r3, [r4, #20]
 8005380:	3020      	adds	r0, #32
 8005382:	2201      	movs	r2, #1
 8005384:	e7e8      	b.n	8005358 <__d2b+0x64>
 8005386:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800538a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800538e:	6038      	str	r0, [r7, #0]
 8005390:	6918      	ldr	r0, [r3, #16]
 8005392:	f7ff fd2d 	bl	8004df0 <__hi0bits>
 8005396:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800539a:	e7e5      	b.n	8005368 <__d2b+0x74>
 800539c:	08005c28 	.word	0x08005c28
 80053a0:	08005c39 	.word	0x08005c39

080053a4 <__sflush_r>:
 80053a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ac:	0716      	lsls	r6, r2, #28
 80053ae:	4605      	mov	r5, r0
 80053b0:	460c      	mov	r4, r1
 80053b2:	d454      	bmi.n	800545e <__sflush_r+0xba>
 80053b4:	684b      	ldr	r3, [r1, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	dc02      	bgt.n	80053c0 <__sflush_r+0x1c>
 80053ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	dd48      	ble.n	8005452 <__sflush_r+0xae>
 80053c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053c2:	2e00      	cmp	r6, #0
 80053c4:	d045      	beq.n	8005452 <__sflush_r+0xae>
 80053c6:	2300      	movs	r3, #0
 80053c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80053cc:	682f      	ldr	r7, [r5, #0]
 80053ce:	6a21      	ldr	r1, [r4, #32]
 80053d0:	602b      	str	r3, [r5, #0]
 80053d2:	d030      	beq.n	8005436 <__sflush_r+0x92>
 80053d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80053d6:	89a3      	ldrh	r3, [r4, #12]
 80053d8:	0759      	lsls	r1, r3, #29
 80053da:	d505      	bpl.n	80053e8 <__sflush_r+0x44>
 80053dc:	6863      	ldr	r3, [r4, #4]
 80053de:	1ad2      	subs	r2, r2, r3
 80053e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80053e2:	b10b      	cbz	r3, 80053e8 <__sflush_r+0x44>
 80053e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053e6:	1ad2      	subs	r2, r2, r3
 80053e8:	2300      	movs	r3, #0
 80053ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053ec:	6a21      	ldr	r1, [r4, #32]
 80053ee:	4628      	mov	r0, r5
 80053f0:	47b0      	blx	r6
 80053f2:	1c43      	adds	r3, r0, #1
 80053f4:	89a3      	ldrh	r3, [r4, #12]
 80053f6:	d106      	bne.n	8005406 <__sflush_r+0x62>
 80053f8:	6829      	ldr	r1, [r5, #0]
 80053fa:	291d      	cmp	r1, #29
 80053fc:	d82b      	bhi.n	8005456 <__sflush_r+0xb2>
 80053fe:	4a2a      	ldr	r2, [pc, #168]	@ (80054a8 <__sflush_r+0x104>)
 8005400:	410a      	asrs	r2, r1
 8005402:	07d6      	lsls	r6, r2, #31
 8005404:	d427      	bmi.n	8005456 <__sflush_r+0xb2>
 8005406:	2200      	movs	r2, #0
 8005408:	6062      	str	r2, [r4, #4]
 800540a:	04d9      	lsls	r1, r3, #19
 800540c:	6922      	ldr	r2, [r4, #16]
 800540e:	6022      	str	r2, [r4, #0]
 8005410:	d504      	bpl.n	800541c <__sflush_r+0x78>
 8005412:	1c42      	adds	r2, r0, #1
 8005414:	d101      	bne.n	800541a <__sflush_r+0x76>
 8005416:	682b      	ldr	r3, [r5, #0]
 8005418:	b903      	cbnz	r3, 800541c <__sflush_r+0x78>
 800541a:	6560      	str	r0, [r4, #84]	@ 0x54
 800541c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800541e:	602f      	str	r7, [r5, #0]
 8005420:	b1b9      	cbz	r1, 8005452 <__sflush_r+0xae>
 8005422:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005426:	4299      	cmp	r1, r3
 8005428:	d002      	beq.n	8005430 <__sflush_r+0x8c>
 800542a:	4628      	mov	r0, r5
 800542c:	f7ff fb38 	bl	8004aa0 <_free_r>
 8005430:	2300      	movs	r3, #0
 8005432:	6363      	str	r3, [r4, #52]	@ 0x34
 8005434:	e00d      	b.n	8005452 <__sflush_r+0xae>
 8005436:	2301      	movs	r3, #1
 8005438:	4628      	mov	r0, r5
 800543a:	47b0      	blx	r6
 800543c:	4602      	mov	r2, r0
 800543e:	1c50      	adds	r0, r2, #1
 8005440:	d1c9      	bne.n	80053d6 <__sflush_r+0x32>
 8005442:	682b      	ldr	r3, [r5, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0c6      	beq.n	80053d6 <__sflush_r+0x32>
 8005448:	2b1d      	cmp	r3, #29
 800544a:	d001      	beq.n	8005450 <__sflush_r+0xac>
 800544c:	2b16      	cmp	r3, #22
 800544e:	d11e      	bne.n	800548e <__sflush_r+0xea>
 8005450:	602f      	str	r7, [r5, #0]
 8005452:	2000      	movs	r0, #0
 8005454:	e022      	b.n	800549c <__sflush_r+0xf8>
 8005456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800545a:	b21b      	sxth	r3, r3
 800545c:	e01b      	b.n	8005496 <__sflush_r+0xf2>
 800545e:	690f      	ldr	r7, [r1, #16]
 8005460:	2f00      	cmp	r7, #0
 8005462:	d0f6      	beq.n	8005452 <__sflush_r+0xae>
 8005464:	0793      	lsls	r3, r2, #30
 8005466:	680e      	ldr	r6, [r1, #0]
 8005468:	bf08      	it	eq
 800546a:	694b      	ldreq	r3, [r1, #20]
 800546c:	600f      	str	r7, [r1, #0]
 800546e:	bf18      	it	ne
 8005470:	2300      	movne	r3, #0
 8005472:	eba6 0807 	sub.w	r8, r6, r7
 8005476:	608b      	str	r3, [r1, #8]
 8005478:	f1b8 0f00 	cmp.w	r8, #0
 800547c:	dde9      	ble.n	8005452 <__sflush_r+0xae>
 800547e:	6a21      	ldr	r1, [r4, #32]
 8005480:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005482:	4643      	mov	r3, r8
 8005484:	463a      	mov	r2, r7
 8005486:	4628      	mov	r0, r5
 8005488:	47b0      	blx	r6
 800548a:	2800      	cmp	r0, #0
 800548c:	dc08      	bgt.n	80054a0 <__sflush_r+0xfc>
 800548e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005496:	81a3      	strh	r3, [r4, #12]
 8005498:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800549c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054a0:	4407      	add	r7, r0
 80054a2:	eba8 0800 	sub.w	r8, r8, r0
 80054a6:	e7e7      	b.n	8005478 <__sflush_r+0xd4>
 80054a8:	dfbffffe 	.word	0xdfbffffe

080054ac <_fflush_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	690b      	ldr	r3, [r1, #16]
 80054b0:	4605      	mov	r5, r0
 80054b2:	460c      	mov	r4, r1
 80054b4:	b913      	cbnz	r3, 80054bc <_fflush_r+0x10>
 80054b6:	2500      	movs	r5, #0
 80054b8:	4628      	mov	r0, r5
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	b118      	cbz	r0, 80054c6 <_fflush_r+0x1a>
 80054be:	6a03      	ldr	r3, [r0, #32]
 80054c0:	b90b      	cbnz	r3, 80054c6 <_fflush_r+0x1a>
 80054c2:	f7fe fba7 	bl	8003c14 <__sinit>
 80054c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f3      	beq.n	80054b6 <_fflush_r+0xa>
 80054ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80054d0:	07d0      	lsls	r0, r2, #31
 80054d2:	d404      	bmi.n	80054de <_fflush_r+0x32>
 80054d4:	0599      	lsls	r1, r3, #22
 80054d6:	d402      	bmi.n	80054de <_fflush_r+0x32>
 80054d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054da:	f7fe fc92 	bl	8003e02 <__retarget_lock_acquire_recursive>
 80054de:	4628      	mov	r0, r5
 80054e0:	4621      	mov	r1, r4
 80054e2:	f7ff ff5f 	bl	80053a4 <__sflush_r>
 80054e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054e8:	07da      	lsls	r2, r3, #31
 80054ea:	4605      	mov	r5, r0
 80054ec:	d4e4      	bmi.n	80054b8 <_fflush_r+0xc>
 80054ee:	89a3      	ldrh	r3, [r4, #12]
 80054f0:	059b      	lsls	r3, r3, #22
 80054f2:	d4e1      	bmi.n	80054b8 <_fflush_r+0xc>
 80054f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054f6:	f7fe fc85 	bl	8003e04 <__retarget_lock_release_recursive>
 80054fa:	e7dd      	b.n	80054b8 <_fflush_r+0xc>

080054fc <_sbrk_r>:
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	4d06      	ldr	r5, [pc, #24]	@ (8005518 <_sbrk_r+0x1c>)
 8005500:	2300      	movs	r3, #0
 8005502:	4604      	mov	r4, r0
 8005504:	4608      	mov	r0, r1
 8005506:	602b      	str	r3, [r5, #0]
 8005508:	f7fc f822 	bl	8001550 <_sbrk>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_sbrk_r+0x1a>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_sbrk_r+0x1a>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	20000418 	.word	0x20000418

0800551c <memcpy>:
 800551c:	440a      	add	r2, r1
 800551e:	4291      	cmp	r1, r2
 8005520:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005524:	d100      	bne.n	8005528 <memcpy+0xc>
 8005526:	4770      	bx	lr
 8005528:	b510      	push	{r4, lr}
 800552a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800552e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005532:	4291      	cmp	r1, r2
 8005534:	d1f9      	bne.n	800552a <memcpy+0xe>
 8005536:	bd10      	pop	{r4, pc}

08005538 <__assert_func>:
 8005538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800553a:	4614      	mov	r4, r2
 800553c:	461a      	mov	r2, r3
 800553e:	4b09      	ldr	r3, [pc, #36]	@ (8005564 <__assert_func+0x2c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4605      	mov	r5, r0
 8005544:	68d8      	ldr	r0, [r3, #12]
 8005546:	b954      	cbnz	r4, 800555e <__assert_func+0x26>
 8005548:	4b07      	ldr	r3, [pc, #28]	@ (8005568 <__assert_func+0x30>)
 800554a:	461c      	mov	r4, r3
 800554c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005550:	9100      	str	r1, [sp, #0]
 8005552:	462b      	mov	r3, r5
 8005554:	4905      	ldr	r1, [pc, #20]	@ (800556c <__assert_func+0x34>)
 8005556:	f000 f841 	bl	80055dc <fiprintf>
 800555a:	f000 f851 	bl	8005600 <abort>
 800555e:	4b04      	ldr	r3, [pc, #16]	@ (8005570 <__assert_func+0x38>)
 8005560:	e7f4      	b.n	800554c <__assert_func+0x14>
 8005562:	bf00      	nop
 8005564:	20000018 	.word	0x20000018
 8005568:	08005dd5 	.word	0x08005dd5
 800556c:	08005da7 	.word	0x08005da7
 8005570:	08005d9a 	.word	0x08005d9a

08005574 <_calloc_r>:
 8005574:	b570      	push	{r4, r5, r6, lr}
 8005576:	fba1 5402 	umull	r5, r4, r1, r2
 800557a:	b93c      	cbnz	r4, 800558c <_calloc_r+0x18>
 800557c:	4629      	mov	r1, r5
 800557e:	f7ff fb03 	bl	8004b88 <_malloc_r>
 8005582:	4606      	mov	r6, r0
 8005584:	b928      	cbnz	r0, 8005592 <_calloc_r+0x1e>
 8005586:	2600      	movs	r6, #0
 8005588:	4630      	mov	r0, r6
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	220c      	movs	r2, #12
 800558e:	6002      	str	r2, [r0, #0]
 8005590:	e7f9      	b.n	8005586 <_calloc_r+0x12>
 8005592:	462a      	mov	r2, r5
 8005594:	4621      	mov	r1, r4
 8005596:	f7fe fbb6 	bl	8003d06 <memset>
 800559a:	e7f5      	b.n	8005588 <_calloc_r+0x14>

0800559c <__ascii_mbtowc>:
 800559c:	b082      	sub	sp, #8
 800559e:	b901      	cbnz	r1, 80055a2 <__ascii_mbtowc+0x6>
 80055a0:	a901      	add	r1, sp, #4
 80055a2:	b142      	cbz	r2, 80055b6 <__ascii_mbtowc+0x1a>
 80055a4:	b14b      	cbz	r3, 80055ba <__ascii_mbtowc+0x1e>
 80055a6:	7813      	ldrb	r3, [r2, #0]
 80055a8:	600b      	str	r3, [r1, #0]
 80055aa:	7812      	ldrb	r2, [r2, #0]
 80055ac:	1e10      	subs	r0, r2, #0
 80055ae:	bf18      	it	ne
 80055b0:	2001      	movne	r0, #1
 80055b2:	b002      	add	sp, #8
 80055b4:	4770      	bx	lr
 80055b6:	4610      	mov	r0, r2
 80055b8:	e7fb      	b.n	80055b2 <__ascii_mbtowc+0x16>
 80055ba:	f06f 0001 	mvn.w	r0, #1
 80055be:	e7f8      	b.n	80055b2 <__ascii_mbtowc+0x16>

080055c0 <__ascii_wctomb>:
 80055c0:	4603      	mov	r3, r0
 80055c2:	4608      	mov	r0, r1
 80055c4:	b141      	cbz	r1, 80055d8 <__ascii_wctomb+0x18>
 80055c6:	2aff      	cmp	r2, #255	@ 0xff
 80055c8:	d904      	bls.n	80055d4 <__ascii_wctomb+0x14>
 80055ca:	228a      	movs	r2, #138	@ 0x8a
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055d2:	4770      	bx	lr
 80055d4:	700a      	strb	r2, [r1, #0]
 80055d6:	2001      	movs	r0, #1
 80055d8:	4770      	bx	lr
	...

080055dc <fiprintf>:
 80055dc:	b40e      	push	{r1, r2, r3}
 80055de:	b503      	push	{r0, r1, lr}
 80055e0:	4601      	mov	r1, r0
 80055e2:	ab03      	add	r3, sp, #12
 80055e4:	4805      	ldr	r0, [pc, #20]	@ (80055fc <fiprintf+0x20>)
 80055e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80055ea:	6800      	ldr	r0, [r0, #0]
 80055ec:	9301      	str	r3, [sp, #4]
 80055ee:	f000 f837 	bl	8005660 <_vfiprintf_r>
 80055f2:	b002      	add	sp, #8
 80055f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80055f8:	b003      	add	sp, #12
 80055fa:	4770      	bx	lr
 80055fc:	20000018 	.word	0x20000018

08005600 <abort>:
 8005600:	b508      	push	{r3, lr}
 8005602:	2006      	movs	r0, #6
 8005604:	f000 fa00 	bl	8005a08 <raise>
 8005608:	2001      	movs	r0, #1
 800560a:	f7fb ff29 	bl	8001460 <_exit>

0800560e <__sfputc_r>:
 800560e:	6893      	ldr	r3, [r2, #8]
 8005610:	3b01      	subs	r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	b410      	push	{r4}
 8005616:	6093      	str	r3, [r2, #8]
 8005618:	da08      	bge.n	800562c <__sfputc_r+0x1e>
 800561a:	6994      	ldr	r4, [r2, #24]
 800561c:	42a3      	cmp	r3, r4
 800561e:	db01      	blt.n	8005624 <__sfputc_r+0x16>
 8005620:	290a      	cmp	r1, #10
 8005622:	d103      	bne.n	800562c <__sfputc_r+0x1e>
 8005624:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005628:	f000 b932 	b.w	8005890 <__swbuf_r>
 800562c:	6813      	ldr	r3, [r2, #0]
 800562e:	1c58      	adds	r0, r3, #1
 8005630:	6010      	str	r0, [r2, #0]
 8005632:	7019      	strb	r1, [r3, #0]
 8005634:	4608      	mov	r0, r1
 8005636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800563a:	4770      	bx	lr

0800563c <__sfputs_r>:
 800563c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563e:	4606      	mov	r6, r0
 8005640:	460f      	mov	r7, r1
 8005642:	4614      	mov	r4, r2
 8005644:	18d5      	adds	r5, r2, r3
 8005646:	42ac      	cmp	r4, r5
 8005648:	d101      	bne.n	800564e <__sfputs_r+0x12>
 800564a:	2000      	movs	r0, #0
 800564c:	e007      	b.n	800565e <__sfputs_r+0x22>
 800564e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005652:	463a      	mov	r2, r7
 8005654:	4630      	mov	r0, r6
 8005656:	f7ff ffda 	bl	800560e <__sfputc_r>
 800565a:	1c43      	adds	r3, r0, #1
 800565c:	d1f3      	bne.n	8005646 <__sfputs_r+0xa>
 800565e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005660 <_vfiprintf_r>:
 8005660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005664:	460d      	mov	r5, r1
 8005666:	b09d      	sub	sp, #116	@ 0x74
 8005668:	4614      	mov	r4, r2
 800566a:	4698      	mov	r8, r3
 800566c:	4606      	mov	r6, r0
 800566e:	b118      	cbz	r0, 8005678 <_vfiprintf_r+0x18>
 8005670:	6a03      	ldr	r3, [r0, #32]
 8005672:	b90b      	cbnz	r3, 8005678 <_vfiprintf_r+0x18>
 8005674:	f7fe face 	bl	8003c14 <__sinit>
 8005678:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800567a:	07d9      	lsls	r1, r3, #31
 800567c:	d405      	bmi.n	800568a <_vfiprintf_r+0x2a>
 800567e:	89ab      	ldrh	r3, [r5, #12]
 8005680:	059a      	lsls	r2, r3, #22
 8005682:	d402      	bmi.n	800568a <_vfiprintf_r+0x2a>
 8005684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005686:	f7fe fbbc 	bl	8003e02 <__retarget_lock_acquire_recursive>
 800568a:	89ab      	ldrh	r3, [r5, #12]
 800568c:	071b      	lsls	r3, r3, #28
 800568e:	d501      	bpl.n	8005694 <_vfiprintf_r+0x34>
 8005690:	692b      	ldr	r3, [r5, #16]
 8005692:	b99b      	cbnz	r3, 80056bc <_vfiprintf_r+0x5c>
 8005694:	4629      	mov	r1, r5
 8005696:	4630      	mov	r0, r6
 8005698:	f000 f938 	bl	800590c <__swsetup_r>
 800569c:	b170      	cbz	r0, 80056bc <_vfiprintf_r+0x5c>
 800569e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056a0:	07dc      	lsls	r4, r3, #31
 80056a2:	d504      	bpl.n	80056ae <_vfiprintf_r+0x4e>
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056a8:	b01d      	add	sp, #116	@ 0x74
 80056aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ae:	89ab      	ldrh	r3, [r5, #12]
 80056b0:	0598      	lsls	r0, r3, #22
 80056b2:	d4f7      	bmi.n	80056a4 <_vfiprintf_r+0x44>
 80056b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056b6:	f7fe fba5 	bl	8003e04 <__retarget_lock_release_recursive>
 80056ba:	e7f3      	b.n	80056a4 <_vfiprintf_r+0x44>
 80056bc:	2300      	movs	r3, #0
 80056be:	9309      	str	r3, [sp, #36]	@ 0x24
 80056c0:	2320      	movs	r3, #32
 80056c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80056ca:	2330      	movs	r3, #48	@ 0x30
 80056cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800587c <_vfiprintf_r+0x21c>
 80056d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056d4:	f04f 0901 	mov.w	r9, #1
 80056d8:	4623      	mov	r3, r4
 80056da:	469a      	mov	sl, r3
 80056dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056e0:	b10a      	cbz	r2, 80056e6 <_vfiprintf_r+0x86>
 80056e2:	2a25      	cmp	r2, #37	@ 0x25
 80056e4:	d1f9      	bne.n	80056da <_vfiprintf_r+0x7a>
 80056e6:	ebba 0b04 	subs.w	fp, sl, r4
 80056ea:	d00b      	beq.n	8005704 <_vfiprintf_r+0xa4>
 80056ec:	465b      	mov	r3, fp
 80056ee:	4622      	mov	r2, r4
 80056f0:	4629      	mov	r1, r5
 80056f2:	4630      	mov	r0, r6
 80056f4:	f7ff ffa2 	bl	800563c <__sfputs_r>
 80056f8:	3001      	adds	r0, #1
 80056fa:	f000 80a7 	beq.w	800584c <_vfiprintf_r+0x1ec>
 80056fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005700:	445a      	add	r2, fp
 8005702:	9209      	str	r2, [sp, #36]	@ 0x24
 8005704:	f89a 3000 	ldrb.w	r3, [sl]
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 809f 	beq.w	800584c <_vfiprintf_r+0x1ec>
 800570e:	2300      	movs	r3, #0
 8005710:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005718:	f10a 0a01 	add.w	sl, sl, #1
 800571c:	9304      	str	r3, [sp, #16]
 800571e:	9307      	str	r3, [sp, #28]
 8005720:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005724:	931a      	str	r3, [sp, #104]	@ 0x68
 8005726:	4654      	mov	r4, sl
 8005728:	2205      	movs	r2, #5
 800572a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800572e:	4853      	ldr	r0, [pc, #332]	@ (800587c <_vfiprintf_r+0x21c>)
 8005730:	f7fa fd56 	bl	80001e0 <memchr>
 8005734:	9a04      	ldr	r2, [sp, #16]
 8005736:	b9d8      	cbnz	r0, 8005770 <_vfiprintf_r+0x110>
 8005738:	06d1      	lsls	r1, r2, #27
 800573a:	bf44      	itt	mi
 800573c:	2320      	movmi	r3, #32
 800573e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005742:	0713      	lsls	r3, r2, #28
 8005744:	bf44      	itt	mi
 8005746:	232b      	movmi	r3, #43	@ 0x2b
 8005748:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800574c:	f89a 3000 	ldrb.w	r3, [sl]
 8005750:	2b2a      	cmp	r3, #42	@ 0x2a
 8005752:	d015      	beq.n	8005780 <_vfiprintf_r+0x120>
 8005754:	9a07      	ldr	r2, [sp, #28]
 8005756:	4654      	mov	r4, sl
 8005758:	2000      	movs	r0, #0
 800575a:	f04f 0c0a 	mov.w	ip, #10
 800575e:	4621      	mov	r1, r4
 8005760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005764:	3b30      	subs	r3, #48	@ 0x30
 8005766:	2b09      	cmp	r3, #9
 8005768:	d94b      	bls.n	8005802 <_vfiprintf_r+0x1a2>
 800576a:	b1b0      	cbz	r0, 800579a <_vfiprintf_r+0x13a>
 800576c:	9207      	str	r2, [sp, #28]
 800576e:	e014      	b.n	800579a <_vfiprintf_r+0x13a>
 8005770:	eba0 0308 	sub.w	r3, r0, r8
 8005774:	fa09 f303 	lsl.w	r3, r9, r3
 8005778:	4313      	orrs	r3, r2
 800577a:	9304      	str	r3, [sp, #16]
 800577c:	46a2      	mov	sl, r4
 800577e:	e7d2      	b.n	8005726 <_vfiprintf_r+0xc6>
 8005780:	9b03      	ldr	r3, [sp, #12]
 8005782:	1d19      	adds	r1, r3, #4
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	9103      	str	r1, [sp, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	bfbb      	ittet	lt
 800578c:	425b      	neglt	r3, r3
 800578e:	f042 0202 	orrlt.w	r2, r2, #2
 8005792:	9307      	strge	r3, [sp, #28]
 8005794:	9307      	strlt	r3, [sp, #28]
 8005796:	bfb8      	it	lt
 8005798:	9204      	strlt	r2, [sp, #16]
 800579a:	7823      	ldrb	r3, [r4, #0]
 800579c:	2b2e      	cmp	r3, #46	@ 0x2e
 800579e:	d10a      	bne.n	80057b6 <_vfiprintf_r+0x156>
 80057a0:	7863      	ldrb	r3, [r4, #1]
 80057a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80057a4:	d132      	bne.n	800580c <_vfiprintf_r+0x1ac>
 80057a6:	9b03      	ldr	r3, [sp, #12]
 80057a8:	1d1a      	adds	r2, r3, #4
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	9203      	str	r2, [sp, #12]
 80057ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057b2:	3402      	adds	r4, #2
 80057b4:	9305      	str	r3, [sp, #20]
 80057b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800588c <_vfiprintf_r+0x22c>
 80057ba:	7821      	ldrb	r1, [r4, #0]
 80057bc:	2203      	movs	r2, #3
 80057be:	4650      	mov	r0, sl
 80057c0:	f7fa fd0e 	bl	80001e0 <memchr>
 80057c4:	b138      	cbz	r0, 80057d6 <_vfiprintf_r+0x176>
 80057c6:	9b04      	ldr	r3, [sp, #16]
 80057c8:	eba0 000a 	sub.w	r0, r0, sl
 80057cc:	2240      	movs	r2, #64	@ 0x40
 80057ce:	4082      	lsls	r2, r0
 80057d0:	4313      	orrs	r3, r2
 80057d2:	3401      	adds	r4, #1
 80057d4:	9304      	str	r3, [sp, #16]
 80057d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057da:	4829      	ldr	r0, [pc, #164]	@ (8005880 <_vfiprintf_r+0x220>)
 80057dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057e0:	2206      	movs	r2, #6
 80057e2:	f7fa fcfd 	bl	80001e0 <memchr>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d03f      	beq.n	800586a <_vfiprintf_r+0x20a>
 80057ea:	4b26      	ldr	r3, [pc, #152]	@ (8005884 <_vfiprintf_r+0x224>)
 80057ec:	bb1b      	cbnz	r3, 8005836 <_vfiprintf_r+0x1d6>
 80057ee:	9b03      	ldr	r3, [sp, #12]
 80057f0:	3307      	adds	r3, #7
 80057f2:	f023 0307 	bic.w	r3, r3, #7
 80057f6:	3308      	adds	r3, #8
 80057f8:	9303      	str	r3, [sp, #12]
 80057fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057fc:	443b      	add	r3, r7
 80057fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005800:	e76a      	b.n	80056d8 <_vfiprintf_r+0x78>
 8005802:	fb0c 3202 	mla	r2, ip, r2, r3
 8005806:	460c      	mov	r4, r1
 8005808:	2001      	movs	r0, #1
 800580a:	e7a8      	b.n	800575e <_vfiprintf_r+0xfe>
 800580c:	2300      	movs	r3, #0
 800580e:	3401      	adds	r4, #1
 8005810:	9305      	str	r3, [sp, #20]
 8005812:	4619      	mov	r1, r3
 8005814:	f04f 0c0a 	mov.w	ip, #10
 8005818:	4620      	mov	r0, r4
 800581a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800581e:	3a30      	subs	r2, #48	@ 0x30
 8005820:	2a09      	cmp	r2, #9
 8005822:	d903      	bls.n	800582c <_vfiprintf_r+0x1cc>
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0c6      	beq.n	80057b6 <_vfiprintf_r+0x156>
 8005828:	9105      	str	r1, [sp, #20]
 800582a:	e7c4      	b.n	80057b6 <_vfiprintf_r+0x156>
 800582c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005830:	4604      	mov	r4, r0
 8005832:	2301      	movs	r3, #1
 8005834:	e7f0      	b.n	8005818 <_vfiprintf_r+0x1b8>
 8005836:	ab03      	add	r3, sp, #12
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	462a      	mov	r2, r5
 800583c:	4b12      	ldr	r3, [pc, #72]	@ (8005888 <_vfiprintf_r+0x228>)
 800583e:	a904      	add	r1, sp, #16
 8005840:	4630      	mov	r0, r6
 8005842:	f7fd fda3 	bl	800338c <_printf_float>
 8005846:	4607      	mov	r7, r0
 8005848:	1c78      	adds	r0, r7, #1
 800584a:	d1d6      	bne.n	80057fa <_vfiprintf_r+0x19a>
 800584c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800584e:	07d9      	lsls	r1, r3, #31
 8005850:	d405      	bmi.n	800585e <_vfiprintf_r+0x1fe>
 8005852:	89ab      	ldrh	r3, [r5, #12]
 8005854:	059a      	lsls	r2, r3, #22
 8005856:	d402      	bmi.n	800585e <_vfiprintf_r+0x1fe>
 8005858:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800585a:	f7fe fad3 	bl	8003e04 <__retarget_lock_release_recursive>
 800585e:	89ab      	ldrh	r3, [r5, #12]
 8005860:	065b      	lsls	r3, r3, #25
 8005862:	f53f af1f 	bmi.w	80056a4 <_vfiprintf_r+0x44>
 8005866:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005868:	e71e      	b.n	80056a8 <_vfiprintf_r+0x48>
 800586a:	ab03      	add	r3, sp, #12
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	462a      	mov	r2, r5
 8005870:	4b05      	ldr	r3, [pc, #20]	@ (8005888 <_vfiprintf_r+0x228>)
 8005872:	a904      	add	r1, sp, #16
 8005874:	4630      	mov	r0, r6
 8005876:	f7fe f821 	bl	80038bc <_printf_i>
 800587a:	e7e4      	b.n	8005846 <_vfiprintf_r+0x1e6>
 800587c:	08005ed7 	.word	0x08005ed7
 8005880:	08005ee1 	.word	0x08005ee1
 8005884:	0800338d 	.word	0x0800338d
 8005888:	0800563d 	.word	0x0800563d
 800588c:	08005edd 	.word	0x08005edd

08005890 <__swbuf_r>:
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	460e      	mov	r6, r1
 8005894:	4614      	mov	r4, r2
 8005896:	4605      	mov	r5, r0
 8005898:	b118      	cbz	r0, 80058a2 <__swbuf_r+0x12>
 800589a:	6a03      	ldr	r3, [r0, #32]
 800589c:	b90b      	cbnz	r3, 80058a2 <__swbuf_r+0x12>
 800589e:	f7fe f9b9 	bl	8003c14 <__sinit>
 80058a2:	69a3      	ldr	r3, [r4, #24]
 80058a4:	60a3      	str	r3, [r4, #8]
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	071a      	lsls	r2, r3, #28
 80058aa:	d501      	bpl.n	80058b0 <__swbuf_r+0x20>
 80058ac:	6923      	ldr	r3, [r4, #16]
 80058ae:	b943      	cbnz	r3, 80058c2 <__swbuf_r+0x32>
 80058b0:	4621      	mov	r1, r4
 80058b2:	4628      	mov	r0, r5
 80058b4:	f000 f82a 	bl	800590c <__swsetup_r>
 80058b8:	b118      	cbz	r0, 80058c2 <__swbuf_r+0x32>
 80058ba:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80058be:	4638      	mov	r0, r7
 80058c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	6922      	ldr	r2, [r4, #16]
 80058c6:	1a98      	subs	r0, r3, r2
 80058c8:	6963      	ldr	r3, [r4, #20]
 80058ca:	b2f6      	uxtb	r6, r6
 80058cc:	4283      	cmp	r3, r0
 80058ce:	4637      	mov	r7, r6
 80058d0:	dc05      	bgt.n	80058de <__swbuf_r+0x4e>
 80058d2:	4621      	mov	r1, r4
 80058d4:	4628      	mov	r0, r5
 80058d6:	f7ff fde9 	bl	80054ac <_fflush_r>
 80058da:	2800      	cmp	r0, #0
 80058dc:	d1ed      	bne.n	80058ba <__swbuf_r+0x2a>
 80058de:	68a3      	ldr	r3, [r4, #8]
 80058e0:	3b01      	subs	r3, #1
 80058e2:	60a3      	str	r3, [r4, #8]
 80058e4:	6823      	ldr	r3, [r4, #0]
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	6022      	str	r2, [r4, #0]
 80058ea:	701e      	strb	r6, [r3, #0]
 80058ec:	6962      	ldr	r2, [r4, #20]
 80058ee:	1c43      	adds	r3, r0, #1
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d004      	beq.n	80058fe <__swbuf_r+0x6e>
 80058f4:	89a3      	ldrh	r3, [r4, #12]
 80058f6:	07db      	lsls	r3, r3, #31
 80058f8:	d5e1      	bpl.n	80058be <__swbuf_r+0x2e>
 80058fa:	2e0a      	cmp	r6, #10
 80058fc:	d1df      	bne.n	80058be <__swbuf_r+0x2e>
 80058fe:	4621      	mov	r1, r4
 8005900:	4628      	mov	r0, r5
 8005902:	f7ff fdd3 	bl	80054ac <_fflush_r>
 8005906:	2800      	cmp	r0, #0
 8005908:	d0d9      	beq.n	80058be <__swbuf_r+0x2e>
 800590a:	e7d6      	b.n	80058ba <__swbuf_r+0x2a>

0800590c <__swsetup_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4b29      	ldr	r3, [pc, #164]	@ (80059b4 <__swsetup_r+0xa8>)
 8005910:	4605      	mov	r5, r0
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	460c      	mov	r4, r1
 8005916:	b118      	cbz	r0, 8005920 <__swsetup_r+0x14>
 8005918:	6a03      	ldr	r3, [r0, #32]
 800591a:	b90b      	cbnz	r3, 8005920 <__swsetup_r+0x14>
 800591c:	f7fe f97a 	bl	8003c14 <__sinit>
 8005920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005924:	0719      	lsls	r1, r3, #28
 8005926:	d422      	bmi.n	800596e <__swsetup_r+0x62>
 8005928:	06da      	lsls	r2, r3, #27
 800592a:	d407      	bmi.n	800593c <__swsetup_r+0x30>
 800592c:	2209      	movs	r2, #9
 800592e:	602a      	str	r2, [r5, #0]
 8005930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005934:	81a3      	strh	r3, [r4, #12]
 8005936:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800593a:	e033      	b.n	80059a4 <__swsetup_r+0x98>
 800593c:	0758      	lsls	r0, r3, #29
 800593e:	d512      	bpl.n	8005966 <__swsetup_r+0x5a>
 8005940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005942:	b141      	cbz	r1, 8005956 <__swsetup_r+0x4a>
 8005944:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005948:	4299      	cmp	r1, r3
 800594a:	d002      	beq.n	8005952 <__swsetup_r+0x46>
 800594c:	4628      	mov	r0, r5
 800594e:	f7ff f8a7 	bl	8004aa0 <_free_r>
 8005952:	2300      	movs	r3, #0
 8005954:	6363      	str	r3, [r4, #52]	@ 0x34
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800595c:	81a3      	strh	r3, [r4, #12]
 800595e:	2300      	movs	r3, #0
 8005960:	6063      	str	r3, [r4, #4]
 8005962:	6923      	ldr	r3, [r4, #16]
 8005964:	6023      	str	r3, [r4, #0]
 8005966:	89a3      	ldrh	r3, [r4, #12]
 8005968:	f043 0308 	orr.w	r3, r3, #8
 800596c:	81a3      	strh	r3, [r4, #12]
 800596e:	6923      	ldr	r3, [r4, #16]
 8005970:	b94b      	cbnz	r3, 8005986 <__swsetup_r+0x7a>
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800597c:	d003      	beq.n	8005986 <__swsetup_r+0x7a>
 800597e:	4621      	mov	r1, r4
 8005980:	4628      	mov	r0, r5
 8005982:	f000 f883 	bl	8005a8c <__smakebuf_r>
 8005986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800598a:	f013 0201 	ands.w	r2, r3, #1
 800598e:	d00a      	beq.n	80059a6 <__swsetup_r+0x9a>
 8005990:	2200      	movs	r2, #0
 8005992:	60a2      	str	r2, [r4, #8]
 8005994:	6962      	ldr	r2, [r4, #20]
 8005996:	4252      	negs	r2, r2
 8005998:	61a2      	str	r2, [r4, #24]
 800599a:	6922      	ldr	r2, [r4, #16]
 800599c:	b942      	cbnz	r2, 80059b0 <__swsetup_r+0xa4>
 800599e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80059a2:	d1c5      	bne.n	8005930 <__swsetup_r+0x24>
 80059a4:	bd38      	pop	{r3, r4, r5, pc}
 80059a6:	0799      	lsls	r1, r3, #30
 80059a8:	bf58      	it	pl
 80059aa:	6962      	ldrpl	r2, [r4, #20]
 80059ac:	60a2      	str	r2, [r4, #8]
 80059ae:	e7f4      	b.n	800599a <__swsetup_r+0x8e>
 80059b0:	2000      	movs	r0, #0
 80059b2:	e7f7      	b.n	80059a4 <__swsetup_r+0x98>
 80059b4:	20000018 	.word	0x20000018

080059b8 <_raise_r>:
 80059b8:	291f      	cmp	r1, #31
 80059ba:	b538      	push	{r3, r4, r5, lr}
 80059bc:	4605      	mov	r5, r0
 80059be:	460c      	mov	r4, r1
 80059c0:	d904      	bls.n	80059cc <_raise_r+0x14>
 80059c2:	2316      	movs	r3, #22
 80059c4:	6003      	str	r3, [r0, #0]
 80059c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059ca:	bd38      	pop	{r3, r4, r5, pc}
 80059cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80059ce:	b112      	cbz	r2, 80059d6 <_raise_r+0x1e>
 80059d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80059d4:	b94b      	cbnz	r3, 80059ea <_raise_r+0x32>
 80059d6:	4628      	mov	r0, r5
 80059d8:	f000 f830 	bl	8005a3c <_getpid_r>
 80059dc:	4622      	mov	r2, r4
 80059de:	4601      	mov	r1, r0
 80059e0:	4628      	mov	r0, r5
 80059e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059e6:	f000 b817 	b.w	8005a18 <_kill_r>
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d00a      	beq.n	8005a04 <_raise_r+0x4c>
 80059ee:	1c59      	adds	r1, r3, #1
 80059f0:	d103      	bne.n	80059fa <_raise_r+0x42>
 80059f2:	2316      	movs	r3, #22
 80059f4:	6003      	str	r3, [r0, #0]
 80059f6:	2001      	movs	r0, #1
 80059f8:	e7e7      	b.n	80059ca <_raise_r+0x12>
 80059fa:	2100      	movs	r1, #0
 80059fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005a00:	4620      	mov	r0, r4
 8005a02:	4798      	blx	r3
 8005a04:	2000      	movs	r0, #0
 8005a06:	e7e0      	b.n	80059ca <_raise_r+0x12>

08005a08 <raise>:
 8005a08:	4b02      	ldr	r3, [pc, #8]	@ (8005a14 <raise+0xc>)
 8005a0a:	4601      	mov	r1, r0
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	f7ff bfd3 	b.w	80059b8 <_raise_r>
 8005a12:	bf00      	nop
 8005a14:	20000018 	.word	0x20000018

08005a18 <_kill_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	4d07      	ldr	r5, [pc, #28]	@ (8005a38 <_kill_r+0x20>)
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	4604      	mov	r4, r0
 8005a20:	4608      	mov	r0, r1
 8005a22:	4611      	mov	r1, r2
 8005a24:	602b      	str	r3, [r5, #0]
 8005a26:	f7fb fd0b 	bl	8001440 <_kill>
 8005a2a:	1c43      	adds	r3, r0, #1
 8005a2c:	d102      	bne.n	8005a34 <_kill_r+0x1c>
 8005a2e:	682b      	ldr	r3, [r5, #0]
 8005a30:	b103      	cbz	r3, 8005a34 <_kill_r+0x1c>
 8005a32:	6023      	str	r3, [r4, #0]
 8005a34:	bd38      	pop	{r3, r4, r5, pc}
 8005a36:	bf00      	nop
 8005a38:	20000418 	.word	0x20000418

08005a3c <_getpid_r>:
 8005a3c:	f7fb bcf8 	b.w	8001430 <_getpid>

08005a40 <__swhatbuf_r>:
 8005a40:	b570      	push	{r4, r5, r6, lr}
 8005a42:	460c      	mov	r4, r1
 8005a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a48:	2900      	cmp	r1, #0
 8005a4a:	b096      	sub	sp, #88	@ 0x58
 8005a4c:	4615      	mov	r5, r2
 8005a4e:	461e      	mov	r6, r3
 8005a50:	da0d      	bge.n	8005a6e <__swhatbuf_r+0x2e>
 8005a52:	89a3      	ldrh	r3, [r4, #12]
 8005a54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a58:	f04f 0100 	mov.w	r1, #0
 8005a5c:	bf14      	ite	ne
 8005a5e:	2340      	movne	r3, #64	@ 0x40
 8005a60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a64:	2000      	movs	r0, #0
 8005a66:	6031      	str	r1, [r6, #0]
 8005a68:	602b      	str	r3, [r5, #0]
 8005a6a:	b016      	add	sp, #88	@ 0x58
 8005a6c:	bd70      	pop	{r4, r5, r6, pc}
 8005a6e:	466a      	mov	r2, sp
 8005a70:	f000 f848 	bl	8005b04 <_fstat_r>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	dbec      	blt.n	8005a52 <__swhatbuf_r+0x12>
 8005a78:	9901      	ldr	r1, [sp, #4]
 8005a7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005a7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005a82:	4259      	negs	r1, r3
 8005a84:	4159      	adcs	r1, r3
 8005a86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a8a:	e7eb      	b.n	8005a64 <__swhatbuf_r+0x24>

08005a8c <__smakebuf_r>:
 8005a8c:	898b      	ldrh	r3, [r1, #12]
 8005a8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a90:	079d      	lsls	r5, r3, #30
 8005a92:	4606      	mov	r6, r0
 8005a94:	460c      	mov	r4, r1
 8005a96:	d507      	bpl.n	8005aa8 <__smakebuf_r+0x1c>
 8005a98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	6123      	str	r3, [r4, #16]
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	6163      	str	r3, [r4, #20]
 8005aa4:	b003      	add	sp, #12
 8005aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aa8:	ab01      	add	r3, sp, #4
 8005aaa:	466a      	mov	r2, sp
 8005aac:	f7ff ffc8 	bl	8005a40 <__swhatbuf_r>
 8005ab0:	9f00      	ldr	r7, [sp, #0]
 8005ab2:	4605      	mov	r5, r0
 8005ab4:	4639      	mov	r1, r7
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	f7ff f866 	bl	8004b88 <_malloc_r>
 8005abc:	b948      	cbnz	r0, 8005ad2 <__smakebuf_r+0x46>
 8005abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ac2:	059a      	lsls	r2, r3, #22
 8005ac4:	d4ee      	bmi.n	8005aa4 <__smakebuf_r+0x18>
 8005ac6:	f023 0303 	bic.w	r3, r3, #3
 8005aca:	f043 0302 	orr.w	r3, r3, #2
 8005ace:	81a3      	strh	r3, [r4, #12]
 8005ad0:	e7e2      	b.n	8005a98 <__smakebuf_r+0xc>
 8005ad2:	89a3      	ldrh	r3, [r4, #12]
 8005ad4:	6020      	str	r0, [r4, #0]
 8005ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ada:	81a3      	strh	r3, [r4, #12]
 8005adc:	9b01      	ldr	r3, [sp, #4]
 8005ade:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005ae2:	b15b      	cbz	r3, 8005afc <__smakebuf_r+0x70>
 8005ae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ae8:	4630      	mov	r0, r6
 8005aea:	f000 f81d 	bl	8005b28 <_isatty_r>
 8005aee:	b128      	cbz	r0, 8005afc <__smakebuf_r+0x70>
 8005af0:	89a3      	ldrh	r3, [r4, #12]
 8005af2:	f023 0303 	bic.w	r3, r3, #3
 8005af6:	f043 0301 	orr.w	r3, r3, #1
 8005afa:	81a3      	strh	r3, [r4, #12]
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	431d      	orrs	r5, r3
 8005b00:	81a5      	strh	r5, [r4, #12]
 8005b02:	e7cf      	b.n	8005aa4 <__smakebuf_r+0x18>

08005b04 <_fstat_r>:
 8005b04:	b538      	push	{r3, r4, r5, lr}
 8005b06:	4d07      	ldr	r5, [pc, #28]	@ (8005b24 <_fstat_r+0x20>)
 8005b08:	2300      	movs	r3, #0
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	4608      	mov	r0, r1
 8005b0e:	4611      	mov	r1, r2
 8005b10:	602b      	str	r3, [r5, #0]
 8005b12:	f7fb fcf5 	bl	8001500 <_fstat>
 8005b16:	1c43      	adds	r3, r0, #1
 8005b18:	d102      	bne.n	8005b20 <_fstat_r+0x1c>
 8005b1a:	682b      	ldr	r3, [r5, #0]
 8005b1c:	b103      	cbz	r3, 8005b20 <_fstat_r+0x1c>
 8005b1e:	6023      	str	r3, [r4, #0]
 8005b20:	bd38      	pop	{r3, r4, r5, pc}
 8005b22:	bf00      	nop
 8005b24:	20000418 	.word	0x20000418

08005b28 <_isatty_r>:
 8005b28:	b538      	push	{r3, r4, r5, lr}
 8005b2a:	4d06      	ldr	r5, [pc, #24]	@ (8005b44 <_isatty_r+0x1c>)
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	4604      	mov	r4, r0
 8005b30:	4608      	mov	r0, r1
 8005b32:	602b      	str	r3, [r5, #0]
 8005b34:	f7fb fcf4 	bl	8001520 <_isatty>
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d102      	bne.n	8005b42 <_isatty_r+0x1a>
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	b103      	cbz	r3, 8005b42 <_isatty_r+0x1a>
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	20000418 	.word	0x20000418

08005b48 <_init>:
 8005b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4a:	bf00      	nop
 8005b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4e:	bc08      	pop	{r3}
 8005b50:	469e      	mov	lr, r3
 8005b52:	4770      	bx	lr

08005b54 <_fini>:
 8005b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b56:	bf00      	nop
 8005b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5a:	bc08      	pop	{r3}
 8005b5c:	469e      	mov	lr, r3
 8005b5e:	4770      	bx	lr
